
main.out:     file format elf32-littleriscv


Disassembly of section .text:

08004000 <_start>:

_start:
init:
.option push
.option norelax
	la		gp, __global_pointer$
 8004000:	0000a197          	auipc	gp,0xa
 8004004:	80018193          	addi	gp,gp,-2048 # 800d800 <__global_pointer$>
.option pop
	call	main
 8004008:	58d000ef          	jal	ra,8004d94 <main>
	call 	exit
 800400c:	6cd030ef          	jal	ra,8007ed8 <exit>

08004010 <__errno>:
	...

0800401c <MadgwickAHRSupdateIMU>:
// }

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800401c:	f6010113          	addi	sp,sp,-160
 8004020:	08112e23          	sw	ra,156(sp)
 8004024:	08812c23          	sw	s0,152(sp)
 8004028:	08813427          	fsd	fs0,136(sp)
 800402c:	0a010413          	addi	s0,sp,160
 8004030:	f7c470bf f6a42e27 	0xf6a42e27f7c470bf
 8004038:	f78470bf f6b42c27 	0xf6b42c27f78470bf
 8004040:	f74470bf f6c42a27 	0xf6c42a27f74470bf
 8004048:	f70470bf f6d42827 	0xf6d42827f70470bf
 8004050:	f6c470bf f6e42627 	0xf6e42627f6c470bf
 8004058:	f68470bf f6f42427 	0xf6f42427f68470bf
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004060:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8004068:	000070bf 20f79753 	0x20f79753000070bf
 8004070:	f7c470bf f7c42787 	0xf7c42787f7c470bf
 8004078:	000070bf 10f77753 	0x10f77753000070bf
 8004080:	1681f0bf 1681a687 	0x1681a6871681f0bf
 8004088:	f78470bf f7842787 	0xf7842787f78470bf
 8004090:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004098:	000070bf 08f77753 	0x8f77753000070bf
 80040a0:	16c1f0bf 16c1a687 	0x16c1a68716c1f0bf
 80040a8:	f74470bf f7442787 	0xf7442787f74470bf
 80040b0:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80040b8:	000070bf 08f77753 	0x8f77753000070bf
 80040c0:	0800c7b7          	lui	a5,0x800c
 80040c4:	ebc7f0bf ebc7a787 	0xebc7a787ebc7f0bf
 80040cc:	000070bf 10f777d3 	0x10f777d3000070bf
 80040d4:	fdc470bf fcf42e27 	0xfcf42e27fdc470bf
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80040dc:	1501f0bf 1501a707 	0x1501a7071501f0bf
 80040e4:	f7c470bf f7c42787 	0xf7c42787f7c470bf
 80040ec:	000070bf 10f77753 	0x10f77753000070bf
 80040f4:	1681f0bf 1681a687 	0x1681a6871681f0bf
 80040fc:	f74470bf f7442787 	0xf7442787f74470bf
 8004104:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800410c:	000070bf 00f77753 	0xf77753000070bf
 8004114:	16c1f0bf 16c1a687 	0x16c1a68716c1f0bf
 800411c:	f78470bf f7842787 	0xf7842787f78470bf
 8004124:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800412c:	000070bf 08f77753 	0x8f77753000070bf
 8004134:	0800c7b7          	lui	a5,0x800c
 8004138:	ebc7f0bf ebc7a787 	0xebc7a787ebc7f0bf
 8004140:	000070bf 10f777d3 	0x10f777d3000070bf
 8004148:	fd8470bf fcf42c27 	0xfcf42c27fd8470bf
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004150:	1501f0bf 1501a707 	0x1501a7071501f0bf
 8004158:	f78470bf f7842787 	0xf7842787f78470bf
 8004160:	000070bf 10f77753 	0x10f77753000070bf
 8004168:	1641f0bf 1641a687 	0x1641a6871641f0bf
 8004170:	f74470bf f7442787 	0xf7442787f74470bf
 8004178:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004180:	000070bf 08f77753 	0x8f77753000070bf
 8004188:	16c1f0bf 16c1a687 	0x16c1a68716c1f0bf
 8004190:	f7c470bf f7c42787 	0xf7c42787f7c470bf
 8004198:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80041a0:	000070bf 00f77753 	0xf77753000070bf
 80041a8:	0800c7b7          	lui	a5,0x800c
 80041ac:	ebc7f0bf ebc7a787 	0xebc7a787ebc7f0bf
 80041b4:	000070bf 10f777d3 	0x10f777d3000070bf
 80041bc:	fd4470bf fcf42a27 	0xfcf42a27fd4470bf
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80041c4:	1501f0bf 1501a707 	0x1501a7071501f0bf
 80041cc:	f74470bf f7442787 	0xf7442787f74470bf
 80041d4:	000070bf 10f77753 	0x10f77753000070bf
 80041dc:	1641f0bf 1641a687 	0x1641a6871641f0bf
 80041e4:	f78470bf f7842787 	0xf7842787f78470bf
 80041ec:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80041f4:	000070bf 00f77753 	0xf77753000070bf
 80041fc:	1681f0bf 1681a687 	0x1681a6871681f0bf
 8004204:	f7c470bf f7c42787 	0xf7c42787f7c470bf
 800420c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004214:	000070bf 08f77753 	0x8f77753000070bf
 800421c:	0800c7b7          	lui	a5,0x800c
 8004220:	ebc7f0bf ebc7a787 	0xebc7a787ebc7f0bf
 8004228:	000070bf 10f777d3 	0x10f777d3000070bf
 8004230:	fd0470bf fcf42827 	0xfcf42827fd0470bf

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8004238:	f70470bf f7042787 	0xf7042787f70470bf
 8004240:	f0000753          	fmv.s.x	fa4,zero
 8004244:	a0e7a7d3          	feq.s	a5,fa5,fa4
 8004248:	02078663          	beqz	a5,8004274 <MadgwickAHRSupdateIMU+0x258>
 800424c:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 8004254:	f0000753          	fmv.s.x	fa4,zero
 8004258:	a0e7a7d3          	feq.s	a5,fa5,fa4
 800425c:	00078c63          	beqz	a5,8004274 <MadgwickAHRSupdateIMU+0x258>
 8004260:	f68470bf f6842787 	0xf6842787f68470bf
 8004268:	f0000753          	fmv.s.x	fa4,zero
 800426c:	a0e7a7d3          	feq.s	a5,fa5,fa4
 8004270:	0c0794e3          	bnez	a5,8004b38 <MadgwickAHRSupdateIMU+0xb1c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004274:	f70470bf f7042707 	0xf7042707f70470bf
 800427c:	f70470bf f7042787 	0xf7042787f70470bf
 8004284:	000070bf 10f77753 	0x10f77753000070bf
 800428c:	f6c470bf f6c42687 	0xf6c42687f6c470bf
 8004294:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 800429c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80042a4:	000070bf 00f77753 	0xf77753000070bf
 80042ac:	f68470bf f6842687 	0xf6842687f68470bf
 80042b4:	f68470bf f6842787 	0xf6842787f68470bf
 80042bc:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80042c4:	000070bf 00f777d3 	0xf777d3000070bf
 80042cc:	000070bf 20f78553 	0x20f78553000070bf
 80042d4:	259000ef          	jal	ra,8004d2c <invSqrt>
 80042d8:	fcc470bf fca42627 	0xfca42627fcc470bf
		ax *= recipNorm;
 80042e0:	f70470bf f7042707 	0xf7042707f70470bf
 80042e8:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 80042f0:	000070bf 10f777d3 	0x10f777d3000070bf
 80042f8:	f70470bf f6f42827 	0xf6f42827f70470bf
		ay *= recipNorm;
 8004300:	f6c470bf f6c42707 	0xf6c42707f6c470bf
 8004308:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004310:	000070bf 10f777d3 	0x10f777d3000070bf
 8004318:	f6c470bf f6f42627 	0xf6f42627f6c470bf
		az *= recipNorm;
 8004320:	f68470bf f6842707 	0xf6842707f68470bf
 8004328:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004330:	000070bf 10f777d3 	0x10f777d3000070bf
 8004338:	f68470bf f6f42427 	0xf6f42427f68470bf

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8004340:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8004348:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8004350:	fc8470bf fcf42427 	0xfcf42427fc8470bf
		_2q1 = 2.0f * q1;
 8004358:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8004360:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8004368:	fc4470bf fcf42227 	0xfcf42227fc4470bf
		_2q2 = 2.0f * q2;
 8004370:	1681f0bf 1681a787 	0x1681a7871681f0bf
 8004378:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8004380:	fc0470bf fcf42027 	0xfcf42027fc0470bf
		_2q3 = 2.0f * q3;
 8004388:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8004390:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8004398:	fbc470bf faf42e27 	0xfaf42e27fbc470bf
		_4q0 = 4.0f * q0;
 80043a0:	1501f0bf 1501a707 	0x1501a7071501f0bf
 80043a8:	0800c7b7          	lui	a5,0x800c
 80043ac:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 80043b4:	000070bf 10f777d3 	0x10f777d3000070bf
 80043bc:	fb8470bf faf42c27 	0xfaf42c27fb8470bf
		_4q1 = 4.0f * q1;
 80043c4:	1641f0bf 1641a707 	0x1641a7071641f0bf
 80043cc:	0800c7b7          	lui	a5,0x800c
 80043d0:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 80043d8:	000070bf 10f777d3 	0x10f777d3000070bf
 80043e0:	fb4470bf faf42a27 	0xfaf42a27fb4470bf
		_4q2 = 4.0f * q2;
 80043e8:	1681f0bf 1681a707 	0x1681a7071681f0bf
 80043f0:	0800c7b7          	lui	a5,0x800c
 80043f4:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 80043fc:	000070bf 10f777d3 	0x10f777d3000070bf
 8004404:	fb0470bf faf42827 	0xfaf42827fb0470bf
		_8q1 = 8.0f * q1;
 800440c:	1641f0bf 1641a707 	0x1641a7071641f0bf
 8004414:	0800c7b7          	lui	a5,0x800c
 8004418:	ec47f0bf ec47a787 	0xec47a787ec47f0bf
 8004420:	000070bf 10f777d3 	0x10f777d3000070bf
 8004428:	fac470bf faf42627 	0xfaf42627fac470bf
		_8q2 = 8.0f * q2;
 8004430:	1681f0bf 1681a707 	0x1681a7071681f0bf
 8004438:	0800c7b7          	lui	a5,0x800c
 800443c:	ec47f0bf ec47a787 	0xec47a787ec47f0bf
 8004444:	000070bf 10f777d3 	0x10f777d3000070bf
 800444c:	fa8470bf faf42427 	0xfaf42427fa8470bf
		q0q0 = q0 * q0;
 8004454:	1501f0bf 1501a707 	0x1501a7071501f0bf
 800445c:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8004464:	000070bf 10f777d3 	0x10f777d3000070bf
 800446c:	fa4470bf faf42227 	0xfaf42227fa4470bf
		q1q1 = q1 * q1;
 8004474:	1641f0bf 1641a707 	0x1641a7071641f0bf
 800447c:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8004484:	000070bf 10f777d3 	0x10f777d3000070bf
 800448c:	fa0470bf faf42027 	0xfaf42027fa0470bf
		q2q2 = q2 * q2;
 8004494:	1681f0bf 1681a707 	0x1681a7071681f0bf
 800449c:	1681f0bf 1681a787 	0x1681a7871681f0bf
 80044a4:	000070bf 10f777d3 	0x10f777d3000070bf
 80044ac:	f9c470bf f8f42e27 	0xf8f42e27f9c470bf
		q3q3 = q3 * q3;
 80044b4:	16c1f0bf 16c1a707 	0x16c1a70716c1f0bf
 80044bc:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 80044c4:	000070bf 10f777d3 	0x10f777d3000070bf
 80044cc:	f98470bf f8f42c27 	0xf8f42c27f98470bf

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80044d4:	fb8470bf fb842707 	0xfb842707fb8470bf
 80044dc:	f9c470bf f9c42787 	0xf9c42787f9c470bf
 80044e4:	000070bf 10f77753 	0x10f77753000070bf
 80044ec:	fc0470bf fc042687 	0xfc042687fc0470bf
 80044f4:	f70470bf f7042787 	0xf7042787f70470bf
 80044fc:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004504:	000070bf 00f77753 	0xf77753000070bf
 800450c:	fb8470bf fb842687 	0xfb842687fb8470bf
 8004514:	fa0470bf fa042787 	0xfa042787fa0470bf
 800451c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004524:	000070bf 00f77753 	0xf77753000070bf
 800452c:	fc4470bf fc442687 	0xfc442687fc4470bf
 8004534:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 800453c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004544:	000070bf 08f777d3 	0x8f777d3000070bf
 800454c:	f94470bf f8f42a27 	0xf8f42a27f94470bf
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004554:	fb4470bf fb442707 	0xfb442707fb4470bf
 800455c:	f98470bf f9842787 	0xf9842787f98470bf
 8004564:	000070bf 10f77753 	0x10f77753000070bf
 800456c:	fbc470bf fbc42687 	0xfbc42687fbc470bf
 8004574:	f70470bf f7042787 	0xf7042787f70470bf
 800457c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004584:	000070bf 08f77753 	0x8f77753000070bf
 800458c:	fa4470bf fa442687 	0xfa442687fa4470bf
 8004594:	0800c7b7          	lui	a5,0x800c
 8004598:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 80045a0:	000070bf 10f6f6d3 	0x10f6f6d3000070bf
 80045a8:	1641f0bf 1641a787 	0x1641a7871641f0bf
 80045b0:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80045b8:	000070bf 00f77753 	0xf77753000070bf
 80045c0:	fc8470bf fc842687 	0xfc842687fc8470bf
 80045c8:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 80045d0:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80045d8:	000070bf 08f77753 	0x8f77753000070bf
 80045e0:	fb4470bf fb442787 	0xfb442787fb4470bf
 80045e8:	000070bf 08f77753 	0x8f77753000070bf
 80045f0:	fac470bf fac42687 	0xfac42687fac470bf
 80045f8:	fa0470bf fa042787 	0xfa042787fa0470bf
 8004600:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004608:	000070bf 00f77753 	0xf77753000070bf
 8004610:	fac470bf fac42687 	0xfac42687fac470bf
 8004618:	f9c470bf f9c42787 	0xf9c42787f9c470bf
 8004620:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004628:	000070bf 00f77753 	0xf77753000070bf
 8004630:	fb4470bf fb442687 	0xfb442687fb4470bf
 8004638:	f68470bf f6842787 	0xf6842787f68470bf
 8004640:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004648:	000070bf 00f777d3 	0xf777d3000070bf
 8004650:	f90470bf f8f42827 	0xf8f42827f90470bf
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004658:	fa4470bf fa442707 	0xfa442707fa4470bf
 8004660:	0800c7b7          	lui	a5,0x800c
 8004664:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 800466c:	000070bf 10f77753 	0x10f77753000070bf
 8004674:	1681f0bf 1681a787 	0x1681a7871681f0bf
 800467c:	000070bf 10f77753 	0x10f77753000070bf
 8004684:	fc8470bf fc842687 	0xfc842687fc8470bf
 800468c:	f70470bf f7042787 	0xf7042787f70470bf
 8004694:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800469c:	000070bf 00f77753 	0xf77753000070bf
 80046a4:	fb0470bf fb042687 	0xfb042687fb0470bf
 80046ac:	f98470bf f9842787 	0xf9842787f98470bf
 80046b4:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80046bc:	000070bf 00f77753 	0xf77753000070bf
 80046c4:	fbc470bf fbc42687 	0xfbc42687fbc470bf
 80046cc:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 80046d4:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80046dc:	000070bf 08f77753 	0x8f77753000070bf
 80046e4:	fb0470bf fb042787 	0xfb042787fb0470bf
 80046ec:	000070bf 08f77753 	0x8f77753000070bf
 80046f4:	fa8470bf fa842687 	0xfa842687fa8470bf
 80046fc:	fa0470bf fa042787 	0xfa042787fa0470bf
 8004704:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800470c:	000070bf 00f77753 	0xf77753000070bf
 8004714:	fa8470bf fa842687 	0xfa842687fa8470bf
 800471c:	f9c470bf f9c42787 	0xf9c42787f9c470bf
 8004724:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800472c:	000070bf 00f77753 	0xf77753000070bf
 8004734:	fb0470bf fb042687 	0xfb042687fb0470bf
 800473c:	f68470bf f6842787 	0xf6842787f68470bf
 8004744:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800474c:	000070bf 00f777d3 	0xf777d3000070bf
 8004754:	f8c470bf f8f42627 	0xf8f42627f8c470bf
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800475c:	fa0470bf fa042707 	0xfa042707fa0470bf
 8004764:	0800c7b7          	lui	a5,0x800c
 8004768:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 8004770:	000070bf 10f77753 	0x10f77753000070bf
 8004778:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8004780:	000070bf 10f77753 	0x10f77753000070bf
 8004788:	fc4470bf fc442687 	0xfc442687fc4470bf
 8004790:	f70470bf f7042787 	0xf7042787f70470bf
 8004798:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80047a0:	000070bf 08f77753 	0x8f77753000070bf
 80047a8:	f9c470bf f9c42687 	0xf9c42687f9c470bf
 80047b0:	0800c7b7          	lui	a5,0x800c
 80047b4:	ec07f0bf ec07a787 	0xec07a787ec07f0bf
 80047bc:	000070bf 10f6f6d3 	0x10f6f6d3000070bf
 80047c4:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 80047cc:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80047d4:	000070bf 00f77753 	0xf77753000070bf
 80047dc:	fc0470bf fc042687 	0xfc042687fc0470bf
 80047e4:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 80047ec:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80047f4:	000070bf 08f777d3 	0x8f777d3000070bf
 80047fc:	f88470bf f8f42427 	0xf8f42427f88470bf
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004804:	f94470bf f9442707 	0xf9442707f94470bf
 800480c:	f94470bf f9442787 	0xf9442787f94470bf
 8004814:	000070bf 10f77753 	0x10f77753000070bf
 800481c:	f90470bf f9042687 	0xf9042687f90470bf
 8004824:	f90470bf f9042787 	0xf9042787f90470bf
 800482c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004834:	000070bf 00f77753 	0xf77753000070bf
 800483c:	f8c470bf f8c42687 	0xf8c42687f8c470bf
 8004844:	f8c470bf f8c42787 	0xf8c42787f8c470bf
 800484c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004854:	000070bf 00f77753 	0xf77753000070bf
 800485c:	f88470bf f8842687 	0xf8842687f88470bf
 8004864:	f88470bf f8842787 	0xf8842787f88470bf
 800486c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004874:	000070bf 00f777d3 	0xf777d3000070bf
 800487c:	000070bf 20f78553 	0x20f78553000070bf
 8004884:	4a8000ef          	jal	ra,8004d2c <invSqrt>
 8004888:	fcc470bf fca42627 	0xfca42627fcc470bf
		s0 *= recipNorm;
 8004890:	f94470bf f9442707 	0xf9442707f94470bf
 8004898:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 80048a0:	000070bf 10f777d3 	0x10f777d3000070bf
 80048a8:	f94470bf f8f42a27 	0xf8f42a27f94470bf
		s1 *= recipNorm;
 80048b0:	f90470bf f9042707 	0xf9042707f90470bf
 80048b8:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 80048c0:	000070bf 10f777d3 	0x10f777d3000070bf
 80048c8:	f90470bf f8f42827 	0xf8f42827f90470bf
		s2 *= recipNorm;
 80048d0:	f8c470bf f8c42707 	0xf8c42707f8c470bf
 80048d8:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 80048e0:	000070bf 10f777d3 	0x10f777d3000070bf
 80048e8:	f8c470bf f8f42627 	0xf8f42627f8c470bf
		s3 *= recipNorm;
 80048f0:	f88470bf f8842707 	0xf8842707f88470bf
 80048f8:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004900:	000070bf 10f777d3 	0x10f777d3000070bf
 8004908:	f88470bf f8f42427 	0xf8f42427f88470bf
		printf("uncert %f pm %f\n", recipNorm, unf_var(recipNorm));
 8004910:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004918:	42078453          	fcvt.d.s	fs0,fa5
 800491c:	fcc470bf fcc42507 	0xfcc42507fcc470bf
 8004924:	7a1000ef          	jal	ra,80058c4 <unf_var>
 8004928:	000070bf 20a507d3 	0x20a507d3000070bf
 8004930:	420787d3          	fcvt.d.s	fa5,fa5
 8004934:	f6f43027          	fsd	fa5,-160(s0)
 8004938:	f6042703          	lw	a4,-160(s0)
 800493c:	f6442783          	lw	a5,-156(s0)
 8004940:	f6843027          	fsd	fs0,-160(s0)
 8004944:	f6042603          	lw	a2,-160(s0)
 8004948:	f6442683          	lw	a3,-156(s0)
 800494c:	0800c5b7          	lui	a1,0x800c
 8004950:	ea858513          	addi	a0,a1,-344 # 800bea8 <nan+0xc>
 8004954:	2b0030ef          	jal	ra,8007c04 <printf_>
		printf("uncert %f pm %f\n", s0, unf_var(s0));
 8004958:	f94470bf f9442787 	0xf9442787f94470bf
 8004960:	42078453          	fcvt.d.s	fs0,fa5
 8004964:	f94470bf f9442507 	0xf9442507f94470bf
 800496c:	759000ef          	jal	ra,80058c4 <unf_var>
 8004970:	000070bf 20a507d3 	0x20a507d3000070bf
 8004978:	420787d3          	fcvt.d.s	fa5,fa5
 800497c:	f6f43027          	fsd	fa5,-160(s0)
 8004980:	f6042703          	lw	a4,-160(s0)
 8004984:	f6442783          	lw	a5,-156(s0)
 8004988:	f6843027          	fsd	fs0,-160(s0)
 800498c:	f6042603          	lw	a2,-160(s0)
 8004990:	f6442683          	lw	a3,-156(s0)
 8004994:	0800c5b7          	lui	a1,0x800c
 8004998:	ea858513          	addi	a0,a1,-344 # 800bea8 <nan+0xc>
 800499c:	268030ef          	jal	ra,8007c04 <printf_>
		printf("uncert %f pm %f\n", s1, unf_var(s1));
 80049a0:	f90470bf f9042787 	0xf9042787f90470bf
 80049a8:	42078453          	fcvt.d.s	fs0,fa5
 80049ac:	f90470bf f9042507 	0xf9042507f90470bf
 80049b4:	711000ef          	jal	ra,80058c4 <unf_var>
 80049b8:	000070bf 20a507d3 	0x20a507d3000070bf
 80049c0:	420787d3          	fcvt.d.s	fa5,fa5
 80049c4:	f6f43027          	fsd	fa5,-160(s0)
 80049c8:	f6042703          	lw	a4,-160(s0)
 80049cc:	f6442783          	lw	a5,-156(s0)
 80049d0:	f6843027          	fsd	fs0,-160(s0)
 80049d4:	f6042603          	lw	a2,-160(s0)
 80049d8:	f6442683          	lw	a3,-156(s0)
 80049dc:	0800c5b7          	lui	a1,0x800c
 80049e0:	ea858513          	addi	a0,a1,-344 # 800bea8 <nan+0xc>
 80049e4:	220030ef          	jal	ra,8007c04 <printf_>
		printf("uncert %f pm %f\n", s2, unf_var(s2));
 80049e8:	f8c470bf f8c42787 	0xf8c42787f8c470bf
 80049f0:	42078453          	fcvt.d.s	fs0,fa5
 80049f4:	f8c470bf f8c42507 	0xf8c42507f8c470bf
 80049fc:	6c9000ef          	jal	ra,80058c4 <unf_var>
 8004a00:	000070bf 20a507d3 	0x20a507d3000070bf
 8004a08:	420787d3          	fcvt.d.s	fa5,fa5
 8004a0c:	f6f43027          	fsd	fa5,-160(s0)
 8004a10:	f6042703          	lw	a4,-160(s0)
 8004a14:	f6442783          	lw	a5,-156(s0)
 8004a18:	f6843027          	fsd	fs0,-160(s0)
 8004a1c:	f6042603          	lw	a2,-160(s0)
 8004a20:	f6442683          	lw	a3,-156(s0)
 8004a24:	0800c5b7          	lui	a1,0x800c
 8004a28:	ea858513          	addi	a0,a1,-344 # 800bea8 <nan+0xc>
 8004a2c:	1d8030ef          	jal	ra,8007c04 <printf_>
		printf("uncert %f pm %f\n", s3, unf_var(s3));
 8004a30:	f88470bf f8842787 	0xf8842787f88470bf
 8004a38:	42078453          	fcvt.d.s	fs0,fa5
 8004a3c:	f88470bf f8842507 	0xf8842507f88470bf
 8004a44:	681000ef          	jal	ra,80058c4 <unf_var>
 8004a48:	000070bf 20a507d3 	0x20a507d3000070bf
 8004a50:	420787d3          	fcvt.d.s	fa5,fa5
 8004a54:	f6f43027          	fsd	fa5,-160(s0)
 8004a58:	f6042703          	lw	a4,-160(s0)
 8004a5c:	f6442783          	lw	a5,-156(s0)
 8004a60:	f6843027          	fsd	fs0,-160(s0)
 8004a64:	f6042603          	lw	a2,-160(s0)
 8004a68:	f6442683          	lw	a3,-156(s0)
 8004a6c:	0800c5b7          	lui	a1,0x800c
 8004a70:	ea858513          	addi	a0,a1,-344 # 800bea8 <nan+0xc>
 8004a74:	190030ef          	jal	ra,8007c04 <printf_>

		// Apply feedback step
		qDot1 -= beta * s0;
 8004a78:	14c1f0bf 14c1a707 	0x14c1a70714c1f0bf
 8004a80:	f94470bf f9442787 	0xf9442787f94470bf
 8004a88:	000070bf 10f777d3 	0x10f777d3000070bf
 8004a90:	fdc470bf fdc42707 	0xfdc42707fdc470bf
 8004a98:	000070bf 08f777d3 	0x8f777d3000070bf
 8004aa0:	fdc470bf fcf42e27 	0xfcf42e27fdc470bf
		qDot2 -= beta * s1;
 8004aa8:	14c1f0bf 14c1a707 	0x14c1a70714c1f0bf
 8004ab0:	f90470bf f9042787 	0xf9042787f90470bf
 8004ab8:	000070bf 10f777d3 	0x10f777d3000070bf
 8004ac0:	fd8470bf fd842707 	0xfd842707fd8470bf
 8004ac8:	000070bf 08f777d3 	0x8f777d3000070bf
 8004ad0:	fd8470bf fcf42c27 	0xfcf42c27fd8470bf
		qDot3 -= beta * s2;
 8004ad8:	14c1f0bf 14c1a707 	0x14c1a70714c1f0bf
 8004ae0:	f8c470bf f8c42787 	0xf8c42787f8c470bf
 8004ae8:	000070bf 10f777d3 	0x10f777d3000070bf
 8004af0:	fd4470bf fd442707 	0xfd442707fd4470bf
 8004af8:	000070bf 08f777d3 	0x8f777d3000070bf
 8004b00:	fd4470bf fcf42a27 	0xfcf42a27fd4470bf
		qDot4 -= beta * s3;
 8004b08:	14c1f0bf 14c1a707 	0x14c1a70714c1f0bf
 8004b10:	f88470bf f8842787 	0xf8842787f88470bf
 8004b18:	000070bf 10f777d3 	0x10f777d3000070bf
 8004b20:	fd0470bf fd042707 	0xfd042707fd0470bf
 8004b28:	000070bf 08f777d3 	0x8f777d3000070bf
 8004b30:	fd0470bf fcf42827 	0xfcf42827fd0470bf
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8004b38:	fdc470bf fdc42707 	0xfdc42707fdc470bf
 8004b40:	0800c7b7          	lui	a5,0x800c
 8004b44:	ec87f0bf ec87a787 	0xec87a787ec87f0bf
 8004b4c:	000070bf 10f77753 	0x10f77753000070bf
 8004b54:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8004b5c:	000070bf 00f777d3 	0xf777d3000070bf
 8004b64:	1501f0bf 14f1a827 	0x14f1a8271501f0bf
	q1 += qDot2 * (1.0f / sampleFreq);
 8004b6c:	fd8470bf fd842707 	0xfd842707fd8470bf
 8004b74:	0800c7b7          	lui	a5,0x800c
 8004b78:	ec87f0bf ec87a787 	0xec87a787ec87f0bf
 8004b80:	000070bf 10f77753 	0x10f77753000070bf
 8004b88:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8004b90:	000070bf 00f777d3 	0xf777d3000070bf
 8004b98:	1641f0bf 16f1a227 	0x16f1a2271641f0bf
	q2 += qDot3 * (1.0f / sampleFreq);
 8004ba0:	fd4470bf fd442707 	0xfd442707fd4470bf
 8004ba8:	0800c7b7          	lui	a5,0x800c
 8004bac:	ec87f0bf ec87a787 	0xec87a787ec87f0bf
 8004bb4:	000070bf 10f77753 	0x10f77753000070bf
 8004bbc:	1681f0bf 1681a787 	0x1681a7871681f0bf
 8004bc4:	000070bf 00f777d3 	0xf777d3000070bf
 8004bcc:	1681f0bf 16f1a427 	0x16f1a4271681f0bf
	q3 += qDot4 * (1.0f / sampleFreq);
 8004bd4:	fd0470bf fd042707 	0xfd042707fd0470bf
 8004bdc:	0800c7b7          	lui	a5,0x800c
 8004be0:	ec87f0bf ec87a787 	0xec87a787ec87f0bf
 8004be8:	000070bf 10f77753 	0x10f77753000070bf
 8004bf0:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8004bf8:	000070bf 00f777d3 	0xf777d3000070bf
 8004c00:	16c1f0bf 16f1a627 	0x16f1a62716c1f0bf

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004c08:	1501f0bf 1501a707 	0x1501a7071501f0bf
 8004c10:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8004c18:	000070bf 10f77753 	0x10f77753000070bf
 8004c20:	1641f0bf 1641a687 	0x1641a6871641f0bf
 8004c28:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8004c30:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004c38:	000070bf 00f77753 	0xf77753000070bf
 8004c40:	1681f0bf 1681a687 	0x1681a6871681f0bf
 8004c48:	1681f0bf 1681a787 	0x1681a7871681f0bf
 8004c50:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004c58:	000070bf 00f77753 	0xf77753000070bf
 8004c60:	16c1f0bf 16c1a687 	0x16c1a68716c1f0bf
 8004c68:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8004c70:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8004c78:	000070bf 00f777d3 	0xf777d3000070bf
 8004c80:	000070bf 20f78553 	0x20f78553000070bf
 8004c88:	0a4000ef          	jal	ra,8004d2c <invSqrt>
 8004c8c:	fcc470bf fca42627 	0xfca42627fcc470bf
	q0 *= recipNorm;
 8004c94:	1501f0bf 1501a707 	0x1501a7071501f0bf
 8004c9c:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004ca4:	000070bf 10f777d3 	0x10f777d3000070bf
 8004cac:	1501f0bf 14f1a827 	0x14f1a8271501f0bf
	q1 *= recipNorm;
 8004cb4:	1641f0bf 1641a707 	0x1641a7071641f0bf
 8004cbc:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004cc4:	000070bf 10f777d3 	0x10f777d3000070bf
 8004ccc:	1641f0bf 16f1a227 	0x16f1a2271641f0bf
	q2 *= recipNorm;
 8004cd4:	1681f0bf 1681a707 	0x1681a7071681f0bf
 8004cdc:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004ce4:	000070bf 10f777d3 	0x10f777d3000070bf
 8004cec:	1681f0bf 16f1a427 	0x16f1a4271681f0bf
	q3 *= recipNorm;
 8004cf4:	16c1f0bf 16c1a707 	0x16c1a70716c1f0bf
 8004cfc:	fcc470bf fcc42787 	0xfcc42787fcc470bf
 8004d04:	000070bf 10f777d3 	0x10f777d3000070bf
 8004d0c:	16c1f0bf 16f1a627 	0x16f1a62716c1f0bf
}
 8004d14:	00000013          	nop
 8004d18:	09c12083          	lw	ra,156(sp)
 8004d1c:	09812403          	lw	s0,152(sp)
 8004d20:	08813407          	fld	fs0,136(sp)
 8004d24:	0a010113          	addi	sp,sp,160
 8004d28:	00008067          	ret

08004d2c <invSqrt>:
//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root


float invSqrt(float x) {
 8004d2c:	fd010113          	addi	sp,sp,-48
 8004d30:	02112623          	sw	ra,44(sp)
 8004d34:	02812423          	sw	s0,40(sp)
 8004d38:	03010413          	addi	s0,sp,48
 8004d3c:	fdc470bf fca42e27 	0xfca42e27fdc470bf
	float ans = 1 / _sqrt(x);
 8004d44:	fdc470bf fdc42507 	0xfdc42507fdc470bf
 8004d4c:	399000ef          	jal	ra,80058e4 <sqrtunf>
 8004d50:	000070bf 20a50753 	0x20a50753000070bf
 8004d58:	0800c7b7          	lui	a5,0x800c
 8004d5c:	ecc7f0bf ecc7a787 	0xecc7a787ecc7f0bf
 8004d64:	000070bf 18e7f7d3 	0x18e7f7d3000070bf
 8004d6c:	fec470bf fef42627 	0xfef42627fec470bf
	return ans;
 8004d74:	fec470bf fec42787 	0xfec42787fec470bf
}
 8004d7c:	000070bf 20f78553 	0x20f78553000070bf
 8004d84:	02c12083          	lw	ra,44(sp)
 8004d88:	02812403          	lw	s0,40(sp)
 8004d8c:	03010113          	addi	sp,sp,48
 8004d90:	00008067          	ret

08004d94 <main>:
#endif

void getEulerAngle(float q0, float q1, float q2, float q3, float *roll, float *pitch, float *yaw);

int main()
{
 8004d94:	ef010113          	addi	sp,sp,-272
 8004d98:	10112623          	sw	ra,268(sp)
 8004d9c:	10812423          	sw	s0,264(sp)
 8004da0:	0e813c27          	fsd	fs0,248(sp)
 8004da4:	0e913827          	fsd	fs1,240(sp)
 8004da8:	0f213427          	fsd	fs2,232(sp)
 8004dac:	0f313027          	fsd	fs3,224(sp)
 8004db0:	0d413c27          	fsd	fs4,216(sp)
 8004db4:	0d513827          	fsd	fs5,208(sp)
 8004db8:	0d613427          	fsd	fs6,200(sp)
 8004dbc:	0d713027          	fsd	fs7,192(sp)
 8004dc0:	0b813c27          	fsd	fs8,184(sp)
 8004dc4:	0b913827          	fsd	fs9,176(sp)
 8004dc8:	0ba13427          	fsd	fs10,168(sp)
 8004dcc:	11010413          	addi	s0,sp,272
    float pi = acos(-1.0);
 8004dd0:	0800c7b7          	lui	a5,0x800c
 8004dd4:	0107f0bf 0107a787 	0x107a7870107f0bf
 8004ddc:	f88470bf f8f42427 	0xf8f42427f88470bf
    float oneDegree = pi / 180;
 8004de4:	f88470bf f8842707 	0xf8842707f88470bf
 8004dec:	0800c7b7          	lui	a5,0x800c
 8004df0:	0147f0bf 0147a787 	0x147a7870147f0bf
 8004df8:	000070bf 18f777d3 	0x18f777d3000070bf
 8004e00:	f84470bf f8f42227 	0xf8f42227f84470bf

    q0 = unf_create(0.0f, 0);
 8004e08:	f00005d3          	fmv.s.x	fa1,zero
 8004e0c:	f0000553          	fmv.s.x	fa0,zero
 8004e10:	2c5000ef          	jal	ra,80058d4 <unf_create>
 8004e14:	000070bf 20a507d3 	0x20a507d3000070bf
 8004e1c:	1501f0bf 14f1a827 	0x14f1a8271501f0bf
    q1 = unf_create(1.0f, 0);
 8004e24:	0800c7b7          	lui	a5,0x800c
 8004e28:	0187f0bf 0187a787 	0x187a7870187f0bf
 8004e30:	f00005d3          	fmv.s.x	fa1,zero
 8004e34:	000070bf 20f78553 	0x20f78553000070bf
 8004e3c:	299000ef          	jal	ra,80058d4 <unf_create>
 8004e40:	000070bf 20a507d3 	0x20a507d3000070bf
 8004e48:	1641f0bf 16f1a227 	0x16f1a2271641f0bf
    q2 = unf_create(0.0f, 0);
 8004e50:	f00005d3          	fmv.s.x	fa1,zero
 8004e54:	f0000553          	fmv.s.x	fa0,zero
 8004e58:	27d000ef          	jal	ra,80058d4 <unf_create>
 8004e5c:	000070bf 20a507d3 	0x20a507d3000070bf
 8004e64:	1681f0bf 16f1a427 	0x16f1a4271681f0bf
    q3 = unf_create(0.0f, 0);
 8004e6c:	f00005d3          	fmv.s.x	fa1,zero
 8004e70:	f0000553          	fmv.s.x	fa0,zero
 8004e74:	261000ef          	jal	ra,80058d4 <unf_create>
 8004e78:	000070bf 20a507d3 	0x20a507d3000070bf
 8004e80:	16c1f0bf 16f1a627 	0x16f1a62716c1f0bf

    printf("\n");
 8004e88:	0800c7b7          	lui	a5,0x800c
 8004e8c:	ed078513          	addi	a0,a5,-304 # 800bed0 <nan+0x34>
 8004e90:	575020ef          	jal	ra,8007c04 <printf_>

    float timeStep = 1 / 512.0f;
 8004e94:	0800c7b7          	lui	a5,0x800c
 8004e98:	01c7f0bf 01c7a787 	0x1c7a78701c7f0bf
 8004ea0:	f80470bf f8f42027 	0xf8f42027f80470bf
    float rollRate = 45.0f * oneDegree;
 8004ea8:	f84470bf f8442707 	0xf8442707f84470bf
 8004eb0:	0800c7b7          	lui	a5,0x800c
 8004eb4:	0207f0bf 0207a787 	0x207a7870207f0bf
 8004ebc:	000070bf 10f777d3 	0x10f777d3000070bf
 8004ec4:	f7c470bf f6f42e27 	0xf6f42e27f7c470bf
    int i = 0;
 8004ecc:	f8042623          	sw	zero,-116(s0)
    // get_covar(samples[i].Gyro_X, samples[i].Gyro_X);

    while(1) {
        float targetRoll = timeStep * i * rollRate;
 8004ed0:	f8c42783          	lw	a5,-116(s0)
 8004ed4:	d007f753          	fcvt.s.w	fa4,a5
 8004ed8:	f80470bf f8042787 	0xf8042787f80470bf
 8004ee0:	000070bf 10f777d3 	0x10f777d3000070bf
 8004ee8:	f7c470bf f7c42707 	0xf7c42707f7c470bf
 8004ef0:	000070bf 10f777d3 	0x10f777d3000070bf
 8004ef8:	f78470bf f6f42c27 	0xf6f42c27f78470bf
        approximate_float ax = unf_create(1e-8, 0);
 8004f00:	0800c7b7          	lui	a5,0x800c
 8004f04:	0247f0bf 0247a787 	0x247a7870247f0bf
 8004f0c:	f00005d3          	fmv.s.x	fa1,zero
 8004f10:	000070bf 20f78553 	0x20f78553000070bf
 8004f18:	1bd000ef          	jal	ra,80058d4 <unf_create>
 8004f1c:	f74470bf f6a42a27 	0xf6a42a27f74470bf
        approximate_float ay = unf_create(-10 * sinf(targetRoll), 1e-8);
 8004f24:	f78470bf f7842507 	0xf7842507f78470bf
 8004f2c:	4dc050ef          	jal	ra,800a408 <sinf>
 8004f30:	000070bf 20a50753 	0x20a50753000070bf
 8004f38:	0800c7b7          	lui	a5,0x800c
 8004f3c:	0287f0bf 0287a787 	0x287a7870287f0bf
 8004f44:	000070bf 10f777d3 	0x10f777d3000070bf
 8004f4c:	0800c7b7          	lui	a5,0x800c
 8004f50:	0247f0bf 0247a707 	0x247a7070247f0bf
 8004f58:	000070bf 20e705d3 	0x20e705d3000070bf
 8004f60:	000070bf 20f78553 	0x20f78553000070bf
 8004f68:	16d000ef          	jal	ra,80058d4 <unf_create>
 8004f6c:	f70470bf f6a42827 	0xf6a42827f70470bf
        approximate_float az = unf_create(-10 * cosf(targetRoll), 1e-8);
 8004f74:	f78470bf f7842507 	0xf7842507f78470bf
 8004f7c:	3dc050ef          	jal	ra,800a358 <cosf>
 8004f80:	000070bf 20a50753 	0x20a50753000070bf
 8004f88:	0800c7b7          	lui	a5,0x800c
 8004f8c:	0287f0bf 0287a787 	0x287a7870287f0bf
 8004f94:	000070bf 10f777d3 	0x10f777d3000070bf
 8004f9c:	0800c7b7          	lui	a5,0x800c
 8004fa0:	0247f0bf 0247a707 	0x247a7070247f0bf
 8004fa8:	000070bf 20e705d3 	0x20e705d3000070bf
 8004fb0:	000070bf 20f78553 	0x20f78553000070bf
 8004fb8:	11d000ef          	jal	ra,80058d4 <unf_create>
 8004fbc:	f6c470bf f6a42627 	0xf6a42627f6c470bf

        approximate_float gx = unf_create(rollRate, rollRate * rollRate * 1e-4);
 8004fc4:	f7c470bf f7c42707 	0xf7c42707f7c470bf
 8004fcc:	f7c470bf f7c42787 	0xf7c42787f7c470bf
 8004fd4:	000070bf 10f777d3 	0x10f777d3000070bf
 8004fdc:	42078753          	fcvt.d.s	fa4,fa5
 8004fe0:	0800c7b7          	lui	a5,0x800c
 8004fe4:	0307b787          	fld	fa5,48(a5) # 800c030 <nan+0x194>
 8004fe8:	12f777d3          	fmul.d	fa5,fa4,fa5
 8004fec:	4017f7d3          	fcvt.s.d	fa5,fa5
 8004ff0:	000070bf 20f785d3 	0x20f785d3000070bf
 8004ff8:	f7c470bf f7c42507 	0xf7c42507f7c470bf
 8005000:	0d5000ef          	jal	ra,80058d4 <unf_create>
 8005004:	f68470bf f6a42427 	0xf6a42427f68470bf
        approximate_float gy = unf_create(0, 0);
 800500c:	f00005d3          	fmv.s.x	fa1,zero
 8005010:	f0000553          	fmv.s.x	fa0,zero
 8005014:	0c1000ef          	jal	ra,80058d4 <unf_create>
 8005018:	f64470bf f6a42227 	0xf6a42227f64470bf
        approximate_float gz = unf_create(0, 0);
 8005020:	f00005d3          	fmv.s.x	fa1,zero
 8005024:	f0000553          	fmv.s.x	fa0,zero
 8005028:	0ad000ef          	jal	ra,80058d4 <unf_create>
 800502c:	f60470bf f6a42027 	0xf6a42027f60470bf

        // printf("q0: %f\n", gy);

        MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8005034:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 800503c:	f70470bf f7042707 	0xf7042707f70470bf
 8005044:	f74470bf f7442687 	0xf7442687f74470bf
 800504c:	f60470bf f6042607 	0xf6042607f60470bf
 8005054:	f64470bf f6442587 	0xf6442587f64470bf
 800505c:	f68470bf f6842507 	0xf6842507f68470bf
 8005064:	fb9fe0ef          	jal	ra,800401c <MadgwickAHRSupdateIMU>

        float roll = 0, pitch = 0, yaw = 0;
 8005068:	f4042e23          	sw	zero,-164(s0)
 800506c:	f4042c23          	sw	zero,-168(s0)
 8005070:	f4042a23          	sw	zero,-172(s0)
        getEulerAngle(q0, q1, q2, q3, &roll, &pitch, &yaw);
 8005074:	1501f0bf 1501a787 	0x1501a7871501f0bf
 800507c:	1641f0bf 1641a707 	0x1641a7071641f0bf
 8005084:	1681f0bf 1681a607 	0x1681a6071681f0bf
 800508c:	16c1f0bf 16c1a687 	0x16c1a68716c1f0bf
 8005094:	f5440693          	addi	a3,s0,-172
 8005098:	f5840713          	addi	a4,s0,-168
 800509c:	f5c40793          	addi	a5,s0,-164
 80050a0:	00068613          	mv	a2,a3
 80050a4:	00070593          	mv	a1,a4
 80050a8:	00078513          	mv	a0,a5
 80050ac:	000070bf 20e705d3 	0x20e705d3000070bf
 80050b4:	000070bf 20f78553 	0x20f78553000070bf
 80050bc:	534000ef          	jal	ra,80055f0 <getEulerAngle>
        printf("Sample: %-5d ", i);
 80050c0:	f8c42583          	lw	a1,-116(s0)
 80050c4:	0800c7b7          	lui	a5,0x800c
 80050c8:	ed478513          	addi	a0,a5,-300 # 800bed4 <nan+0x38>
 80050cc:	339020ef          	jal	ra,8007c04 <printf_>
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80050d0:	f74470bf f7442787 	0xf7442787f74470bf
 80050d8:	42078c53          	fcvt.d.s	fs8,fa5
               ax, sqrtf(unf_var(ax)), ay, sqrtf(unf_var(ay)), az, sqrtf(unf_var(az)),
 80050dc:	f74470bf f7442507 	0xf7442507f74470bf
 80050e4:	7e0000ef          	jal	ra,80058c4 <unf_var>
 80050e8:	000070bf 20a507d3 	0x20a507d3000070bf
 80050f0:	000070bf 20f78553 	0x20f78553000070bf
 80050f8:	4c8050ef          	jal	ra,800a5c0 <sqrtf>
 80050fc:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005104:	42078cd3          	fcvt.d.s	fs9,fa5
 8005108:	f70470bf f7042787 	0xf7042787f70470bf
 8005110:	42078d53          	fcvt.d.s	fs10,fa5
               ax, sqrtf(unf_var(ax)), ay, sqrtf(unf_var(ay)), az, sqrtf(unf_var(az)),
 8005114:	f70470bf f7042507 	0xf7042507f70470bf
 800511c:	7a8000ef          	jal	ra,80058c4 <unf_var>
 8005120:	000070bf 20a507d3 	0x20a507d3000070bf
 8005128:	000070bf 20f78553 	0x20f78553000070bf
 8005130:	490050ef          	jal	ra,800a5c0 <sqrtf>
 8005134:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 800513c:	42078453          	fcvt.d.s	fs0,fa5
 8005140:	f6c470bf f6c42787 	0xf6c42787f6c470bf
 8005148:	420784d3          	fcvt.d.s	fs1,fa5
               ax, sqrtf(unf_var(ax)), ay, sqrtf(unf_var(ay)), az, sqrtf(unf_var(az)),
 800514c:	f6c470bf f6c42507 	0xf6c42507f6c470bf
 8005154:	770000ef          	jal	ra,80058c4 <unf_var>
 8005158:	000070bf 20a507d3 	0x20a507d3000070bf
 8005160:	000070bf 20f78553 	0x20f78553000070bf
 8005168:	458050ef          	jal	ra,800a5c0 <sqrtf>
 800516c:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005174:	42078953          	fcvt.d.s	fs2,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 8005178:	f68470bf f6842707 	0xf6842707f68470bf
 8005180:	f84470bf f8442787 	0xf8442787f84470bf
 8005188:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005190:	420789d3          	fcvt.d.s	fs3,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 8005194:	f68470bf f6842507 	0xf6842507f68470bf
 800519c:	728000ef          	jal	ra,80058c4 <unf_var>
 80051a0:	000070bf 20a507d3 	0x20a507d3000070bf
 80051a8:	000070bf 20f78553 	0x20f78553000070bf
 80051b0:	410050ef          	jal	ra,800a5c0 <sqrtf>
 80051b4:	000070bf 20a50753 	0x20a50753000070bf
 80051bc:	f84470bf f8442787 	0xf8442787f84470bf
 80051c4:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80051cc:	42078a53          	fcvt.d.s	fs4,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 80051d0:	f64470bf f6442707 	0xf6442707f64470bf
 80051d8:	f84470bf f8442787 	0xf8442787f84470bf
 80051e0:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80051e8:	42078ad3          	fcvt.d.s	fs5,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 80051ec:	f64470bf f6442507 	0xf6442507f64470bf
 80051f4:	6d0000ef          	jal	ra,80058c4 <unf_var>
 80051f8:	000070bf 20a507d3 	0x20a507d3000070bf
 8005200:	000070bf 20f78553 	0x20f78553000070bf
 8005208:	3b8050ef          	jal	ra,800a5c0 <sqrtf>
 800520c:	000070bf 20a50753 	0x20a50753000070bf
 8005214:	f84470bf f8442787 	0xf8442787f84470bf
 800521c:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005224:	42078b53          	fcvt.d.s	fs6,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 8005228:	f60470bf f6042707 	0xf6042707f60470bf
 8005230:	f84470bf f8442787 	0xf8442787f84470bf
 8005238:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005240:	42078bd3          	fcvt.d.s	fs7,fa5
               gx/oneDegree, sqrtf(unf_var(gx))/oneDegree, gy/oneDegree, sqrtf(unf_var(gy))/oneDegree, gz/oneDegree, sqrtf(unf_var(gz))/oneDegree
 8005244:	f60470bf f6042507 	0xf6042507f60470bf
 800524c:	678000ef          	jal	ra,80058c4 <unf_var>
 8005250:	000070bf 20a507d3 	0x20a507d3000070bf
 8005258:	000070bf 20f78553 	0x20f78553000070bf
 8005260:	360050ef          	jal	ra,800a5c0 <sqrtf>
 8005264:	000070bf 20a50753 	0x20a50753000070bf
 800526c:	f84470bf f8442787 	0xf8442787f84470bf
 8005274:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("acc: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f), gyr: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 800527c:	420787d3          	fcvt.d.s	fa5,fa5
 8005280:	04f13027          	fsd	fa5,64(sp)
 8005284:	03713c27          	fsd	fs7,56(sp)
 8005288:	03613827          	fsd	fs6,48(sp)
 800528c:	03513427          	fsd	fs5,40(sp)
 8005290:	03413027          	fsd	fs4,32(sp)
 8005294:	01313c27          	fsd	fs3,24(sp)
 8005298:	01213827          	fsd	fs2,16(sp)
 800529c:	00913427          	fsd	fs1,8(sp)
 80052a0:	00813027          	fsd	fs0,0(sp)
 80052a4:	f5a43427          	fsd	fs10,-184(s0)
 80052a8:	f4842803          	lw	a6,-184(s0)
 80052ac:	f4c42883          	lw	a7,-180(s0)
 80052b0:	f5943427          	fsd	fs9,-184(s0)
 80052b4:	f4842703          	lw	a4,-184(s0)
 80052b8:	f4c42783          	lw	a5,-180(s0)
 80052bc:	f5843427          	fsd	fs8,-184(s0)
 80052c0:	f4842603          	lw	a2,-184(s0)
 80052c4:	f4c42683          	lw	a3,-180(s0)
 80052c8:	0800c5b7          	lui	a1,0x800c
 80052cc:	ee458513          	addi	a0,a1,-284 # 800bee4 <nan+0x48>
 80052d0:	135020ef          	jal	ra,8007c04 <printf_>
               );
        printf("\n              ");
 80052d4:	0800c7b7          	lui	a5,0x800c
 80052d8:	f6478513          	addi	a0,a5,-156 # 800bf64 <nan+0xc8>
 80052dc:	129020ef          	jal	ra,8007c04 <printf_>
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
               roll/oneDegree, sqrtf(unf_var(roll))/oneDegree,
 80052e0:	f5c470bf f5c42707 	0xf5c42707f5c470bf
 80052e8:	f84470bf f8442787 	0xf8442787f84470bf
 80052f0:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80052f8:	42078953          	fcvt.d.s	fs2,fa5
               roll/oneDegree, sqrtf(unf_var(roll))/oneDegree,
 80052fc:	f5c470bf f5c42787 	0xf5c42787f5c470bf
 8005304:	000070bf 20f78553 	0x20f78553000070bf
 800530c:	5b8000ef          	jal	ra,80058c4 <unf_var>
 8005310:	000070bf 20a507d3 	0x20a507d3000070bf
 8005318:	000070bf 20f78553 	0x20f78553000070bf
 8005320:	2a0050ef          	jal	ra,800a5c0 <sqrtf>
 8005324:	000070bf 20a50753 	0x20a50753000070bf
 800532c:	f84470bf f8442787 	0xf8442787f84470bf
 8005334:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 800533c:	420789d3          	fcvt.d.s	fs3,fa5
               pitch/oneDegree, sqrtf(unf_var(pitch))/oneDegree,
 8005340:	f58470bf f5842707 	0xf5842707f58470bf
 8005348:	f84470bf f8442787 	0xf8442787f84470bf
 8005350:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005358:	42078a53          	fcvt.d.s	fs4,fa5
               pitch/oneDegree, sqrtf(unf_var(pitch))/oneDegree,
 800535c:	f58470bf f5842787 	0xf5842787f58470bf
 8005364:	000070bf 20f78553 	0x20f78553000070bf
 800536c:	558000ef          	jal	ra,80058c4 <unf_var>
 8005370:	000070bf 20a507d3 	0x20a507d3000070bf
 8005378:	000070bf 20f78553 	0x20f78553000070bf
 8005380:	240050ef          	jal	ra,800a5c0 <sqrtf>
 8005384:	000070bf 20a50753 	0x20a50753000070bf
 800538c:	f84470bf f8442787 	0xf8442787f84470bf
 8005394:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 800539c:	42078453          	fcvt.d.s	fs0,fa5
               yaw/oneDegree, sqrtf(unf_var(yaw))/oneDegree);
 80053a0:	f54470bf f5442707 	0xf5442707f54470bf
 80053a8:	f84470bf f8442787 	0xf8442787f84470bf
 80053b0:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80053b8:	420784d3          	fcvt.d.s	fs1,fa5
               yaw/oneDegree, sqrtf(unf_var(yaw))/oneDegree);
 80053bc:	f54470bf f5442787 	0xf5442787f54470bf
 80053c4:	000070bf 20f78553 	0x20f78553000070bf
 80053cc:	4f8000ef          	jal	ra,80058c4 <unf_var>
 80053d0:	000070bf 20a507d3 	0x20a507d3000070bf
 80053d8:	000070bf 20f78553 	0x20f78553000070bf
 80053e0:	1e0050ef          	jal	ra,800a5c0 <sqrtf>
 80053e4:	000070bf 20a50753 	0x20a50753000070bf
 80053ec:	f84470bf f8442787 	0xf8442787f84470bf
 80053f4:	000070bf 18f777d3 	0x18f777d3000070bf
        printf("Angle: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80053fc:	420787d3          	fcvt.d.s	fa5,fa5
 8005400:	00f13827          	fsd	fa5,16(sp)
 8005404:	00913427          	fsd	fs1,8(sp)
 8005408:	00813027          	fsd	fs0,0(sp)
 800540c:	f5443427          	fsd	fs4,-184(s0)
 8005410:	f4842803          	lw	a6,-184(s0)
 8005414:	f4c42883          	lw	a7,-180(s0)
 8005418:	f5343427          	fsd	fs3,-184(s0)
 800541c:	f4842703          	lw	a4,-184(s0)
 8005420:	f4c42783          	lw	a5,-180(s0)
 8005424:	f5243427          	fsd	fs2,-184(s0)
 8005428:	f4842603          	lw	a2,-184(s0)
 800542c:	f4c42683          	lw	a3,-180(s0)
 8005430:	0800c5b7          	lui	a1,0x800c
 8005434:	f7458513          	addi	a0,a1,-140 # 800bf74 <nan+0xd8>
 8005438:	7cc020ef          	jal	ra,8007c04 <printf_>
        printf("\t\tq: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 800543c:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8005444:	42078a53          	fcvt.d.s	fs4,fa5
               q0, sqrtf(unf_var(q0)),
 8005448:	1501f0bf 1501a787 	0x1501a7871501f0bf
 8005450:	000070bf 20f78553 	0x20f78553000070bf
 8005458:	46c000ef          	jal	ra,80058c4 <unf_var>
 800545c:	000070bf 20a507d3 	0x20a507d3000070bf
 8005464:	000070bf 20f78553 	0x20f78553000070bf
 800546c:	154050ef          	jal	ra,800a5c0 <sqrtf>
 8005470:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("\t\tq: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005478:	42078ad3          	fcvt.d.s	fs5,fa5
 800547c:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8005484:	42078b53          	fcvt.d.s	fs6,fa5
               q1, sqrtf(unf_var(q1)),
 8005488:	1641f0bf 1641a787 	0x1641a7871641f0bf
 8005490:	000070bf 20f78553 	0x20f78553000070bf
 8005498:	42c000ef          	jal	ra,80058c4 <unf_var>
 800549c:	000070bf 20a507d3 	0x20a507d3000070bf
 80054a4:	000070bf 20f78553 	0x20f78553000070bf
 80054ac:	114050ef          	jal	ra,800a5c0 <sqrtf>
 80054b0:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("\t\tq: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80054b8:	42078453          	fcvt.d.s	fs0,fa5
 80054bc:	1681f0bf 1681a787 	0x1681a7871681f0bf
 80054c4:	420784d3          	fcvt.d.s	fs1,fa5
               q2, sqrtf(unf_var(q2)),
 80054c8:	1681f0bf 1681a787 	0x1681a7871681f0bf
 80054d0:	000070bf 20f78553 	0x20f78553000070bf
 80054d8:	3ec000ef          	jal	ra,80058c4 <unf_var>
 80054dc:	000070bf 20a507d3 	0x20a507d3000070bf
 80054e4:	000070bf 20f78553 	0x20f78553000070bf
 80054ec:	0d4050ef          	jal	ra,800a5c0 <sqrtf>
 80054f0:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("\t\tq: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 80054f8:	42078953          	fcvt.d.s	fs2,fa5
 80054fc:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8005504:	420789d3          	fcvt.d.s	fs3,fa5
               q3, sqrtf(unf_var(q3)));
 8005508:	16c1f0bf 16c1a787 	0x16c1a78716c1f0bf
 8005510:	000070bf 20f78553 	0x20f78553000070bf
 8005518:	3ac000ef          	jal	ra,80058c4 <unf_var>
 800551c:	000070bf 20a507d3 	0x20a507d3000070bf
 8005524:	000070bf 20f78553 	0x20f78553000070bf
 800552c:	094050ef          	jal	ra,800a5c0 <sqrtf>
 8005530:	000070bf 20a507d3 	0x20a507d3000070bf
        printf("\t\tq: (%+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f, %+05.1f ± %05.3f)",
 8005538:	420787d3          	fcvt.d.s	fa5,fa5
 800553c:	02f13027          	fsd	fa5,32(sp)
 8005540:	01313c27          	fsd	fs3,24(sp)
 8005544:	01213827          	fsd	fs2,16(sp)
 8005548:	00913427          	fsd	fs1,8(sp)
 800554c:	00813027          	fsd	fs0,0(sp)
 8005550:	f5643427          	fsd	fs6,-184(s0)
 8005554:	f4842803          	lw	a6,-184(s0)
 8005558:	f4c42883          	lw	a7,-180(s0)
 800555c:	f5543427          	fsd	fs5,-184(s0)
 8005560:	f4842703          	lw	a4,-184(s0)
 8005564:	f4c42783          	lw	a5,-180(s0)
 8005568:	f5443427          	fsd	fs4,-184(s0)
 800556c:	f4842603          	lw	a2,-184(s0)
 8005570:	f4c42683          	lw	a3,-180(s0)
 8005574:	0800c5b7          	lui	a1,0x800c
 8005578:	fb858513          	addi	a0,a1,-72 # 800bfb8 <nan+0x11c>
 800557c:	688020ef          	jal	ra,8007c04 <printf_>


        printf("\n\n");
 8005580:	0800c7b7          	lui	a5,0x800c
 8005584:	00c78513          	addi	a0,a5,12 # 800c00c <nan+0x170>
 8005588:	67c020ef          	jal	ra,8007c04 <printf_>

        if (i >= 1024) {
 800558c:	f8c42703          	lw	a4,-116(s0)
 8005590:	3ff00793          	li	a5,1023
 8005594:	00e7d663          	ble	a4,a5,80055a0 <main+0x80c>
        }

        i++;
    }

    return 0;
 8005598:	00000793          	li	a5,0
 800559c:	0140006f          	j	80055b0 <main+0x81c>
        i++;
 80055a0:	f8c42783          	lw	a5,-116(s0)
 80055a4:	00178793          	addi	a5,a5,1
 80055a8:	f8f42623          	sw	a5,-116(s0)
    while(1) {
 80055ac:	925ff06f          	j	8004ed0 <main+0x13c>
}
 80055b0:	00078513          	mv	a0,a5
 80055b4:	10c12083          	lw	ra,268(sp)
 80055b8:	10812403          	lw	s0,264(sp)
 80055bc:	0f813407          	fld	fs0,248(sp)
 80055c0:	0f013487          	fld	fs1,240(sp)
 80055c4:	0e813907          	fld	fs2,232(sp)
 80055c8:	0e013987          	fld	fs3,224(sp)
 80055cc:	0d813a07          	fld	fs4,216(sp)
 80055d0:	0d013a87          	fld	fs5,208(sp)
 80055d4:	0c813b07          	fld	fs6,200(sp)
 80055d8:	0c013b87          	fld	fs7,192(sp)
 80055dc:	0b813c07          	fld	fs8,184(sp)
 80055e0:	0b013c87          	fld	fs9,176(sp)
 80055e4:	0a813d07          	fld	fs10,168(sp)
 80055e8:	11010113          	addi	sp,sp,272
 80055ec:	00008067          	ret

080055f0 <getEulerAngle>:

// source: https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Quaternion_to_Euler_Angles_Conversion
void getEulerAngle(float q0, float q1, float q2, float q3, float *roll, float *pitch, float *yaw)
{
 80055f0:	fb010113          	addi	sp,sp,-80
 80055f4:	04112623          	sw	ra,76(sp)
 80055f8:	04812423          	sw	s0,72(sp)
 80055fc:	05010413          	addi	s0,sp,80
 8005600:	fcc470bf fca42627 	0xfca42627fcc470bf
 8005608:	fc8470bf fcb42427 	0xfcb42427fc8470bf
 8005610:	fc4470bf fcc42227 	0xfcc42227fc4470bf
 8005618:	fc0470bf fcd42027 	0xfcd42027fc0470bf
 8005620:	faa42e23          	sw	a0,-68(s0)
 8005624:	fab42c23          	sw	a1,-72(s0)
 8005628:	fac42a23          	sw	a2,-76(s0)
    float pi = acos(-1.0);
 800562c:	0800c7b7          	lui	a5,0x800c
 8005630:	0107f0bf 0107a787 	0x107a7870107f0bf
 8005638:	fec470bf fef42627 	0xfef42627fec470bf
	// roll (x-axis rotation)
	float sinr_cosp = +2.0f * (q0 * q1 + q2 * q3);
 8005640:	fcc470bf fcc42707 	0xfcc42707fcc470bf
 8005648:	fc8470bf fc842787 	0xfc842787fc8470bf
 8005650:	000070bf 10f77753 	0x10f77753000070bf
 8005658:	fc4470bf fc442687 	0xfc442687fc4470bf
 8005660:	fc0470bf fc042787 	0xfc042787fc0470bf
 8005668:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8005670:	000070bf 00f777d3 	0xf777d3000070bf
 8005678:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8005680:	fe8470bf fef42427 	0xfef42427fe8470bf
	float cosr_cosp = +1.0f - 2.0f * (q1 * q1 + q2 * q2);
 8005688:	fc8470bf fc842707 	0xfc842707fc8470bf
 8005690:	fc8470bf fc842787 	0xfc842787fc8470bf
 8005698:	000070bf 10f77753 	0x10f77753000070bf
 80056a0:	fc4470bf fc442687 	0xfc442687fc4470bf
 80056a8:	fc4470bf fc442787 	0xfc442787fc4470bf
 80056b0:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 80056b8:	000070bf 00f777d3 	0xf777d3000070bf
 80056c0:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 80056c8:	0800c7b7          	lui	a5,0x800c
 80056cc:	0187f0bf 0187a707 	0x187a7070187f0bf
 80056d4:	000070bf 08f777d3 	0x8f777d3000070bf
 80056dc:	fe4470bf fef42227 	0xfef42227fe4470bf
	*roll = atan2unf(sinr_cosp, cosr_cosp);
 80056e4:	fe4470bf fe442587 	0xfe442587fe4470bf
 80056ec:	fe8470bf fe842507 	0xfe842507fe8470bf
 80056f4:	1fc000ef          	jal	ra,80058f0 <atan2unf>
 80056f8:	000070bf 20a507d3 	0x20a507d3000070bf
 8005700:	fbc42783          	lw	a5,-68(s0)
 8005704:	0007f0bf 00f7a027 	0xf7a0270007f0bf

	// pitch (y-axis rotation)
	float sinp = +2.0 * (q0 * q2 - q3 * q1);
 800570c:	fcc470bf fcc42707 	0xfcc42707fcc470bf
 8005714:	fc4470bf fc442787 	0xfc442787fc4470bf
 800571c:	000070bf 10f77753 	0x10f77753000070bf
 8005724:	fc0470bf fc042687 	0xfc042687fc0470bf
 800572c:	fc8470bf fc842787 	0xfc842787fc8470bf
 8005734:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800573c:	000070bf 08f777d3 	0x8f777d3000070bf
 8005744:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 800574c:	fe0470bf fef42027 	0xfef42027fe0470bf
	if (fabsf(sinp) >= 1)
 8005754:	fe0470bf fe042787 	0xfe042787fe0470bf
 800575c:	20f7a753          	fabs.s	fa4,fa5
 8005760:	0800c7b7          	lui	a5,0x800c
 8005764:	0187f0bf 0187a787 	0x187a7870187f0bf
 800576c:	a0e787d3          	fle.s	a5,fa5,fa4
 8005770:	04078663          	beqz	a5,80057bc <getEulerAngle+0x1cc>
		*pitch = copysignf(pi / 2, sinp); // use 90 degrees if out of range
 8005774:	fec470bf fec42707 	0xfec42707fec470bf
 800577c:	0800c7b7          	lui	a5,0x800c
 8005780:	0387f0bf 0387a787 	0x387a7870387f0bf
 8005788:	000070bf 18f777d3 	0x18f777d3000070bf
 8005790:	fe0470bf fe042587 	0xfe042587fe0470bf
 8005798:	000070bf 20f78553 	0x20f78553000070bf
 80057a0:	768020ef          	jal	ra,8007f08 <copysignf>
 80057a4:	000070bf 20a507d3 	0x20a507d3000070bf
 80057ac:	fb842783          	lw	a5,-72(s0)
 80057b0:	0007f0bf 00f7a027 	0xf7a0270007f0bf
 80057b8:	0240006f          	j	80057dc <getEulerAngle+0x1ec>
	else
		*pitch = asinunf(sinp);
 80057bc:	fe0470bf fe042507 	0xfe042507fe0470bf
 80057c4:	18c000ef          	jal	ra,8005950 <asinunf>
 80057c8:	000070bf 20a507d3 	0x20a507d3000070bf
 80057d0:	fb842783          	lw	a5,-72(s0)
 80057d4:	0007f0bf 00f7a027 	0xf7a0270007f0bf

	// yaw (z-axis rotation)
	float siny_cosp = +2.0f * (q0 * q3 + q1 * q2);
 80057dc:	fcc470bf fcc42707 	0xfcc42707fcc470bf
 80057e4:	fc0470bf fc042787 	0xfc042787fc0470bf
 80057ec:	000070bf 10f77753 	0x10f77753000070bf
 80057f4:	fc8470bf fc842687 	0xfc842687fc8470bf
 80057fc:	fc4470bf fc442787 	0xfc442787fc4470bf
 8005804:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 800580c:	000070bf 00f777d3 	0xf777d3000070bf
 8005814:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 800581c:	fdc470bf fcf42e27 	0xfcf42e27fdc470bf
	float cosy_cosp = +1.0f - 2.0f * (q2 * q2 + q3 * q3);
 8005824:	fc4470bf fc442707 	0xfc442707fc4470bf
 800582c:	fc4470bf fc442787 	0xfc442787fc4470bf
 8005834:	000070bf 10f77753 	0x10f77753000070bf
 800583c:	fc0470bf fc042687 	0xfc042687fc0470bf
 8005844:	fc0470bf fc042787 	0xfc042787fc0470bf
 800584c:	000070bf 10f6f7d3 	0x10f6f7d3000070bf
 8005854:	000070bf 00f777d3 	0xf777d3000070bf
 800585c:	000070bf 00f7f7d3 	0xf7f7d3000070bf
 8005864:	0800c7b7          	lui	a5,0x800c
 8005868:	0187f0bf 0187a707 	0x187a7070187f0bf
 8005870:	000070bf 08f777d3 	0x8f777d3000070bf
 8005878:	fd8470bf fcf42c27 	0xfcf42c27fd8470bf
	*yaw = atan2unf(siny_cosp, cosy_cosp);
 8005880:	fd8470bf fd842587 	0xfd842587fd8470bf
 8005888:	fdc470bf fdc42507 	0xfdc42507fdc470bf
 8005890:	060000ef          	jal	ra,80058f0 <atan2unf>
 8005894:	000070bf 20a507d3 	0x20a507d3000070bf
 800589c:	fb442783          	lw	a5,-76(s0)
 80058a0:	0007f0bf 00f7a027 	0xf7a0270007f0bf
}
 80058a8:	00000013          	nop
 80058ac:	04c12083          	lw	ra,76(sp)
 80058b0:	04812403          	lw	s0,72(sp)
 80058b4:	05010113          	addi	sp,sp,80
 80058b8:	00008067          	ret

080058bc <unf_covar>:
.globl sqrtunf
.globl asinunf
.globl atan2unf

unf_covar:
	ungcov.s fa0, fa0, fa1
 80058bc:	78b57553          	0x78b57553
	ret
 80058c0:	00008067          	ret

080058c4 <unf_var>:

unf_var:
	unfmv.s fa1, fa0
 80058c4:	000070bf 20a505d3 	0x20a505d3000070bf
	tail unf_covar
 80058cc:	ff1ff06f          	j	80058bc <unf_covar>

080058d0 <unf_best_guess>:

unf_best_guess:
	ret
 80058d0:	00008067          	ret

080058d4 <unf_create>:

unf_create:
	unsvar.s fa0, fa1
 80058d4:	b805f553          	0xb805f553
	ret
 80058d8:	00008067          	ret

080058dc <unf_create_exact>:

unf_create_exact:
	unclvar.s fa0
 80058dc:	b8200553          	0xb8200553
	ret
 80058e0:	00008067          	ret

080058e4 <sqrtunf>:
 * for all loads and stores. This matches the assembly produced by the
 * gcc -> python script -> as -> python script build set up.
 */

sqrtunf:
	unfsqrt.s fa0, fa0
 80058e4:	000070bf 58057553 	0x58057553000070bf
	ret
 80058ec:	00008067          	ret

080058f0 <atan2unf>:

atan2unf:
	/* Prologue */

	addi      sp, sp, -16
 80058f0:	ff010113          	addi	sp,sp,-16
	sw        ra, 12(sp)
 80058f4:	00112623          	sw	ra,12(sp)
	unfsw     fs0, 8(sp), 8(sp)
 80058f8:	008170bf 00812427 	0x812427008170bf
	unfsw     fs1, 4(sp), 4(sp)
 8005900:	004170bf 00912227 	0x912227004170bf

	/* Procedure body */

	/* Copy y and x into fs0 to preserve their values during procedure call. */
	unfmv.s   fs0, fa0
 8005908:	000070bf 20a50453 	0x20a50453000070bf
	unfmv.s   fs1, fa1
 8005910:	000070bf 20b584d3 	0x20b584d3000070bf
	 * variable z = y/x using uncertainty aware division and then apply the
	 * UNUPG.S instruction to atanf(z).
	 */

	/* Calculate the best guess of atan2f(y, x) and store in fa0. */
	call      atan2f
 8005918:	4a5040ef          	jal	ra,800a5bc <atan2f>

	/* Calculate z = y / x and store in fa4 */
	unfdiv.s	fa4, fs0, fs1
 800591c:	000070bf 18947753 	0x18947753000070bf

	/* Calculate d(atan(z))/dz = 1 / (z^2 + 1) and store in fa2. */
	li		a0, 1
 8005924:	00100513          	li	a0,1
	fcvt.s.w	fa3, a0
 8005928:	d00576d3          	fcvt.s.w	fa3,a0
	fmul.s		fa2, fs0, fs0
 800592c:	10847653          	fmul.s	fa2,fs0,fs0
	fadd.s		fa2, fa2, fa3
 8005930:	00d67653          	fadd.s	fa2,fa2,fa3
	fdiv.s		fa2, fa3, fa2
 8005934:	18c6f653          	fdiv.s	fa2,fa3,fa2

	/* Set the uncertainty information of fa0 by applying the linear
	 * uncertainty propagation equations to atan(z).
	 * The best guess stored in fa0 is left unchanged by UNUPG.S.
	 */
	unupg.s		fa0, fa4, fa2
 8005938:	38c77553          	0x38c77553

	/* Epilogue */

	unflw     fs0, 8(sp), 8(sp)
 800593c:	008170bf 00812407 	0x812407008170bf
	lw        ra, 12(sp)
 8005944:	00c12083          	lw	ra,12(sp)
	addi      sp, sp, 16
 8005948:	01010113          	addi	sp,sp,16
	ret
 800594c:	00008067          	ret

08005950 <asinunf>:

asinunf:
	/* Prologue */

	addi      sp, sp, -16
 8005950:	ff010113          	addi	sp,sp,-16
	sw        ra, 12(sp)
 8005954:	00112623          	sw	ra,12(sp)
	unfsw     fs0, 8(sp), 8(sp)
 8005958:	008170bf 00812427 	0x812427008170bf

	/* Procedure body */

	/* Copy x into fs0 to preserve its value during procedure call. */
	unfmv.s   fs0, fa0
 8005960:	000070bf 20a50453 	0x20a50453000070bf
	/* Calculate the best guess of asin(x) and store in fa0. */
	call      asinf
 8005968:	355040ef          	jal	ra,800a4bc <asinf>

	/* Calculate d(asin(x))/dx = 1 / sqrt(1 - x^2) and store in fa4. */
	li        a0, 1
 800596c:	00100513          	li	a0,1
	fcvt.s.w  fa3, a0
 8005970:	d00576d3          	fcvt.s.w	fa3,a0
	fmul.s    fa4, fs0, fs0
 8005974:	10847753          	fmul.s	fa4,fs0,fs0
	fsub.s    fa4, fa3, fa4
 8005978:	08e6f753          	fsub.s	fa4,fa3,fa4
	fsqrt.s   fa4, fa4
 800597c:	58077753          	fsqrt.s	fa4,fa4
	fdiv.s    fa4, fa3, fa4
 8005980:	18e6f753          	fdiv.s	fa4,fa3,fa4

	/* Set the uncertainty information of fa0 by applying the linear
	 * uncertainty propagation equations to asin(x).
	 * The best guess stored in fa0 is left unchanged by UNUPG.S.
	 */
	unupg.s   fa0, fs0, fa4
 8005984:	38e47553          	0x38e47553

	/* Epilogue */

	unflw     fs0, 8(sp), 8(sp)
 8005988:	008170bf 00812407 	0x812407008170bf
	lw        ra, 12(sp)
 8005990:	00c12083          	lw	ra,12(sp)
	addi      sp, sp, 16
 8005994:	01010113          	addi	sp,sp,16
	ret
 8005998:	00008067          	ret

0800599c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800599c:	fe010113          	addi	sp,sp,-32
 80059a0:	00812e23          	sw	s0,28(sp)
 80059a4:	02010413          	addi	s0,sp,32
 80059a8:	00050793          	mv	a5,a0
 80059ac:	feb42423          	sw	a1,-24(s0)
 80059b0:	fec42223          	sw	a2,-28(s0)
 80059b4:	fed42023          	sw	a3,-32(s0)
 80059b8:	fef407a3          	sb	a5,-17(s0)
  if (idx < maxlen) {
 80059bc:	fe442703          	lw	a4,-28(s0)
 80059c0:	fe042783          	lw	a5,-32(s0)
 80059c4:	00f77c63          	bleu	a5,a4,80059dc <_out_buffer+0x40>
    ((char*)buffer)[idx] = character;
 80059c8:	fe842703          	lw	a4,-24(s0)
 80059cc:	fe442783          	lw	a5,-28(s0)
 80059d0:	00f707b3          	add	a5,a4,a5
 80059d4:	fef44703          	lbu	a4,-17(s0)
 80059d8:	00e78023          	sb	a4,0(a5) # 800c000 <nan+0x164>
  }
}
 80059dc:	00000013          	nop
 80059e0:	01c12403          	lw	s0,28(sp)
 80059e4:	02010113          	addi	sp,sp,32
 80059e8:	00008067          	ret

080059ec <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80059ec:	fe010113          	addi	sp,sp,-32
 80059f0:	00812e23          	sw	s0,28(sp)
 80059f4:	02010413          	addi	s0,sp,32
 80059f8:	00050793          	mv	a5,a0
 80059fc:	feb42423          	sw	a1,-24(s0)
 8005a00:	fec42223          	sw	a2,-28(s0)
 8005a04:	fed42023          	sw	a3,-32(s0)
 8005a08:	fef407a3          	sb	a5,-17(s0)
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8005a0c:	00000013          	nop
 8005a10:	01c12403          	lw	s0,28(sp)
 8005a14:	02010113          	addi	sp,sp,32
 8005a18:	00008067          	ret

08005a1c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8005a1c:	fe010113          	addi	sp,sp,-32
 8005a20:	00112e23          	sw	ra,28(sp)
 8005a24:	00812c23          	sw	s0,24(sp)
 8005a28:	02010413          	addi	s0,sp,32
 8005a2c:	00050793          	mv	a5,a0
 8005a30:	feb42423          	sw	a1,-24(s0)
 8005a34:	fec42223          	sw	a2,-28(s0)
 8005a38:	fed42023          	sw	a3,-32(s0)
 8005a3c:	fef407a3          	sb	a5,-17(s0)
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8005a40:	fef44783          	lbu	a5,-17(s0)
 8005a44:	00078863          	beqz	a5,8005a54 <_out_char+0x38>
    _putchar(character);
 8005a48:	fef44783          	lbu	a5,-17(s0)
 8005a4c:	00078513          	mv	a0,a5
 8005a50:	448020ef          	jal	ra,8007e98 <_putchar>
  }
}
 8005a54:	00000013          	nop
 8005a58:	01c12083          	lw	ra,28(sp)
 8005a5c:	01812403          	lw	s0,24(sp)
 8005a60:	02010113          	addi	sp,sp,32
 8005a64:	00008067          	ret

08005a68 <_out_fct>:


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8005a68:	fe010113          	addi	sp,sp,-32
 8005a6c:	00112e23          	sw	ra,28(sp)
 8005a70:	00812c23          	sw	s0,24(sp)
 8005a74:	02010413          	addi	s0,sp,32
 8005a78:	00050793          	mv	a5,a0
 8005a7c:	feb42423          	sw	a1,-24(s0)
 8005a80:	fec42223          	sw	a2,-28(s0)
 8005a84:	fed42023          	sw	a3,-32(s0)
 8005a88:	fef407a3          	sb	a5,-17(s0)
  (void)idx; (void)maxlen;
  if (character) {
 8005a8c:	fef44783          	lbu	a5,-17(s0)
 8005a90:	02078263          	beqz	a5,8005ab4 <_out_fct+0x4c>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8005a94:	fe842783          	lw	a5,-24(s0)
 8005a98:	0007a683          	lw	a3,0(a5)
 8005a9c:	fe842783          	lw	a5,-24(s0)
 8005aa0:	0047a703          	lw	a4,4(a5)
 8005aa4:	fef44783          	lbu	a5,-17(s0)
 8005aa8:	00070593          	mv	a1,a4
 8005aac:	00078513          	mv	a0,a5
 8005ab0:	000680e7          	jalr	a3
  }
}
 8005ab4:	00000013          	nop
 8005ab8:	01c12083          	lw	ra,28(sp)
 8005abc:	01812403          	lw	s0,24(sp)
 8005ac0:	02010113          	addi	sp,sp,32
 8005ac4:	00008067          	ret

08005ac8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8005ac8:	fd010113          	addi	sp,sp,-48
 8005acc:	02812623          	sw	s0,44(sp)
 8005ad0:	03010413          	addi	s0,sp,48
 8005ad4:	fca42e23          	sw	a0,-36(s0)
 8005ad8:	fcb42c23          	sw	a1,-40(s0)
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8005adc:	fdc42783          	lw	a5,-36(s0)
 8005ae0:	fef42623          	sw	a5,-20(s0)
 8005ae4:	0100006f          	j	8005af4 <_strnlen_s+0x2c>
 8005ae8:	fec42783          	lw	a5,-20(s0)
 8005aec:	00178793          	addi	a5,a5,1
 8005af0:	fef42623          	sw	a5,-20(s0)
 8005af4:	fec42783          	lw	a5,-20(s0)
 8005af8:	0007c783          	lbu	a5,0(a5)
 8005afc:	00078a63          	beqz	a5,8005b10 <_strnlen_s+0x48>
 8005b00:	fd842783          	lw	a5,-40(s0)
 8005b04:	fff78713          	addi	a4,a5,-1
 8005b08:	fce42c23          	sw	a4,-40(s0)
 8005b0c:	fc079ee3          	bnez	a5,8005ae8 <_strnlen_s+0x20>
  return (unsigned int)(s - str);
 8005b10:	fec42703          	lw	a4,-20(s0)
 8005b14:	fdc42783          	lw	a5,-36(s0)
 8005b18:	40f707b3          	sub	a5,a4,a5
}
 8005b1c:	00078513          	mv	a0,a5
 8005b20:	02c12403          	lw	s0,44(sp)
 8005b24:	03010113          	addi	sp,sp,48
 8005b28:	00008067          	ret

08005b2c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8005b2c:	fe010113          	addi	sp,sp,-32
 8005b30:	00812e23          	sw	s0,28(sp)
 8005b34:	02010413          	addi	s0,sp,32
 8005b38:	00050793          	mv	a5,a0
 8005b3c:	fef407a3          	sb	a5,-17(s0)
  return (ch >= '0') && (ch <= '9');
 8005b40:	fef44703          	lbu	a4,-17(s0)
 8005b44:	02f00793          	li	a5,47
 8005b48:	00e7fc63          	bleu	a4,a5,8005b60 <_is_digit+0x34>
 8005b4c:	fef44703          	lbu	a4,-17(s0)
 8005b50:	03900793          	li	a5,57
 8005b54:	00e7e663          	bltu	a5,a4,8005b60 <_is_digit+0x34>
 8005b58:	00100793          	li	a5,1
 8005b5c:	0080006f          	j	8005b64 <_is_digit+0x38>
 8005b60:	00000793          	li	a5,0
 8005b64:	0017f793          	andi	a5,a5,1
 8005b68:	0ff7f793          	andi	a5,a5,255
}
 8005b6c:	00078513          	mv	a0,a5
 8005b70:	01c12403          	lw	s0,28(sp)
 8005b74:	02010113          	addi	sp,sp,32
 8005b78:	00008067          	ret

08005b7c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8005b7c:	fd010113          	addi	sp,sp,-48
 8005b80:	02112623          	sw	ra,44(sp)
 8005b84:	02812423          	sw	s0,40(sp)
 8005b88:	03010413          	addi	s0,sp,48
 8005b8c:	fca42e23          	sw	a0,-36(s0)
  unsigned int i = 0U;
 8005b90:	fe042623          	sw	zero,-20(s0)
  while (_is_digit(**str)) {
 8005b94:	0400006f          	j	8005bd4 <_atoi+0x58>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8005b98:	fec42703          	lw	a4,-20(s0)
 8005b9c:	00070793          	mv	a5,a4
 8005ba0:	00279793          	slli	a5,a5,0x2
 8005ba4:	00e787b3          	add	a5,a5,a4
 8005ba8:	00179793          	slli	a5,a5,0x1
 8005bac:	00078613          	mv	a2,a5
 8005bb0:	fdc42783          	lw	a5,-36(s0)
 8005bb4:	0007a783          	lw	a5,0(a5)
 8005bb8:	00178693          	addi	a3,a5,1
 8005bbc:	fdc42703          	lw	a4,-36(s0)
 8005bc0:	00d72023          	sw	a3,0(a4)
 8005bc4:	0007c783          	lbu	a5,0(a5)
 8005bc8:	00f607b3          	add	a5,a2,a5
 8005bcc:	fd078793          	addi	a5,a5,-48
 8005bd0:	fef42623          	sw	a5,-20(s0)
  while (_is_digit(**str)) {
 8005bd4:	fdc42783          	lw	a5,-36(s0)
 8005bd8:	0007a783          	lw	a5,0(a5)
 8005bdc:	0007c783          	lbu	a5,0(a5)
 8005be0:	00078513          	mv	a0,a5
 8005be4:	f49ff0ef          	jal	ra,8005b2c <_is_digit>
 8005be8:	00050793          	mv	a5,a0
 8005bec:	fa0796e3          	bnez	a5,8005b98 <_atoi+0x1c>
  }
  return i;
 8005bf0:	fec42783          	lw	a5,-20(s0)
}
 8005bf4:	00078513          	mv	a0,a5
 8005bf8:	02c12083          	lw	ra,44(sp)
 8005bfc:	02812403          	lw	s0,40(sp)
 8005c00:	03010113          	addi	sp,sp,48
 8005c04:	00008067          	ret

08005c08 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005c08:	fc010113          	addi	sp,sp,-64
 8005c0c:	02112e23          	sw	ra,60(sp)
 8005c10:	02812c23          	sw	s0,56(sp)
 8005c14:	04010413          	addi	s0,sp,64
 8005c18:	fca42e23          	sw	a0,-36(s0)
 8005c1c:	fcb42c23          	sw	a1,-40(s0)
 8005c20:	fcc42a23          	sw	a2,-44(s0)
 8005c24:	fcd42823          	sw	a3,-48(s0)
 8005c28:	fce42623          	sw	a4,-52(s0)
 8005c2c:	fcf42423          	sw	a5,-56(s0)
 8005c30:	fd042223          	sw	a6,-60(s0)
 8005c34:	fd142023          	sw	a7,-64(s0)
  const size_t start_idx = idx;
 8005c38:	fd442783          	lw	a5,-44(s0)
 8005c3c:	fef42423          	sw	a5,-24(s0)

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005c40:	fc042783          	lw	a5,-64(s0)
 8005c44:	0027f793          	andi	a5,a5,2
 8005c48:	08079c63          	bnez	a5,8005ce0 <_out_rev+0xd8>
 8005c4c:	fc042783          	lw	a5,-64(s0)
 8005c50:	0017f793          	andi	a5,a5,1
 8005c54:	08079663          	bnez	a5,8005ce0 <_out_rev+0xd8>
    for (size_t i = len; i < width; i++) {
 8005c58:	fc842783          	lw	a5,-56(s0)
 8005c5c:	fef42623          	sw	a5,-20(s0)
 8005c60:	0340006f          	j	8005c94 <_out_rev+0x8c>
      out(' ', buffer, idx++, maxlen);
 8005c64:	fd442783          	lw	a5,-44(s0)
 8005c68:	00178713          	addi	a4,a5,1
 8005c6c:	fce42a23          	sw	a4,-44(s0)
 8005c70:	fdc42703          	lw	a4,-36(s0)
 8005c74:	fd042683          	lw	a3,-48(s0)
 8005c78:	00078613          	mv	a2,a5
 8005c7c:	fd842583          	lw	a1,-40(s0)
 8005c80:	02000513          	li	a0,32
 8005c84:	000700e7          	jalr	a4
    for (size_t i = len; i < width; i++) {
 8005c88:	fec42783          	lw	a5,-20(s0)
 8005c8c:	00178793          	addi	a5,a5,1
 8005c90:	fef42623          	sw	a5,-20(s0)
 8005c94:	fec42703          	lw	a4,-20(s0)
 8005c98:	fc442783          	lw	a5,-60(s0)
 8005c9c:	fcf764e3          	bltu	a4,a5,8005c64 <_out_rev+0x5c>
    }
  }

  // reverse string
  while (len) {
 8005ca0:	0400006f          	j	8005ce0 <_out_rev+0xd8>
    out(buf[--len], buffer, idx++, maxlen);
 8005ca4:	fc842783          	lw	a5,-56(s0)
 8005ca8:	fff78793          	addi	a5,a5,-1
 8005cac:	fcf42423          	sw	a5,-56(s0)
 8005cb0:	fcc42703          	lw	a4,-52(s0)
 8005cb4:	fc842783          	lw	a5,-56(s0)
 8005cb8:	00f707b3          	add	a5,a4,a5
 8005cbc:	0007c503          	lbu	a0,0(a5)
 8005cc0:	fd442783          	lw	a5,-44(s0)
 8005cc4:	00178713          	addi	a4,a5,1
 8005cc8:	fce42a23          	sw	a4,-44(s0)
 8005ccc:	fdc42703          	lw	a4,-36(s0)
 8005cd0:	fd042683          	lw	a3,-48(s0)
 8005cd4:	00078613          	mv	a2,a5
 8005cd8:	fd842583          	lw	a1,-40(s0)
 8005cdc:	000700e7          	jalr	a4
  while (len) {
 8005ce0:	fc842783          	lw	a5,-56(s0)
 8005ce4:	fc0790e3          	bnez	a5,8005ca4 <_out_rev+0x9c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8005ce8:	fc042783          	lw	a5,-64(s0)
 8005cec:	0027f793          	andi	a5,a5,2
 8005cf0:	04078063          	beqz	a5,8005d30 <_out_rev+0x128>
    while (idx - start_idx < width) {
 8005cf4:	0280006f          	j	8005d1c <_out_rev+0x114>
      out(' ', buffer, idx++, maxlen);
 8005cf8:	fd442783          	lw	a5,-44(s0)
 8005cfc:	00178713          	addi	a4,a5,1
 8005d00:	fce42a23          	sw	a4,-44(s0)
 8005d04:	fdc42703          	lw	a4,-36(s0)
 8005d08:	fd042683          	lw	a3,-48(s0)
 8005d0c:	00078613          	mv	a2,a5
 8005d10:	fd842583          	lw	a1,-40(s0)
 8005d14:	02000513          	li	a0,32
 8005d18:	000700e7          	jalr	a4
    while (idx - start_idx < width) {
 8005d1c:	fd442703          	lw	a4,-44(s0)
 8005d20:	fe842783          	lw	a5,-24(s0)
 8005d24:	40f707b3          	sub	a5,a4,a5
 8005d28:	fc442703          	lw	a4,-60(s0)
 8005d2c:	fce7e6e3          	bltu	a5,a4,8005cf8 <_out_rev+0xf0>
    }
  }

  return idx;
 8005d30:	fd442783          	lw	a5,-44(s0)
}
 8005d34:	00078513          	mv	a0,a5
 8005d38:	03c12083          	lw	ra,60(sp)
 8005d3c:	03812403          	lw	s0,56(sp)
 8005d40:	04010113          	addi	sp,sp,64
 8005d44:	00008067          	ret

08005d48 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005d48:	fd010113          	addi	sp,sp,-48
 8005d4c:	02112623          	sw	ra,44(sp)
 8005d50:	02812423          	sw	s0,40(sp)
 8005d54:	03010413          	addi	s0,sp,48
 8005d58:	fea42623          	sw	a0,-20(s0)
 8005d5c:	feb42423          	sw	a1,-24(s0)
 8005d60:	fec42223          	sw	a2,-28(s0)
 8005d64:	fed42023          	sw	a3,-32(s0)
 8005d68:	fce42e23          	sw	a4,-36(s0)
 8005d6c:	fcf42c23          	sw	a5,-40(s0)
 8005d70:	00080793          	mv	a5,a6
 8005d74:	fd142823          	sw	a7,-48(s0)
 8005d78:	fcf40ba3          	sb	a5,-41(s0)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8005d7c:	00842783          	lw	a5,8(s0)
 8005d80:	0027f793          	andi	a5,a5,2
 8005d84:	0a079a63          	bnez	a5,8005e38 <_ntoa_format+0xf0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005d88:	00442783          	lw	a5,4(s0)
 8005d8c:	04078863          	beqz	a5,8005ddc <_ntoa_format+0x94>
 8005d90:	00842783          	lw	a5,8(s0)
 8005d94:	0017f793          	andi	a5,a5,1
 8005d98:	04078263          	beqz	a5,8005ddc <_ntoa_format+0x94>
 8005d9c:	fd744783          	lbu	a5,-41(s0)
 8005da0:	00079863          	bnez	a5,8005db0 <_ntoa_format+0x68>
 8005da4:	00842783          	lw	a5,8(s0)
 8005da8:	00c7f793          	andi	a5,a5,12
 8005dac:	02078863          	beqz	a5,8005ddc <_ntoa_format+0x94>
      width--;
 8005db0:	00442783          	lw	a5,4(s0)
 8005db4:	fff78793          	addi	a5,a5,-1
 8005db8:	00f42223          	sw	a5,4(s0)
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005dbc:	0200006f          	j	8005ddc <_ntoa_format+0x94>
      buf[len++] = '0';
 8005dc0:	fd842783          	lw	a5,-40(s0)
 8005dc4:	00178713          	addi	a4,a5,1
 8005dc8:	fce42c23          	sw	a4,-40(s0)
 8005dcc:	fdc42703          	lw	a4,-36(s0)
 8005dd0:	00f707b3          	add	a5,a4,a5
 8005dd4:	03000713          	li	a4,48
 8005dd8:	00e78023          	sb	a4,0(a5)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005ddc:	fd842703          	lw	a4,-40(s0)
 8005de0:	00042783          	lw	a5,0(s0)
 8005de4:	02f77863          	bleu	a5,a4,8005e14 <_ntoa_format+0xcc>
 8005de8:	fd842703          	lw	a4,-40(s0)
 8005dec:	01f00793          	li	a5,31
 8005df0:	fce7f8e3          	bleu	a4,a5,8005dc0 <_ntoa_format+0x78>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005df4:	0200006f          	j	8005e14 <_ntoa_format+0xcc>
      buf[len++] = '0';
 8005df8:	fd842783          	lw	a5,-40(s0)
 8005dfc:	00178713          	addi	a4,a5,1
 8005e00:	fce42c23          	sw	a4,-40(s0)
 8005e04:	fdc42703          	lw	a4,-36(s0)
 8005e08:	00f707b3          	add	a5,a4,a5
 8005e0c:	03000713          	li	a4,48
 8005e10:	00e78023          	sb	a4,0(a5)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005e14:	00842783          	lw	a5,8(s0)
 8005e18:	0017f793          	andi	a5,a5,1
 8005e1c:	00078e63          	beqz	a5,8005e38 <_ntoa_format+0xf0>
 8005e20:	fd842703          	lw	a4,-40(s0)
 8005e24:	00442783          	lw	a5,4(s0)
 8005e28:	00f77863          	bleu	a5,a4,8005e38 <_ntoa_format+0xf0>
 8005e2c:	fd842703          	lw	a4,-40(s0)
 8005e30:	01f00793          	li	a5,31
 8005e34:	fce7f2e3          	bleu	a4,a5,8005df8 <_ntoa_format+0xb0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005e38:	00842783          	lw	a5,8(s0)
 8005e3c:	0107f793          	andi	a5,a5,16
 8005e40:	14078063          	beqz	a5,8005f80 <_ntoa_format+0x238>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005e44:	00842783          	lw	a5,8(s0)
 8005e48:	4007f793          	andi	a5,a5,1024
 8005e4c:	04079863          	bnez	a5,8005e9c <_ntoa_format+0x154>
 8005e50:	fd842783          	lw	a5,-40(s0)
 8005e54:	04078463          	beqz	a5,8005e9c <_ntoa_format+0x154>
 8005e58:	fd842703          	lw	a4,-40(s0)
 8005e5c:	00042783          	lw	a5,0(s0)
 8005e60:	00f70863          	beq	a4,a5,8005e70 <_ntoa_format+0x128>
 8005e64:	fd842703          	lw	a4,-40(s0)
 8005e68:	00442783          	lw	a5,4(s0)
 8005e6c:	02f71863          	bne	a4,a5,8005e9c <_ntoa_format+0x154>
      len--;
 8005e70:	fd842783          	lw	a5,-40(s0)
 8005e74:	fff78793          	addi	a5,a5,-1
 8005e78:	fcf42c23          	sw	a5,-40(s0)
      if (len && (base == 16U)) {
 8005e7c:	fd842783          	lw	a5,-40(s0)
 8005e80:	00078e63          	beqz	a5,8005e9c <_ntoa_format+0x154>
 8005e84:	fd042703          	lw	a4,-48(s0)
 8005e88:	01000793          	li	a5,16
 8005e8c:	00f71863          	bne	a4,a5,8005e9c <_ntoa_format+0x154>
        len--;
 8005e90:	fd842783          	lw	a5,-40(s0)
 8005e94:	fff78793          	addi	a5,a5,-1
 8005e98:	fcf42c23          	sw	a5,-40(s0)
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005e9c:	fd042703          	lw	a4,-48(s0)
 8005ea0:	01000793          	li	a5,16
 8005ea4:	02f71e63          	bne	a4,a5,8005ee0 <_ntoa_format+0x198>
 8005ea8:	00842783          	lw	a5,8(s0)
 8005eac:	0207f793          	andi	a5,a5,32
 8005eb0:	02079863          	bnez	a5,8005ee0 <_ntoa_format+0x198>
 8005eb4:	fd842703          	lw	a4,-40(s0)
 8005eb8:	01f00793          	li	a5,31
 8005ebc:	02e7e263          	bltu	a5,a4,8005ee0 <_ntoa_format+0x198>
      buf[len++] = 'x';
 8005ec0:	fd842783          	lw	a5,-40(s0)
 8005ec4:	00178713          	addi	a4,a5,1
 8005ec8:	fce42c23          	sw	a4,-40(s0)
 8005ecc:	fdc42703          	lw	a4,-36(s0)
 8005ed0:	00f707b3          	add	a5,a4,a5
 8005ed4:	07800713          	li	a4,120
 8005ed8:	00e78023          	sb	a4,0(a5)
 8005edc:	07c0006f          	j	8005f58 <_ntoa_format+0x210>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005ee0:	fd042703          	lw	a4,-48(s0)
 8005ee4:	01000793          	li	a5,16
 8005ee8:	02f71e63          	bne	a4,a5,8005f24 <_ntoa_format+0x1dc>
 8005eec:	00842783          	lw	a5,8(s0)
 8005ef0:	0207f793          	andi	a5,a5,32
 8005ef4:	02078863          	beqz	a5,8005f24 <_ntoa_format+0x1dc>
 8005ef8:	fd842703          	lw	a4,-40(s0)
 8005efc:	01f00793          	li	a5,31
 8005f00:	02e7e263          	bltu	a5,a4,8005f24 <_ntoa_format+0x1dc>
      buf[len++] = 'X';
 8005f04:	fd842783          	lw	a5,-40(s0)
 8005f08:	00178713          	addi	a4,a5,1
 8005f0c:	fce42c23          	sw	a4,-40(s0)
 8005f10:	fdc42703          	lw	a4,-36(s0)
 8005f14:	00f707b3          	add	a5,a4,a5
 8005f18:	05800713          	li	a4,88
 8005f1c:	00e78023          	sb	a4,0(a5)
 8005f20:	0380006f          	j	8005f58 <_ntoa_format+0x210>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f24:	fd042703          	lw	a4,-48(s0)
 8005f28:	00200793          	li	a5,2
 8005f2c:	02f71663          	bne	a4,a5,8005f58 <_ntoa_format+0x210>
 8005f30:	fd842703          	lw	a4,-40(s0)
 8005f34:	01f00793          	li	a5,31
 8005f38:	02e7e063          	bltu	a5,a4,8005f58 <_ntoa_format+0x210>
      buf[len++] = 'b';
 8005f3c:	fd842783          	lw	a5,-40(s0)
 8005f40:	00178713          	addi	a4,a5,1
 8005f44:	fce42c23          	sw	a4,-40(s0)
 8005f48:	fdc42703          	lw	a4,-36(s0)
 8005f4c:	00f707b3          	add	a5,a4,a5
 8005f50:	06200713          	li	a4,98
 8005f54:	00e78023          	sb	a4,0(a5)
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005f58:	fd842703          	lw	a4,-40(s0)
 8005f5c:	01f00793          	li	a5,31
 8005f60:	02e7e063          	bltu	a5,a4,8005f80 <_ntoa_format+0x238>
      buf[len++] = '0';
 8005f64:	fd842783          	lw	a5,-40(s0)
 8005f68:	00178713          	addi	a4,a5,1
 8005f6c:	fce42c23          	sw	a4,-40(s0)
 8005f70:	fdc42703          	lw	a4,-36(s0)
 8005f74:	00f707b3          	add	a5,a4,a5
 8005f78:	03000713          	li	a4,48
 8005f7c:	00e78023          	sb	a4,0(a5)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005f80:	fd842703          	lw	a4,-40(s0)
 8005f84:	01f00793          	li	a5,31
 8005f88:	08e7e063          	bltu	a5,a4,8006008 <_ntoa_format+0x2c0>
    if (negative) {
 8005f8c:	fd744783          	lbu	a5,-41(s0)
 8005f90:	02078263          	beqz	a5,8005fb4 <_ntoa_format+0x26c>
      buf[len++] = '-';
 8005f94:	fd842783          	lw	a5,-40(s0)
 8005f98:	00178713          	addi	a4,a5,1
 8005f9c:	fce42c23          	sw	a4,-40(s0)
 8005fa0:	fdc42703          	lw	a4,-36(s0)
 8005fa4:	00f707b3          	add	a5,a4,a5
 8005fa8:	02d00713          	li	a4,45
 8005fac:	00e78023          	sb	a4,0(a5)
 8005fb0:	0580006f          	j	8006008 <_ntoa_format+0x2c0>
    }
    else if (flags & FLAGS_PLUS) {
 8005fb4:	00842783          	lw	a5,8(s0)
 8005fb8:	0047f793          	andi	a5,a5,4
 8005fbc:	02078263          	beqz	a5,8005fe0 <_ntoa_format+0x298>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005fc0:	fd842783          	lw	a5,-40(s0)
 8005fc4:	00178713          	addi	a4,a5,1
 8005fc8:	fce42c23          	sw	a4,-40(s0)
 8005fcc:	fdc42703          	lw	a4,-36(s0)
 8005fd0:	00f707b3          	add	a5,a4,a5
 8005fd4:	02b00713          	li	a4,43
 8005fd8:	00e78023          	sb	a4,0(a5)
 8005fdc:	02c0006f          	j	8006008 <_ntoa_format+0x2c0>
    }
    else if (flags & FLAGS_SPACE) {
 8005fe0:	00842783          	lw	a5,8(s0)
 8005fe4:	0087f793          	andi	a5,a5,8
 8005fe8:	02078063          	beqz	a5,8006008 <_ntoa_format+0x2c0>
      buf[len++] = ' ';
 8005fec:	fd842783          	lw	a5,-40(s0)
 8005ff0:	00178713          	addi	a4,a5,1
 8005ff4:	fce42c23          	sw	a4,-40(s0)
 8005ff8:	fdc42703          	lw	a4,-36(s0)
 8005ffc:	00f707b3          	add	a5,a4,a5
 8006000:	02000713          	li	a4,32
 8006004:	00e78023          	sb	a4,0(a5)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006008:	00842883          	lw	a7,8(s0)
 800600c:	00442803          	lw	a6,4(s0)
 8006010:	fd842783          	lw	a5,-40(s0)
 8006014:	fdc42703          	lw	a4,-36(s0)
 8006018:	fe042683          	lw	a3,-32(s0)
 800601c:	fe442603          	lw	a2,-28(s0)
 8006020:	fe842583          	lw	a1,-24(s0)
 8006024:	fec42503          	lw	a0,-20(s0)
 8006028:	be1ff0ef          	jal	ra,8005c08 <_out_rev>
 800602c:	00050793          	mv	a5,a0
}
 8006030:	00078513          	mv	a0,a5
 8006034:	02c12083          	lw	ra,44(sp)
 8006038:	02812403          	lw	s0,40(sp)
 800603c:	03010113          	addi	sp,sp,48
 8006040:	00008067          	ret

08006044 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006044:	f9010113          	addi	sp,sp,-112
 8006048:	06112623          	sw	ra,108(sp)
 800604c:	06812423          	sw	s0,104(sp)
 8006050:	07010413          	addi	s0,sp,112
 8006054:	faa42e23          	sw	a0,-68(s0)
 8006058:	fab42c23          	sw	a1,-72(s0)
 800605c:	fac42a23          	sw	a2,-76(s0)
 8006060:	fad42823          	sw	a3,-80(s0)
 8006064:	fae42623          	sw	a4,-84(s0)
 8006068:	fb042223          	sw	a6,-92(s0)
 800606c:	fb142023          	sw	a7,-96(s0)
 8006070:	faf405a3          	sb	a5,-85(s0)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006074:	fe042623          	sw	zero,-20(s0)

  // no hash for 0 values
  if (!value) {
 8006078:	fac42783          	lw	a5,-84(s0)
 800607c:	00079863          	bnez	a5,800608c <_ntoa_long+0x48>
    flags &= ~FLAGS_HASH;
 8006080:	00442783          	lw	a5,4(s0)
 8006084:	fef7f793          	andi	a5,a5,-17
 8006088:	00f42223          	sw	a5,4(s0)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800608c:	00442783          	lw	a5,4(s0)
 8006090:	4007f793          	andi	a5,a5,1024
 8006094:	00078663          	beqz	a5,80060a0 <_ntoa_long+0x5c>
 8006098:	fac42783          	lw	a5,-84(s0)
 800609c:	0a078263          	beqz	a5,8006140 <_ntoa_long+0xfc>
    do {
      const char digit = (char)(value % base);
 80060a0:	fac42783          	lw	a5,-84(s0)
 80060a4:	fa442583          	lw	a1,-92(s0)
 80060a8:	00078513          	mv	a0,a5
 80060ac:	1c9030ef          	jal	ra,8009a74 <__umodsi3>
 80060b0:	00050793          	mv	a5,a0
 80060b4:	fef405a3          	sb	a5,-21(s0)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80060b8:	feb44703          	lbu	a4,-21(s0)
 80060bc:	00900793          	li	a5,9
 80060c0:	00e7ea63          	bltu	a5,a4,80060d4 <_ntoa_long+0x90>
 80060c4:	feb44783          	lbu	a5,-21(s0)
 80060c8:	03078793          	addi	a5,a5,48
 80060cc:	0ff7f793          	andi	a5,a5,255
 80060d0:	0300006f          	j	8006100 <_ntoa_long+0xbc>
 80060d4:	00442783          	lw	a5,4(s0)
 80060d8:	0207f793          	andi	a5,a5,32
 80060dc:	00078663          	beqz	a5,80060e8 <_ntoa_long+0xa4>
 80060e0:	04100793          	li	a5,65
 80060e4:	0080006f          	j	80060ec <_ntoa_long+0xa8>
 80060e8:	06100793          	li	a5,97
 80060ec:	feb44703          	lbu	a4,-21(s0)
 80060f0:	00e787b3          	add	a5,a5,a4
 80060f4:	0ff7f793          	andi	a5,a5,255
 80060f8:	ff678793          	addi	a5,a5,-10
 80060fc:	0ff7f793          	andi	a5,a5,255
 8006100:	fec42703          	lw	a4,-20(s0)
 8006104:	00170693          	addi	a3,a4,1
 8006108:	fed42623          	sw	a3,-20(s0)
 800610c:	ff040693          	addi	a3,s0,-16
 8006110:	00e68733          	add	a4,a3,a4
 8006114:	fcf70c23          	sb	a5,-40(a4)
      value /= base;
 8006118:	fa442583          	lw	a1,-92(s0)
 800611c:	fac42503          	lw	a0,-84(s0)
 8006120:	10d030ef          	jal	ra,8009a2c <__udivsi3>
 8006124:	00050793          	mv	a5,a0
 8006128:	faf42623          	sw	a5,-84(s0)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800612c:	fac42783          	lw	a5,-84(s0)
 8006130:	00078863          	beqz	a5,8006140 <_ntoa_long+0xfc>
 8006134:	fec42703          	lw	a4,-20(s0)
 8006138:	01f00793          	li	a5,31
 800613c:	f6e7f2e3          	bleu	a4,a5,80060a0 <_ntoa_long+0x5c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006140:	fab44683          	lbu	a3,-85(s0)
 8006144:	fc840713          	addi	a4,s0,-56
 8006148:	00442783          	lw	a5,4(s0)
 800614c:	00f12423          	sw	a5,8(sp)
 8006150:	00042783          	lw	a5,0(s0)
 8006154:	00f12223          	sw	a5,4(sp)
 8006158:	fa042783          	lw	a5,-96(s0)
 800615c:	00f12023          	sw	a5,0(sp)
 8006160:	fa442883          	lw	a7,-92(s0)
 8006164:	00068813          	mv	a6,a3
 8006168:	fec42783          	lw	a5,-20(s0)
 800616c:	fb042683          	lw	a3,-80(s0)
 8006170:	fb442603          	lw	a2,-76(s0)
 8006174:	fb842583          	lw	a1,-72(s0)
 8006178:	fbc42503          	lw	a0,-68(s0)
 800617c:	bcdff0ef          	jal	ra,8005d48 <_ntoa_format>
 8006180:	00050793          	mv	a5,a0
}
 8006184:	00078513          	mv	a0,a5
 8006188:	06c12083          	lw	ra,108(sp)
 800618c:	06812403          	lw	s0,104(sp)
 8006190:	07010113          	addi	sp,sp,112
 8006194:	00008067          	ret

08006198 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006198:	f8010113          	addi	sp,sp,-128
 800619c:	06112623          	sw	ra,108(sp)
 80061a0:	06812423          	sw	s0,104(sp)
 80061a4:	07010413          	addi	s0,sp,112
 80061a8:	faa42e23          	sw	a0,-68(s0)
 80061ac:	fab42c23          	sw	a1,-72(s0)
 80061b0:	fac42a23          	sw	a2,-76(s0)
 80061b4:	fad42823          	sw	a3,-80(s0)
 80061b8:	fae42423          	sw	a4,-88(s0)
 80061bc:	faf42623          	sw	a5,-84(s0)
 80061c0:	00080793          	mv	a5,a6
 80061c4:	01142623          	sw	a7,12(s0)
 80061c8:	faf403a3          	sb	a5,-89(s0)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80061cc:	fe042623          	sw	zero,-20(s0)

  // no hash for 0 values
  if (!value) {
 80061d0:	fa842783          	lw	a5,-88(s0)
 80061d4:	fac42703          	lw	a4,-84(s0)
 80061d8:	00e7e7b3          	or	a5,a5,a4
 80061dc:	00079863          	bnez	a5,80061ec <_ntoa_long_long+0x54>
    flags &= ~FLAGS_HASH;
 80061e0:	01c42783          	lw	a5,28(s0)
 80061e4:	fef7f793          	andi	a5,a5,-17
 80061e8:	00f42e23          	sw	a5,28(s0)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80061ec:	01c42783          	lw	a5,28(s0)
 80061f0:	4007f793          	andi	a5,a5,1024
 80061f4:	00078a63          	beqz	a5,8006208 <_ntoa_long_long+0x70>
 80061f8:	fa842783          	lw	a5,-88(s0)
 80061fc:	fac42703          	lw	a4,-84(s0)
 8006200:	00e7e7b3          	or	a5,a5,a4
 8006204:	0c078663          	beqz	a5,80062d0 <_ntoa_long_long+0x138>
    do {
      const char digit = (char)(value % base);
 8006208:	fa842783          	lw	a5,-88(s0)
 800620c:	fac42803          	lw	a6,-84(s0)
 8006210:	00c42603          	lw	a2,12(s0)
 8006214:	01042683          	lw	a3,16(s0)
 8006218:	00078513          	mv	a0,a5
 800621c:	00080593          	mv	a1,a6
 8006220:	218030ef          	jal	ra,8009438 <__umoddi3>
 8006224:	00050793          	mv	a5,a0
 8006228:	00058813          	mv	a6,a1
 800622c:	fef405a3          	sb	a5,-21(s0)
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006230:	feb44703          	lbu	a4,-21(s0)
 8006234:	00900793          	li	a5,9
 8006238:	00e7ea63          	bltu	a5,a4,800624c <_ntoa_long_long+0xb4>
 800623c:	feb44783          	lbu	a5,-21(s0)
 8006240:	03078793          	addi	a5,a5,48
 8006244:	0ff7f793          	andi	a5,a5,255
 8006248:	0300006f          	j	8006278 <_ntoa_long_long+0xe0>
 800624c:	01c42783          	lw	a5,28(s0)
 8006250:	0207f793          	andi	a5,a5,32
 8006254:	00078663          	beqz	a5,8006260 <_ntoa_long_long+0xc8>
 8006258:	04100793          	li	a5,65
 800625c:	0080006f          	j	8006264 <_ntoa_long_long+0xcc>
 8006260:	06100793          	li	a5,97
 8006264:	feb44703          	lbu	a4,-21(s0)
 8006268:	00e787b3          	add	a5,a5,a4
 800626c:	0ff7f793          	andi	a5,a5,255
 8006270:	ff678793          	addi	a5,a5,-10
 8006274:	0ff7f793          	andi	a5,a5,255
 8006278:	fec42703          	lw	a4,-20(s0)
 800627c:	00170693          	addi	a3,a4,1
 8006280:	fed42623          	sw	a3,-20(s0)
 8006284:	ff040693          	addi	a3,s0,-16
 8006288:	00e68733          	add	a4,a3,a4
 800628c:	fcf70c23          	sb	a5,-40(a4)
      value /= base;
 8006290:	00c42603          	lw	a2,12(s0)
 8006294:	01042683          	lw	a3,16(s0)
 8006298:	fa842503          	lw	a0,-88(s0)
 800629c:	fac42583          	lw	a1,-84(s0)
 80062a0:	361020ef          	jal	ra,8008e00 <__udivdi3>
 80062a4:	00050793          	mv	a5,a0
 80062a8:	00058813          	mv	a6,a1
 80062ac:	faf42423          	sw	a5,-88(s0)
 80062b0:	fb042623          	sw	a6,-84(s0)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80062b4:	fa842783          	lw	a5,-88(s0)
 80062b8:	fac42703          	lw	a4,-84(s0)
 80062bc:	00e7e7b3          	or	a5,a5,a4
 80062c0:	00078863          	beqz	a5,80062d0 <_ntoa_long_long+0x138>
 80062c4:	fec42703          	lw	a4,-20(s0)
 80062c8:	01f00793          	li	a5,31
 80062cc:	f2e7fee3          	bleu	a4,a5,8006208 <_ntoa_long_long+0x70>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80062d0:	00c42603          	lw	a2,12(s0)
 80062d4:	fa744683          	lbu	a3,-89(s0)
 80062d8:	fc840713          	addi	a4,s0,-56
 80062dc:	01c42783          	lw	a5,28(s0)
 80062e0:	00f12423          	sw	a5,8(sp)
 80062e4:	01842783          	lw	a5,24(s0)
 80062e8:	00f12223          	sw	a5,4(sp)
 80062ec:	01442783          	lw	a5,20(s0)
 80062f0:	00f12023          	sw	a5,0(sp)
 80062f4:	00060893          	mv	a7,a2
 80062f8:	00068813          	mv	a6,a3
 80062fc:	fec42783          	lw	a5,-20(s0)
 8006300:	fb042683          	lw	a3,-80(s0)
 8006304:	fb442603          	lw	a2,-76(s0)
 8006308:	fb842583          	lw	a1,-72(s0)
 800630c:	fbc42503          	lw	a0,-68(s0)
 8006310:	a39ff0ef          	jal	ra,8005d48 <_ntoa_format>
 8006314:	00050793          	mv	a5,a0
}
 8006318:	00078513          	mv	a0,a5
 800631c:	06c12083          	lw	ra,108(sp)
 8006320:	06812403          	lw	s0,104(sp)
 8006324:	08010113          	addi	sp,sp,128
 8006328:	00008067          	ret

0800632c <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800632c:	f7010113          	addi	sp,sp,-144
 8006330:	08112623          	sw	ra,140(sp)
 8006334:	08812423          	sw	s0,136(sp)
 8006338:	09010413          	addi	s0,sp,144
 800633c:	f8a42e23          	sw	a0,-100(s0)
 8006340:	f8b42c23          	sw	a1,-104(s0)
 8006344:	f8c42a23          	sw	a2,-108(s0)
 8006348:	f8d42823          	sw	a3,-112(s0)
 800634c:	f8a43427          	fsd	fa0,-120(s0)
 8006350:	f8e42223          	sw	a4,-124(s0)
 8006354:	f8f42023          	sw	a5,-128(s0)
 8006358:	f7042e23          	sw	a6,-132(s0)
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800635c:	fe042623          	sw	zero,-20(s0)
  double diff = 0.0;
 8006360:	fc042823          	sw	zero,-48(s0)
 8006364:	fc042a23          	sw	zero,-44(s0)

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8006368:	f8843707          	fld	fa4,-120(s0)
 800636c:	f8843787          	fld	fa5,-120(s0)
 8006370:	a2f727d3          	feq.d	a5,fa4,fa5
 8006374:	02079a63          	bnez	a5,80063a8 <_ftoa+0x7c>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8006378:	f7c42883          	lw	a7,-132(s0)
 800637c:	f8042803          	lw	a6,-128(s0)
 8006380:	00300793          	li	a5,3
 8006384:	0800c737          	lui	a4,0x800c
 8006388:	04070713          	addi	a4,a4,64 # 800c040 <nan+0x1a4>
 800638c:	f9042683          	lw	a3,-112(s0)
 8006390:	f9442603          	lw	a2,-108(s0)
 8006394:	f9842583          	lw	a1,-104(s0)
 8006398:	f9c42503          	lw	a0,-100(s0)
 800639c:	86dff0ef          	jal	ra,8005c08 <_out_rev>
 80063a0:	00050793          	mv	a5,a0
 80063a4:	56c0006f          	j	8006910 <_ftoa+0x5e4>
  if (value < -DBL_MAX)
 80063a8:	f8843707          	fld	fa4,-120(s0)
 80063ac:	0800c7b7          	lui	a5,0x800c
 80063b0:	2887b787          	fld	fa5,648(a5) # 800c288 <pow10.1745+0x50>
 80063b4:	a2f717d3          	flt.d	a5,fa4,fa5
 80063b8:	02078a63          	beqz	a5,80063ec <_ftoa+0xc0>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80063bc:	f7c42883          	lw	a7,-132(s0)
 80063c0:	f8042803          	lw	a6,-128(s0)
 80063c4:	00400793          	li	a5,4
 80063c8:	0800c737          	lui	a4,0x800c
 80063cc:	04470713          	addi	a4,a4,68 # 800c044 <nan+0x1a8>
 80063d0:	f9042683          	lw	a3,-112(s0)
 80063d4:	f9442603          	lw	a2,-108(s0)
 80063d8:	f9842583          	lw	a1,-104(s0)
 80063dc:	f9c42503          	lw	a0,-100(s0)
 80063e0:	829ff0ef          	jal	ra,8005c08 <_out_rev>
 80063e4:	00050793          	mv	a5,a0
 80063e8:	5280006f          	j	8006910 <_ftoa+0x5e4>
  if (value > DBL_MAX)
 80063ec:	f8843707          	fld	fa4,-120(s0)
 80063f0:	0800c7b7          	lui	a5,0x800c
 80063f4:	2907b787          	fld	fa5,656(a5) # 800c290 <pow10.1745+0x58>
 80063f8:	a2e797d3          	flt.d	a5,fa5,fa4
 80063fc:	06078063          	beqz	a5,800645c <_ftoa+0x130>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006400:	f7c42783          	lw	a5,-132(s0)
 8006404:	0047f793          	andi	a5,a5,4
 8006408:	00078863          	beqz	a5,8006418 <_ftoa+0xec>
 800640c:	0800c7b7          	lui	a5,0x800c
 8006410:	04c78713          	addi	a4,a5,76 # 800c04c <nan+0x1b0>
 8006414:	00c0006f          	j	8006420 <_ftoa+0xf4>
 8006418:	0800c7b7          	lui	a5,0x800c
 800641c:	05478713          	addi	a4,a5,84 # 800c054 <nan+0x1b8>
 8006420:	f7c42783          	lw	a5,-132(s0)
 8006424:	0047f793          	andi	a5,a5,4
 8006428:	00078663          	beqz	a5,8006434 <_ftoa+0x108>
 800642c:	00400793          	li	a5,4
 8006430:	0080006f          	j	8006438 <_ftoa+0x10c>
 8006434:	00300793          	li	a5,3
 8006438:	f7c42883          	lw	a7,-132(s0)
 800643c:	f8042803          	lw	a6,-128(s0)
 8006440:	f9042683          	lw	a3,-112(s0)
 8006444:	f9442603          	lw	a2,-108(s0)
 8006448:	f9842583          	lw	a1,-104(s0)
 800644c:	f9c42503          	lw	a0,-100(s0)
 8006450:	fb8ff0ef          	jal	ra,8005c08 <_out_rev>
 8006454:	00050793          	mv	a5,a0
 8006458:	4b80006f          	j	8006910 <_ftoa+0x5e4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800645c:	f8843707          	fld	fa4,-120(s0)
 8006460:	0800c7b7          	lui	a5,0x800c
 8006464:	2987b787          	fld	fa5,664(a5) # 800c298 <pow10.1745+0x60>
 8006468:	a2e797d3          	flt.d	a5,fa5,fa4
 800646c:	00079c63          	bnez	a5,8006484 <_ftoa+0x158>
 8006470:	f8843707          	fld	fa4,-120(s0)
 8006474:	0800c7b7          	lui	a5,0x800c
 8006478:	2a07b787          	fld	fa5,672(a5) # 800c2a0 <pow10.1745+0x68>
 800647c:	a2f717d3          	flt.d	a5,fa4,fa5
 8006480:	02078863          	beqz	a5,80064b0 <_ftoa+0x184>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006484:	f7c42803          	lw	a6,-132(s0)
 8006488:	f8042783          	lw	a5,-128(s0)
 800648c:	f8442703          	lw	a4,-124(s0)
 8006490:	f8843507          	fld	fa0,-120(s0)
 8006494:	f9042683          	lw	a3,-112(s0)
 8006498:	f9442603          	lw	a2,-108(s0)
 800649c:	f9842583          	lw	a1,-104(s0)
 80064a0:	f9c42503          	lw	a0,-100(s0)
 80064a4:	480000ef          	jal	ra,8006924 <_etoa>
 80064a8:	00050793          	mv	a5,a0
 80064ac:	4640006f          	j	8006910 <_ftoa+0x5e4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80064b0:	fe0405a3          	sb	zero,-21(s0)
  if (value < 0) {
 80064b4:	f8843787          	fld	fa5,-120(s0)
 80064b8:	d2000753          	fcvt.d.w	fa4,zero
 80064bc:	a2e797d3          	flt.d	a5,fa5,fa4
 80064c0:	00078e63          	beqz	a5,80064dc <_ftoa+0x1b0>
    negative = true;
 80064c4:	00100793          	li	a5,1
 80064c8:	fef405a3          	sb	a5,-21(s0)
    value = 0 - value;
 80064cc:	d2000753          	fcvt.d.w	fa4,zero
 80064d0:	f8843787          	fld	fa5,-120(s0)
 80064d4:	0af777d3          	fsub.d	fa5,fa4,fa5
 80064d8:	f8f43427          	fsd	fa5,-120(s0)
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80064dc:	f7c42783          	lw	a5,-132(s0)
 80064e0:	4007f793          	andi	a5,a5,1024
 80064e4:	02079c63          	bnez	a5,800651c <_ftoa+0x1f0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80064e8:	00600793          	li	a5,6
 80064ec:	f8f42223          	sw	a5,-124(s0)
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80064f0:	02c0006f          	j	800651c <_ftoa+0x1f0>
    buf[len++] = '0';
 80064f4:	fec42783          	lw	a5,-20(s0)
 80064f8:	00178713          	addi	a4,a5,1
 80064fc:	fee42623          	sw	a4,-20(s0)
 8006500:	ff040713          	addi	a4,s0,-16
 8006504:	00f707b3          	add	a5,a4,a5
 8006508:	03000713          	li	a4,48
 800650c:	fae78c23          	sb	a4,-72(a5)
    prec--;
 8006510:	f8442783          	lw	a5,-124(s0)
 8006514:	fff78793          	addi	a5,a5,-1
 8006518:	f8f42223          	sw	a5,-124(s0)
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800651c:	fec42703          	lw	a4,-20(s0)
 8006520:	01f00793          	li	a5,31
 8006524:	00e7e863          	bltu	a5,a4,8006534 <_ftoa+0x208>
 8006528:	f8442703          	lw	a4,-124(s0)
 800652c:	00900793          	li	a5,9
 8006530:	fce7e2e3          	bltu	a5,a4,80064f4 <_ftoa+0x1c8>
  }

  int whole = (int)value;
 8006534:	f8843787          	fld	fa5,-120(s0)
 8006538:	c20797d3          	fcvt.w.d	a5,fa5,rtz
 800653c:	fef42223          	sw	a5,-28(s0)
  double tmp = (value - whole) * pow10[prec];
 8006540:	fe442783          	lw	a5,-28(s0)
 8006544:	d20787d3          	fcvt.d.w	fa5,a5
 8006548:	f8843707          	fld	fa4,-120(s0)
 800654c:	0af77753          	fsub.d	fa4,fa4,fa5
 8006550:	0800c7b7          	lui	a5,0x800c
 8006554:	f8442703          	lw	a4,-124(s0)
 8006558:	00371713          	slli	a4,a4,0x3
 800655c:	23878793          	addi	a5,a5,568 # 800c238 <pow10.1745>
 8006560:	00f707b3          	add	a5,a4,a5
 8006564:	0007b787          	fld	fa5,0(a5)
 8006568:	12f777d3          	fmul.d	fa5,fa4,fa5
 800656c:	fcf43427          	fsd	fa5,-56(s0)
  unsigned long frac = (unsigned long)tmp;
 8006570:	fc843787          	fld	fa5,-56(s0)
 8006574:	c21797d3          	fcvt.wu.d	a5,fa5,rtz
 8006578:	fef42023          	sw	a5,-32(s0)
  diff = tmp - frac;
 800657c:	fe042783          	lw	a5,-32(s0)
 8006580:	d21787d3          	fcvt.d.wu	fa5,a5
 8006584:	fc843707          	fld	fa4,-56(s0)
 8006588:	0af777d3          	fsub.d	fa5,fa4,fa5
 800658c:	fcf43827          	fsd	fa5,-48(s0)

  if (diff > 0.5) {
 8006590:	fd043707          	fld	fa4,-48(s0)
 8006594:	0800c7b7          	lui	a5,0x800c
 8006598:	2a87b787          	fld	fa5,680(a5) # 800c2a8 <pow10.1745+0x70>
 800659c:	a2e797d3          	flt.d	a5,fa5,fa4
 80065a0:	04078663          	beqz	a5,80065ec <_ftoa+0x2c0>
    ++frac;
 80065a4:	fe042783          	lw	a5,-32(s0)
 80065a8:	00178793          	addi	a5,a5,1
 80065ac:	fef42023          	sw	a5,-32(s0)
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80065b0:	fe042783          	lw	a5,-32(s0)
 80065b4:	d2178753          	fcvt.d.wu	fa4,a5
 80065b8:	0800c7b7          	lui	a5,0x800c
 80065bc:	f8442703          	lw	a4,-124(s0)
 80065c0:	00371713          	slli	a4,a4,0x3
 80065c4:	23878793          	addi	a5,a5,568 # 800c238 <pow10.1745>
 80065c8:	00f707b3          	add	a5,a4,a5
 80065cc:	0007b787          	fld	fa5,0(a5)
 80065d0:	a2e787d3          	fle.d	a5,fa5,fa4
 80065d4:	04078663          	beqz	a5,8006620 <_ftoa+0x2f4>
      frac = 0;
 80065d8:	fe042023          	sw	zero,-32(s0)
      ++whole;
 80065dc:	fe442783          	lw	a5,-28(s0)
 80065e0:	00178793          	addi	a5,a5,1
 80065e4:	fef42223          	sw	a5,-28(s0)
 80065e8:	0380006f          	j	8006620 <_ftoa+0x2f4>
    }
  }
  else if (diff < 0.5) {
 80065ec:	fd043707          	fld	fa4,-48(s0)
 80065f0:	0800c7b7          	lui	a5,0x800c
 80065f4:	2a87b787          	fld	fa5,680(a5) # 800c2a8 <pow10.1745+0x70>
 80065f8:	a2f717d3          	flt.d	a5,fa4,fa5
 80065fc:	02079263          	bnez	a5,8006620 <_ftoa+0x2f4>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8006600:	fe042783          	lw	a5,-32(s0)
 8006604:	00078863          	beqz	a5,8006614 <_ftoa+0x2e8>
 8006608:	fe042783          	lw	a5,-32(s0)
 800660c:	0017f793          	andi	a5,a5,1
 8006610:	00078863          	beqz	a5,8006620 <_ftoa+0x2f4>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8006614:	fe042783          	lw	a5,-32(s0)
 8006618:	00178793          	addi	a5,a5,1
 800661c:	fef42023          	sw	a5,-32(s0)
  }

  if (prec == 0U) {
 8006620:	f8442783          	lw	a5,-124(s0)
 8006624:	06079663          	bnez	a5,8006690 <_ftoa+0x364>
    diff = value - (double)whole;
 8006628:	fe442783          	lw	a5,-28(s0)
 800662c:	d20787d3          	fcvt.d.w	fa5,a5
 8006630:	f8843707          	fld	fa4,-120(s0)
 8006634:	0af777d3          	fsub.d	fa5,fa4,fa5
 8006638:	fcf43827          	fsd	fa5,-48(s0)
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800663c:	fd043707          	fld	fa4,-48(s0)
 8006640:	0800c7b7          	lui	a5,0x800c
 8006644:	2a87b787          	fld	fa5,680(a5) # 800c2a8 <pow10.1745+0x70>
 8006648:	a2f717d3          	flt.d	a5,fa4,fa5
 800664c:	00f037b3          	snez	a5,a5
 8006650:	0ff7f793          	andi	a5,a5,255
 8006654:	0017c793          	xori	a5,a5,1
 8006658:	0ff7f793          	andi	a5,a5,255
 800665c:	00079c63          	bnez	a5,8006674 <_ftoa+0x348>
 8006660:	fd043707          	fld	fa4,-48(s0)
 8006664:	0800c7b7          	lui	a5,0x800c
 8006668:	2a87b787          	fld	fa5,680(a5) # 800c2a8 <pow10.1745+0x70>
 800666c:	a2e797d3          	flt.d	a5,fa5,fa4
 8006670:	10078463          	beqz	a5,8006778 <_ftoa+0x44c>
 8006674:	fe442783          	lw	a5,-28(s0)
 8006678:	0017f793          	andi	a5,a5,1
 800667c:	14078c63          	beqz	a5,80067d4 <_ftoa+0x4a8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8006680:	fe442783          	lw	a5,-28(s0)
 8006684:	00178793          	addi	a5,a5,1
 8006688:	fef42223          	sw	a5,-28(s0)
 800668c:	1480006f          	j	80067d4 <_ftoa+0x4a8>
    }
  }
  else {
    unsigned int count = prec;
 8006690:	f8442783          	lw	a5,-124(s0)
 8006694:	fcf42e23          	sw	a5,-36(s0)
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006698:	0680006f          	j	8006700 <_ftoa+0x3d4>
      --count;
 800669c:	fdc42783          	lw	a5,-36(s0)
 80066a0:	fff78793          	addi	a5,a5,-1
 80066a4:	fcf42e23          	sw	a5,-36(s0)
      buf[len++] = (char)(48U + (frac % 10U));
 80066a8:	fe042783          	lw	a5,-32(s0)
 80066ac:	00a00593          	li	a1,10
 80066b0:	00078513          	mv	a0,a5
 80066b4:	3c0030ef          	jal	ra,8009a74 <__umodsi3>
 80066b8:	00050793          	mv	a5,a0
 80066bc:	0ff7f713          	andi	a4,a5,255
 80066c0:	fec42783          	lw	a5,-20(s0)
 80066c4:	00178693          	addi	a3,a5,1
 80066c8:	fed42623          	sw	a3,-20(s0)
 80066cc:	03070713          	addi	a4,a4,48
 80066d0:	0ff77713          	andi	a4,a4,255
 80066d4:	ff040693          	addi	a3,s0,-16
 80066d8:	00f687b3          	add	a5,a3,a5
 80066dc:	fae78c23          	sb	a4,-72(a5)
      if (!(frac /= 10U)) {
 80066e0:	fe042783          	lw	a5,-32(s0)
 80066e4:	00a00593          	li	a1,10
 80066e8:	00078513          	mv	a0,a5
 80066ec:	340030ef          	jal	ra,8009a2c <__udivsi3>
 80066f0:	00050793          	mv	a5,a0
 80066f4:	fef42023          	sw	a5,-32(s0)
 80066f8:	fe042783          	lw	a5,-32(s0)
 80066fc:	00078a63          	beqz	a5,8006710 <_ftoa+0x3e4>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006700:	fec42703          	lw	a4,-20(s0)
 8006704:	01f00793          	li	a5,31
 8006708:	f8e7fae3          	bleu	a4,a5,800669c <_ftoa+0x370>
 800670c:	0280006f          	j	8006734 <_ftoa+0x408>
        break;
 8006710:	00000013          	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006714:	0200006f          	j	8006734 <_ftoa+0x408>
      buf[len++] = '0';
 8006718:	fec42783          	lw	a5,-20(s0)
 800671c:	00178713          	addi	a4,a5,1
 8006720:	fee42623          	sw	a4,-20(s0)
 8006724:	ff040713          	addi	a4,s0,-16
 8006728:	00f707b3          	add	a5,a4,a5
 800672c:	03000713          	li	a4,48
 8006730:	fae78c23          	sb	a4,-72(a5)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006734:	fec42703          	lw	a4,-20(s0)
 8006738:	01f00793          	li	a5,31
 800673c:	00e7ea63          	bltu	a5,a4,8006750 <_ftoa+0x424>
 8006740:	fdc42783          	lw	a5,-36(s0)
 8006744:	fff78713          	addi	a4,a5,-1
 8006748:	fce42e23          	sw	a4,-36(s0)
 800674c:	fc0796e3          	bnez	a5,8006718 <_ftoa+0x3ec>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006750:	fec42703          	lw	a4,-20(s0)
 8006754:	01f00793          	li	a5,31
 8006758:	06e7ee63          	bltu	a5,a4,80067d4 <_ftoa+0x4a8>
      // add decimal
      buf[len++] = '.';
 800675c:	fec42783          	lw	a5,-20(s0)
 8006760:	00178713          	addi	a4,a5,1
 8006764:	fee42623          	sw	a4,-20(s0)
 8006768:	ff040713          	addi	a4,s0,-16
 800676c:	00f707b3          	add	a5,a4,a5
 8006770:	02e00713          	li	a4,46
 8006774:	fae78c23          	sb	a4,-72(a5)
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006778:	05c0006f          	j	80067d4 <_ftoa+0x4a8>
    buf[len++] = (char)(48 + (whole % 10));
 800677c:	fe442783          	lw	a5,-28(s0)
 8006780:	00a00593          	li	a1,10
 8006784:	00078513          	mv	a0,a5
 8006788:	320030ef          	jal	ra,8009aa8 <__modsi3>
 800678c:	00050793          	mv	a5,a0
 8006790:	0ff7f713          	andi	a4,a5,255
 8006794:	fec42783          	lw	a5,-20(s0)
 8006798:	00178693          	addi	a3,a5,1
 800679c:	fed42623          	sw	a3,-20(s0)
 80067a0:	03070713          	addi	a4,a4,48
 80067a4:	0ff77713          	andi	a4,a4,255
 80067a8:	ff040693          	addi	a3,s0,-16
 80067ac:	00f687b3          	add	a5,a3,a5
 80067b0:	fae78c23          	sb	a4,-72(a5)
    if (!(whole /= 10)) {
 80067b4:	fe442783          	lw	a5,-28(s0)
 80067b8:	00a00593          	li	a1,10
 80067bc:	00078513          	mv	a0,a5
 80067c0:	264030ef          	jal	ra,8009a24 <__divsi3>
 80067c4:	00050793          	mv	a5,a0
 80067c8:	fef42223          	sw	a5,-28(s0)
 80067cc:	fe442783          	lw	a5,-28(s0)
 80067d0:	00078a63          	beqz	a5,80067e4 <_ftoa+0x4b8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80067d4:	fec42703          	lw	a4,-20(s0)
 80067d8:	01f00793          	li	a5,31
 80067dc:	fae7f0e3          	bleu	a4,a5,800677c <_ftoa+0x450>
 80067e0:	0080006f          	j	80067e8 <_ftoa+0x4bc>
      break;
 80067e4:	00000013          	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80067e8:	f7c42783          	lw	a5,-132(s0)
 80067ec:	0027f793          	andi	a5,a5,2
 80067f0:	06079863          	bnez	a5,8006860 <_ftoa+0x534>
 80067f4:	f7c42783          	lw	a5,-132(s0)
 80067f8:	0017f793          	andi	a5,a5,1
 80067fc:	06078263          	beqz	a5,8006860 <_ftoa+0x534>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006800:	f8042783          	lw	a5,-128(s0)
 8006804:	04078263          	beqz	a5,8006848 <_ftoa+0x51c>
 8006808:	feb44783          	lbu	a5,-21(s0)
 800680c:	00079863          	bnez	a5,800681c <_ftoa+0x4f0>
 8006810:	f7c42783          	lw	a5,-132(s0)
 8006814:	00c7f793          	andi	a5,a5,12
 8006818:	02078863          	beqz	a5,8006848 <_ftoa+0x51c>
      width--;
 800681c:	f8042783          	lw	a5,-128(s0)
 8006820:	fff78793          	addi	a5,a5,-1
 8006824:	f8f42023          	sw	a5,-128(s0)
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006828:	0200006f          	j	8006848 <_ftoa+0x51c>
      buf[len++] = '0';
 800682c:	fec42783          	lw	a5,-20(s0)
 8006830:	00178713          	addi	a4,a5,1
 8006834:	fee42623          	sw	a4,-20(s0)
 8006838:	ff040713          	addi	a4,s0,-16
 800683c:	00f707b3          	add	a5,a4,a5
 8006840:	03000713          	li	a4,48
 8006844:	fae78c23          	sb	a4,-72(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006848:	fec42703          	lw	a4,-20(s0)
 800684c:	f8042783          	lw	a5,-128(s0)
 8006850:	00f77863          	bleu	a5,a4,8006860 <_ftoa+0x534>
 8006854:	fec42703          	lw	a4,-20(s0)
 8006858:	01f00793          	li	a5,31
 800685c:	fce7f8e3          	bleu	a4,a5,800682c <_ftoa+0x500>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006860:	fec42703          	lw	a4,-20(s0)
 8006864:	01f00793          	li	a5,31
 8006868:	08e7e063          	bltu	a5,a4,80068e8 <_ftoa+0x5bc>
    if (negative) {
 800686c:	feb44783          	lbu	a5,-21(s0)
 8006870:	02078263          	beqz	a5,8006894 <_ftoa+0x568>
      buf[len++] = '-';
 8006874:	fec42783          	lw	a5,-20(s0)
 8006878:	00178713          	addi	a4,a5,1
 800687c:	fee42623          	sw	a4,-20(s0)
 8006880:	ff040713          	addi	a4,s0,-16
 8006884:	00f707b3          	add	a5,a4,a5
 8006888:	02d00713          	li	a4,45
 800688c:	fae78c23          	sb	a4,-72(a5)
 8006890:	0580006f          	j	80068e8 <_ftoa+0x5bc>
    }
    else if (flags & FLAGS_PLUS) {
 8006894:	f7c42783          	lw	a5,-132(s0)
 8006898:	0047f793          	andi	a5,a5,4
 800689c:	02078263          	beqz	a5,80068c0 <_ftoa+0x594>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80068a0:	fec42783          	lw	a5,-20(s0)
 80068a4:	00178713          	addi	a4,a5,1
 80068a8:	fee42623          	sw	a4,-20(s0)
 80068ac:	ff040713          	addi	a4,s0,-16
 80068b0:	00f707b3          	add	a5,a4,a5
 80068b4:	02b00713          	li	a4,43
 80068b8:	fae78c23          	sb	a4,-72(a5)
 80068bc:	02c0006f          	j	80068e8 <_ftoa+0x5bc>
    }
    else if (flags & FLAGS_SPACE) {
 80068c0:	f7c42783          	lw	a5,-132(s0)
 80068c4:	0087f793          	andi	a5,a5,8
 80068c8:	02078063          	beqz	a5,80068e8 <_ftoa+0x5bc>
      buf[len++] = ' ';
 80068cc:	fec42783          	lw	a5,-20(s0)
 80068d0:	00178713          	addi	a4,a5,1
 80068d4:	fee42623          	sw	a4,-20(s0)
 80068d8:	ff040713          	addi	a4,s0,-16
 80068dc:	00f707b3          	add	a5,a4,a5
 80068e0:	02000713          	li	a4,32
 80068e4:	fae78c23          	sb	a4,-72(a5)
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80068e8:	fa840713          	addi	a4,s0,-88
 80068ec:	f7c42883          	lw	a7,-132(s0)
 80068f0:	f8042803          	lw	a6,-128(s0)
 80068f4:	fec42783          	lw	a5,-20(s0)
 80068f8:	f9042683          	lw	a3,-112(s0)
 80068fc:	f9442603          	lw	a2,-108(s0)
 8006900:	f9842583          	lw	a1,-104(s0)
 8006904:	f9c42503          	lw	a0,-100(s0)
 8006908:	b00ff0ef          	jal	ra,8005c08 <_out_rev>
 800690c:	00050793          	mv	a5,a0
}
 8006910:	00078513          	mv	a0,a5
 8006914:	08c12083          	lw	ra,140(sp)
 8006918:	08812403          	lw	s0,136(sp)
 800691c:	09010113          	addi	sp,sp,144
 8006920:	00008067          	ret

08006924 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006924:	f6010113          	addi	sp,sp,-160
 8006928:	08112e23          	sw	ra,156(sp)
 800692c:	08812c23          	sw	s0,152(sp)
 8006930:	09212a23          	sw	s2,148(sp)
 8006934:	09312823          	sw	s3,144(sp)
 8006938:	09412623          	sw	s4,140(sp)
 800693c:	09512423          	sw	s5,136(sp)
 8006940:	0a010413          	addi	s0,sp,160
 8006944:	f8a42e23          	sw	a0,-100(s0)
 8006948:	f8b42c23          	sw	a1,-104(s0)
 800694c:	f8c42a23          	sw	a2,-108(s0)
 8006950:	f8d42823          	sw	a3,-112(s0)
 8006954:	f8a43427          	fsd	fa0,-120(s0)
 8006958:	f8e42223          	sw	a4,-124(s0)
 800695c:	f8f42023          	sw	a5,-128(s0)
 8006960:	f7042e23          	sw	a6,-132(s0)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8006964:	f8843707          	fld	fa4,-120(s0)
 8006968:	f8843787          	fld	fa5,-120(s0)
 800696c:	a2f727d3          	feq.d	a5,fa4,fa5
 8006970:	02078663          	beqz	a5,800699c <_etoa+0x78>
 8006974:	f8843707          	fld	fa4,-120(s0)
 8006978:	0800c7b7          	lui	a5,0x800c
 800697c:	2907b787          	fld	fa5,656(a5) # 800c290 <pow10.1745+0x58>
 8006980:	a2e797d3          	flt.d	a5,fa5,fa4
 8006984:	00079c63          	bnez	a5,800699c <_etoa+0x78>
 8006988:	f8843707          	fld	fa4,-120(s0)
 800698c:	0800c7b7          	lui	a5,0x800c
 8006990:	2887b787          	fld	fa5,648(a5) # 800c288 <pow10.1745+0x50>
 8006994:	a2f717d3          	flt.d	a5,fa4,fa5
 8006998:	02078863          	beqz	a5,80069c8 <_etoa+0xa4>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800699c:	f7c42803          	lw	a6,-132(s0)
 80069a0:	f8042783          	lw	a5,-128(s0)
 80069a4:	f8442703          	lw	a4,-124(s0)
 80069a8:	f8843507          	fld	fa0,-120(s0)
 80069ac:	f9042683          	lw	a3,-112(s0)
 80069b0:	f9442603          	lw	a2,-108(s0)
 80069b4:	f9842583          	lw	a1,-104(s0)
 80069b8:	f9c42503          	lw	a0,-100(s0)
 80069bc:	971ff0ef          	jal	ra,800632c <_ftoa>
 80069c0:	00050793          	mv	a5,a0
 80069c4:	4700006f          	j	8006e34 <_etoa+0x510>
  }

  // determine the sign
  const bool negative = value < 0;
 80069c8:	f8843787          	fld	fa5,-120(s0)
 80069cc:	d2000753          	fcvt.d.w	fa4,zero
 80069d0:	a2e797d3          	flt.d	a5,fa5,fa4
 80069d4:	00f037b3          	snez	a5,a5
 80069d8:	fcf409a3          	sb	a5,-45(s0)
  if (negative) {
 80069dc:	fd344783          	lbu	a5,-45(s0)
 80069e0:	00078863          	beqz	a5,80069f0 <_etoa+0xcc>
    value = -value;
 80069e4:	f8843787          	fld	fa5,-120(s0)
 80069e8:	22f797d3          	fneg.d	fa5,fa5
 80069ec:	f8f43427          	fsd	fa5,-120(s0)
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80069f0:	f7c42783          	lw	a5,-132(s0)
 80069f4:	4007f793          	andi	a5,a5,1024
 80069f8:	00079663          	bnez	a5,8006a04 <_etoa+0xe0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80069fc:	00600793          	li	a5,6
 8006a00:	f8f42223          	sw	a5,-124(s0)
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8006a04:	f8843787          	fld	fa5,-120(s0)
 8006a08:	faf43427          	fsd	fa5,-88(s0)
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8006a0c:	fa842783          	lw	a5,-88(s0)
 8006a10:	fac42803          	lw	a6,-84(s0)
 8006a14:	01485a13          	srli	s4,a6,0x14
 8006a18:	00000a93          	li	s5,0
 8006a1c:	000a0793          	mv	a5,s4
 8006a20:	7ff7f793          	andi	a5,a5,2047
 8006a24:	c0178793          	addi	a5,a5,-1023
 8006a28:	fcf42623          	sw	a5,-52(s0)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8006a2c:	fa842783          	lw	a5,-88(s0)
 8006a30:	fac42803          	lw	a6,-84(s0)
 8006a34:	fff7f313          	andi	t1,a5,-1
 8006a38:	00100737          	lui	a4,0x100
 8006a3c:	fff70713          	addi	a4,a4,-1 # fffff <_start-0x7f04001>
 8006a40:	00e873b3          	and	t2,a6,a4
 8006a44:	00036e13          	ori	t3,t1,0
 8006a48:	3ff007b7          	lui	a5,0x3ff00
 8006a4c:	00f3eeb3          	or	t4,t2,a5
 8006a50:	fbc42423          	sw	t3,-88(s0)
 8006a54:	fbd42623          	sw	t4,-84(s0)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8006a58:	fcc42783          	lw	a5,-52(s0)
 8006a5c:	d2078753          	fcvt.d.w	fa4,a5
 8006a60:	0800c7b7          	lui	a5,0x800c
 8006a64:	2b07b787          	fld	fa5,688(a5) # 800c2b0 <pow10.1745+0x78>
 8006a68:	12f77753          	fmul.d	fa4,fa4,fa5
 8006a6c:	0800c7b7          	lui	a5,0x800c
 8006a70:	2b87b787          	fld	fa5,696(a5) # 800c2b8 <pow10.1745+0x80>
 8006a74:	02f77753          	fadd.d	fa4,fa4,fa5
 8006a78:	fa843687          	fld	fa3,-88(s0)
 8006a7c:	0800c7b7          	lui	a5,0x800c
 8006a80:	2c07b787          	fld	fa5,704(a5) # 800c2c0 <pow10.1745+0x88>
 8006a84:	0af6f6d3          	fsub.d	fa3,fa3,fa5
 8006a88:	0800c7b7          	lui	a5,0x800c
 8006a8c:	2c87b787          	fld	fa5,712(a5) # 800c2c8 <pow10.1745+0x90>
 8006a90:	12f6f7d3          	fmul.d	fa5,fa3,fa5
 8006a94:	02f777d3          	fadd.d	fa5,fa4,fa5
 8006a98:	c20797d3          	fcvt.w.d	a5,fa5,rtz
 8006a9c:	fcf42e23          	sw	a5,-36(s0)
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8006aa0:	fdc42783          	lw	a5,-36(s0)
 8006aa4:	d2078753          	fcvt.d.w	fa4,a5
 8006aa8:	0800c7b7          	lui	a5,0x800c
 8006aac:	2d07b787          	fld	fa5,720(a5) # 800c2d0 <pow10.1745+0x98>
 8006ab0:	12f77753          	fmul.d	fa4,fa4,fa5
 8006ab4:	0800c7b7          	lui	a5,0x800c
 8006ab8:	2a87b787          	fld	fa5,680(a5) # 800c2a8 <pow10.1745+0x70>
 8006abc:	02f777d3          	fadd.d	fa5,fa4,fa5
 8006ac0:	c20797d3          	fcvt.w.d	a5,fa5,rtz
 8006ac4:	fcf42623          	sw	a5,-52(s0)
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8006ac8:	fdc42783          	lw	a5,-36(s0)
 8006acc:	d2078753          	fcvt.d.w	fa4,a5
 8006ad0:	0800c7b7          	lui	a5,0x800c
 8006ad4:	2d87b787          	fld	fa5,728(a5) # 800c2d8 <pow10.1745+0xa0>
 8006ad8:	12f77753          	fmul.d	fa4,fa4,fa5
 8006adc:	fcc42783          	lw	a5,-52(s0)
 8006ae0:	d20786d3          	fcvt.d.w	fa3,a5
 8006ae4:	0800c7b7          	lui	a5,0x800c
 8006ae8:	2e07b787          	fld	fa5,736(a5) # 800c2e0 <pow10.1745+0xa8>
 8006aec:	12f6f7d3          	fmul.d	fa5,fa3,fa5
 8006af0:	0af777d3          	fsub.d	fa5,fa4,fa5
 8006af4:	fcf43027          	fsd	fa5,-64(s0)
  const double z2 = z * z;
 8006af8:	fc043707          	fld	fa4,-64(s0)
 8006afc:	fc043787          	fld	fa5,-64(s0)
 8006b00:	12f777d3          	fmul.d	fa5,fa4,fa5
 8006b04:	faf43c27          	fsd	fa5,-72(s0)
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8006b08:	fcc42783          	lw	a5,-52(s0)
 8006b0c:	3ff78793          	addi	a5,a5,1023
 8006b10:	00078913          	mv	s2,a5
 8006b14:	41f7d793          	srai	a5,a5,0x1f
 8006b18:	00078993          	mv	s3,a5
 8006b1c:	01491f93          	slli	t6,s2,0x14
 8006b20:	00000f13          	li	t5,0
 8006b24:	fbe42423          	sw	t5,-88(s0)
 8006b28:	fbf42623          	sw	t6,-84(s0)
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8006b2c:	fa843707          	fld	fa4,-88(s0)
 8006b30:	fc043787          	fld	fa5,-64(s0)
 8006b34:	02f7f6d3          	fadd.d	fa3,fa5,fa5
 8006b38:	0800c7b7          	lui	a5,0x800c
 8006b3c:	2e87b607          	fld	fa2,744(a5) # 800c2e8 <pow10.1745+0xb0>
 8006b40:	fc043787          	fld	fa5,-64(s0)
 8006b44:	0af67653          	fsub.d	fa2,fa2,fa5
 8006b48:	fb843587          	fld	fa1,-72(s0)
 8006b4c:	0800c7b7          	lui	a5,0x800c
 8006b50:	2f07b787          	fld	fa5,752(a5) # 800c2f0 <pow10.1745+0xb8>
 8006b54:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
 8006b58:	0800c7b7          	lui	a5,0x800c
 8006b5c:	2f87b787          	fld	fa5,760(a5) # 800c2f8 <pow10.1745+0xc0>
 8006b60:	02f5f7d3          	fadd.d	fa5,fa1,fa5
 8006b64:	fb843587          	fld	fa1,-72(s0)
 8006b68:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
 8006b6c:	0800c7b7          	lui	a5,0x800c
 8006b70:	3007b787          	fld	fa5,768(a5) # 800c300 <pow10.1745+0xc8>
 8006b74:	02f5f7d3          	fadd.d	fa5,fa1,fa5
 8006b78:	fb843587          	fld	fa1,-72(s0)
 8006b7c:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
 8006b80:	02f677d3          	fadd.d	fa5,fa2,fa5
 8006b84:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
 8006b88:	0800c7b7          	lui	a5,0x800c
 8006b8c:	3087b787          	fld	fa5,776(a5) # 800c308 <pow10.1745+0xd0>
 8006b90:	02f6f7d3          	fadd.d	fa5,fa3,fa5
 8006b94:	12f777d3          	fmul.d	fa5,fa4,fa5
 8006b98:	faf43427          	fsd	fa5,-88(s0)
  // correct for rounding errors
  if (value < conv.F) {
 8006b9c:	fa843787          	fld	fa5,-88(s0)
 8006ba0:	f8843707          	fld	fa4,-120(s0)
 8006ba4:	a2f717d3          	flt.d	a5,fa4,fa5
 8006ba8:	02078263          	beqz	a5,8006bcc <_etoa+0x2a8>
    expval--;
 8006bac:	fdc42783          	lw	a5,-36(s0)
 8006bb0:	fff78793          	addi	a5,a5,-1
 8006bb4:	fcf42e23          	sw	a5,-36(s0)
    conv.F /= 10;
 8006bb8:	fa843707          	fld	fa4,-88(s0)
 8006bbc:	0800c7b7          	lui	a5,0x800c
 8006bc0:	2f87b787          	fld	fa5,760(a5) # 800c2f8 <pow10.1745+0xc0>
 8006bc4:	1af777d3          	fdiv.d	fa5,fa4,fa5
 8006bc8:	faf43427          	fsd	fa5,-88(s0)
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8006bcc:	fdc42703          	lw	a4,-36(s0)
 8006bd0:	06300793          	li	a5,99
 8006bd4:	00e7cc63          	blt	a5,a4,8006bec <_etoa+0x2c8>
 8006bd8:	fdc42703          	lw	a4,-36(s0)
 8006bdc:	f9d00793          	li	a5,-99
 8006be0:	00f74663          	blt	a4,a5,8006bec <_etoa+0x2c8>
 8006be4:	00400793          	li	a5,4
 8006be8:	0080006f          	j	8006bf0 <_etoa+0x2cc>
 8006bec:	00500793          	li	a5,5
 8006bf0:	fcf42c23          	sw	a5,-40(s0)

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8006bf4:	f7c42703          	lw	a4,-132(s0)
 8006bf8:	000017b7          	lui	a5,0x1
 8006bfc:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x8003800>
 8006c00:	00f777b3          	and	a5,a4,a5
 8006c04:	08078663          	beqz	a5,8006c90 <_etoa+0x36c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8006c08:	f8843707          	fld	fa4,-120(s0)
 8006c0c:	0800c7b7          	lui	a5,0x800c
 8006c10:	3107b787          	fld	fa5,784(a5) # 800c310 <pow10.1745+0xd8>
 8006c14:	a2e787d3          	fle.d	a5,fa5,fa4
 8006c18:	04078c63          	beqz	a5,8006c70 <_etoa+0x34c>
 8006c1c:	f8843707          	fld	fa4,-120(s0)
 8006c20:	0800c7b7          	lui	a5,0x800c
 8006c24:	3187b787          	fld	fa5,792(a5) # 800c318 <pow10.1745+0xe0>
 8006c28:	a2f717d3          	flt.d	a5,fa4,fa5
 8006c2c:	04078263          	beqz	a5,8006c70 <_etoa+0x34c>
      if ((int)prec > expval) {
 8006c30:	f8442783          	lw	a5,-124(s0)
 8006c34:	fdc42703          	lw	a4,-36(s0)
 8006c38:	00f75e63          	ble	a5,a4,8006c54 <_etoa+0x330>
        prec = (unsigned)((int)prec - expval - 1);
 8006c3c:	f8442703          	lw	a4,-124(s0)
 8006c40:	fdc42783          	lw	a5,-36(s0)
 8006c44:	40f707b3          	sub	a5,a4,a5
 8006c48:	fff78793          	addi	a5,a5,-1
 8006c4c:	f8f42223          	sw	a5,-124(s0)
 8006c50:	0080006f          	j	8006c58 <_etoa+0x334>
      }
      else {
        prec = 0;
 8006c54:	f8042223          	sw	zero,-124(s0)
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8006c58:	f7c42783          	lw	a5,-132(s0)
 8006c5c:	4007e793          	ori	a5,a5,1024
 8006c60:	f6f42e23          	sw	a5,-132(s0)
      // no characters in exponent
      minwidth = 0U;
 8006c64:	fc042c23          	sw	zero,-40(s0)
      expval   = 0;
 8006c68:	fc042e23          	sw	zero,-36(s0)
 8006c6c:	0240006f          	j	8006c90 <_etoa+0x36c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8006c70:	f8442783          	lw	a5,-124(s0)
 8006c74:	00078e63          	beqz	a5,8006c90 <_etoa+0x36c>
 8006c78:	f7c42783          	lw	a5,-132(s0)
 8006c7c:	4007f793          	andi	a5,a5,1024
 8006c80:	00078863          	beqz	a5,8006c90 <_etoa+0x36c>
        --prec;
 8006c84:	f8442783          	lw	a5,-124(s0)
 8006c88:	fff78793          	addi	a5,a5,-1
 8006c8c:	f8f42223          	sw	a5,-124(s0)
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8006c90:	f8042783          	lw	a5,-128(s0)
 8006c94:	fcf42a23          	sw	a5,-44(s0)
  if (width > minwidth) {
 8006c98:	f8042703          	lw	a4,-128(s0)
 8006c9c:	fd842783          	lw	a5,-40(s0)
 8006ca0:	00e7fc63          	bleu	a4,a5,8006cb8 <_etoa+0x394>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8006ca4:	fd442703          	lw	a4,-44(s0)
 8006ca8:	fd842783          	lw	a5,-40(s0)
 8006cac:	40f707b3          	sub	a5,a4,a5
 8006cb0:	fcf42a23          	sw	a5,-44(s0)
 8006cb4:	0080006f          	j	8006cbc <_etoa+0x398>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8006cb8:	fc042a23          	sw	zero,-44(s0)
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8006cbc:	f7c42783          	lw	a5,-132(s0)
 8006cc0:	0027f793          	andi	a5,a5,2
 8006cc4:	00078863          	beqz	a5,8006cd4 <_etoa+0x3b0>
 8006cc8:	fd842783          	lw	a5,-40(s0)
 8006ccc:	00078463          	beqz	a5,8006cd4 <_etoa+0x3b0>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8006cd0:	fc042a23          	sw	zero,-44(s0)
  }

  // rescale the float value
  if (expval) {
 8006cd4:	fdc42783          	lw	a5,-36(s0)
 8006cd8:	00078a63          	beqz	a5,8006cec <_etoa+0x3c8>
    value /= conv.F;
 8006cdc:	fa843787          	fld	fa5,-88(s0)
 8006ce0:	f8843707          	fld	fa4,-120(s0)
 8006ce4:	1af777d3          	fdiv.d	fa5,fa4,fa5
 8006ce8:	f8f43427          	fsd	fa5,-120(s0)
  }

  // output the floating part
  const size_t start_idx = idx;
 8006cec:	f9442783          	lw	a5,-108(s0)
 8006cf0:	faf42a23          	sw	a5,-76(s0)
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8006cf4:	fd344783          	lbu	a5,-45(s0)
 8006cf8:	00078863          	beqz	a5,8006d08 <_etoa+0x3e4>
 8006cfc:	f8843787          	fld	fa5,-120(s0)
 8006d00:	22f797d3          	fneg.d	fa5,fa5
 8006d04:	0080006f          	j	8006d0c <_etoa+0x3e8>
 8006d08:	f8843787          	fld	fa5,-120(s0)
 8006d0c:	f7c42703          	lw	a4,-132(s0)
 8006d10:	fffff7b7          	lui	a5,0xfffff
 8006d14:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__BSS_END__+0xf7ff1e43>
 8006d18:	00f777b3          	and	a5,a4,a5
 8006d1c:	00078813          	mv	a6,a5
 8006d20:	fd442783          	lw	a5,-44(s0)
 8006d24:	f8442703          	lw	a4,-124(s0)
 8006d28:	22f78553          	fmv.d	fa0,fa5
 8006d2c:	f9042683          	lw	a3,-112(s0)
 8006d30:	f9442603          	lw	a2,-108(s0)
 8006d34:	f9842583          	lw	a1,-104(s0)
 8006d38:	f9c42503          	lw	a0,-100(s0)
 8006d3c:	df0ff0ef          	jal	ra,800632c <_ftoa>
 8006d40:	f8a42a23          	sw	a0,-108(s0)

  // output the exponent part
  if (minwidth) {
 8006d44:	fd842783          	lw	a5,-40(s0)
 8006d48:	0e078463          	beqz	a5,8006e30 <_etoa+0x50c>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8006d4c:	f7c42783          	lw	a5,-132(s0)
 8006d50:	0207f793          	andi	a5,a5,32
 8006d54:	00078663          	beqz	a5,8006d60 <_etoa+0x43c>
 8006d58:	04500793          	li	a5,69
 8006d5c:	0080006f          	j	8006d64 <_etoa+0x440>
 8006d60:	06500793          	li	a5,101
 8006d64:	f9442703          	lw	a4,-108(s0)
 8006d68:	00170693          	addi	a3,a4,1
 8006d6c:	f8d42a23          	sw	a3,-108(s0)
 8006d70:	f9c42803          	lw	a6,-100(s0)
 8006d74:	f9042683          	lw	a3,-112(s0)
 8006d78:	00070613          	mv	a2,a4
 8006d7c:	f9842583          	lw	a1,-104(s0)
 8006d80:	00078513          	mv	a0,a5
 8006d84:	000800e7          	jalr	a6
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8006d88:	fdc42783          	lw	a5,-36(s0)
 8006d8c:	41f7d713          	srai	a4,a5,0x1f
 8006d90:	fdc42783          	lw	a5,-36(s0)
 8006d94:	00f747b3          	xor	a5,a4,a5
 8006d98:	40e787b3          	sub	a5,a5,a4
 8006d9c:	00078613          	mv	a2,a5
 8006da0:	fdc42783          	lw	a5,-36(s0)
 8006da4:	01f7d793          	srli	a5,a5,0x1f
 8006da8:	0ff7f693          	andi	a3,a5,255
 8006dac:	fd842783          	lw	a5,-40(s0)
 8006db0:	fff78793          	addi	a5,a5,-1
 8006db4:	00500713          	li	a4,5
 8006db8:	00e12223          	sw	a4,4(sp)
 8006dbc:	00f12023          	sw	a5,0(sp)
 8006dc0:	00000893          	li	a7,0
 8006dc4:	00a00813          	li	a6,10
 8006dc8:	00068793          	mv	a5,a3
 8006dcc:	00060713          	mv	a4,a2
 8006dd0:	f9042683          	lw	a3,-112(s0)
 8006dd4:	f9442603          	lw	a2,-108(s0)
 8006dd8:	f9842583          	lw	a1,-104(s0)
 8006ddc:	f9c42503          	lw	a0,-100(s0)
 8006de0:	a64ff0ef          	jal	ra,8006044 <_ntoa_long>
 8006de4:	f8a42a23          	sw	a0,-108(s0)
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8006de8:	f7c42783          	lw	a5,-132(s0)
 8006dec:	0027f793          	andi	a5,a5,2
 8006df0:	04078063          	beqz	a5,8006e30 <_etoa+0x50c>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8006df4:	0280006f          	j	8006e1c <_etoa+0x4f8>
 8006df8:	f9442783          	lw	a5,-108(s0)
 8006dfc:	00178713          	addi	a4,a5,1
 8006e00:	f8e42a23          	sw	a4,-108(s0)
 8006e04:	f9c42703          	lw	a4,-100(s0)
 8006e08:	f9042683          	lw	a3,-112(s0)
 8006e0c:	00078613          	mv	a2,a5
 8006e10:	f9842583          	lw	a1,-104(s0)
 8006e14:	02000513          	li	a0,32
 8006e18:	000700e7          	jalr	a4
 8006e1c:	f9442703          	lw	a4,-108(s0)
 8006e20:	fb442783          	lw	a5,-76(s0)
 8006e24:	40f707b3          	sub	a5,a4,a5
 8006e28:	f8042703          	lw	a4,-128(s0)
 8006e2c:	fce7e6e3          	bltu	a5,a4,8006df8 <_etoa+0x4d4>
    }
  }
  return idx;
 8006e30:	f9442783          	lw	a5,-108(s0)
}
 8006e34:	00078513          	mv	a0,a5
 8006e38:	09c12083          	lw	ra,156(sp)
 8006e3c:	09812403          	lw	s0,152(sp)
 8006e40:	09412903          	lw	s2,148(sp)
 8006e44:	09012983          	lw	s3,144(sp)
 8006e48:	08c12a03          	lw	s4,140(sp)
 8006e4c:	08812a83          	lw	s5,136(sp)
 8006e50:	0a010113          	addi	sp,sp,160
 8006e54:	00008067          	ret

08006e58 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8006e58:	f5010113          	addi	sp,sp,-176
 8006e5c:	0a112623          	sw	ra,172(sp)
 8006e60:	0a812423          	sw	s0,168(sp)
 8006e64:	0b212223          	sw	s2,164(sp)
 8006e68:	0b312023          	sw	s3,160(sp)
 8006e6c:	09412e23          	sw	s4,156(sp)
 8006e70:	09512c23          	sw	s5,152(sp)
 8006e74:	09612a23          	sw	s6,148(sp)
 8006e78:	09712823          	sw	s7,144(sp)
 8006e7c:	09812623          	sw	s8,140(sp)
 8006e80:	09912423          	sw	s9,136(sp)
 8006e84:	09a12223          	sw	s10,132(sp)
 8006e88:	09b12023          	sw	s11,128(sp)
 8006e8c:	0b010413          	addi	s0,sp,176
 8006e90:	f6a42e23          	sw	a0,-132(s0)
 8006e94:	f6b42c23          	sw	a1,-136(s0)
 8006e98:	f6c42a23          	sw	a2,-140(s0)
 8006e9c:	f6d42823          	sw	a3,-144(s0)
 8006ea0:	f6e42623          	sw	a4,-148(s0)
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8006ea4:	fa042e23          	sw	zero,-68(s0)

  if (!buffer) {
 8006ea8:	f7842783          	lw	a5,-136(s0)
 8006eac:	4c079ce3          	bnez	a5,8007b84 <_vsnprintf+0xd2c>
    // use null output function
    out = _out_null;
 8006eb0:	080067b7          	lui	a5,0x8006
 8006eb4:	9ec78793          	addi	a5,a5,-1556 # 80059ec <_out_null>
 8006eb8:	f6f42e23          	sw	a5,-132(s0)
  }

  while (*format)
 8006ebc:	4c90006f          	j	8007b84 <_vsnprintf+0xd2c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8006ec0:	f7042783          	lw	a5,-144(s0)
 8006ec4:	0007c703          	lbu	a4,0(a5)
 8006ec8:	02500793          	li	a5,37
 8006ecc:	02f70e63          	beq	a4,a5,8006f08 <_vsnprintf+0xb0>
      // no
      out(*format, buffer, idx++, maxlen);
 8006ed0:	f7042783          	lw	a5,-144(s0)
 8006ed4:	0007c503          	lbu	a0,0(a5)
 8006ed8:	fbc42783          	lw	a5,-68(s0)
 8006edc:	00178713          	addi	a4,a5,1
 8006ee0:	fae42e23          	sw	a4,-68(s0)
 8006ee4:	f7c42703          	lw	a4,-132(s0)
 8006ee8:	f7442683          	lw	a3,-140(s0)
 8006eec:	00078613          	mv	a2,a5
 8006ef0:	f7842583          	lw	a1,-136(s0)
 8006ef4:	000700e7          	jalr	a4
      format++;
 8006ef8:	f7042783          	lw	a5,-144(s0)
 8006efc:	00178793          	addi	a5,a5,1
 8006f00:	f6f42823          	sw	a5,-144(s0)
      continue;
 8006f04:	4810006f          	j	8007b84 <_vsnprintf+0xd2c>
    }
    else {
      // yes, evaluate it
      format++;
 8006f08:	f7042783          	lw	a5,-144(s0)
 8006f0c:	00178793          	addi	a5,a5,1
 8006f10:	f6f42823          	sw	a5,-144(s0)
    }

    // evaluate flags
    flags = 0U;
 8006f14:	fc042623          	sw	zero,-52(s0)
    do {
      switch (*format) {
 8006f18:	f7042783          	lw	a5,-144(s0)
 8006f1c:	0007c783          	lbu	a5,0(a5)
 8006f20:	fe078793          	addi	a5,a5,-32
 8006f24:	01000713          	li	a4,16
 8006f28:	0cf76863          	bltu	a4,a5,8006ff8 <_vsnprintf+0x1a0>
 8006f2c:	00279713          	slli	a4,a5,0x2
 8006f30:	0800c7b7          	lui	a5,0x800c
 8006f34:	05878793          	addi	a5,a5,88 # 800c058 <nan+0x1bc>
 8006f38:	00f707b3          	add	a5,a4,a5
 8006f3c:	0007a783          	lw	a5,0(a5)
 8006f40:	00078067          	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8006f44:	fcc42783          	lw	a5,-52(s0)
 8006f48:	0017e793          	ori	a5,a5,1
 8006f4c:	fcf42623          	sw	a5,-52(s0)
 8006f50:	f7042783          	lw	a5,-144(s0)
 8006f54:	00178793          	addi	a5,a5,1
 8006f58:	f6f42823          	sw	a5,-144(s0)
 8006f5c:	00100793          	li	a5,1
 8006f60:	fcf42023          	sw	a5,-64(s0)
 8006f64:	09c0006f          	j	8007000 <_vsnprintf+0x1a8>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8006f68:	fcc42783          	lw	a5,-52(s0)
 8006f6c:	0027e793          	ori	a5,a5,2
 8006f70:	fcf42623          	sw	a5,-52(s0)
 8006f74:	f7042783          	lw	a5,-144(s0)
 8006f78:	00178793          	addi	a5,a5,1
 8006f7c:	f6f42823          	sw	a5,-144(s0)
 8006f80:	00100793          	li	a5,1
 8006f84:	fcf42023          	sw	a5,-64(s0)
 8006f88:	0780006f          	j	8007000 <_vsnprintf+0x1a8>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8006f8c:	fcc42783          	lw	a5,-52(s0)
 8006f90:	0047e793          	ori	a5,a5,4
 8006f94:	fcf42623          	sw	a5,-52(s0)
 8006f98:	f7042783          	lw	a5,-144(s0)
 8006f9c:	00178793          	addi	a5,a5,1
 8006fa0:	f6f42823          	sw	a5,-144(s0)
 8006fa4:	00100793          	li	a5,1
 8006fa8:	fcf42023          	sw	a5,-64(s0)
 8006fac:	0540006f          	j	8007000 <_vsnprintf+0x1a8>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8006fb0:	fcc42783          	lw	a5,-52(s0)
 8006fb4:	0087e793          	ori	a5,a5,8
 8006fb8:	fcf42623          	sw	a5,-52(s0)
 8006fbc:	f7042783          	lw	a5,-144(s0)
 8006fc0:	00178793          	addi	a5,a5,1
 8006fc4:	f6f42823          	sw	a5,-144(s0)
 8006fc8:	00100793          	li	a5,1
 8006fcc:	fcf42023          	sw	a5,-64(s0)
 8006fd0:	0300006f          	j	8007000 <_vsnprintf+0x1a8>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8006fd4:	fcc42783          	lw	a5,-52(s0)
 8006fd8:	0107e793          	ori	a5,a5,16
 8006fdc:	fcf42623          	sw	a5,-52(s0)
 8006fe0:	f7042783          	lw	a5,-144(s0)
 8006fe4:	00178793          	addi	a5,a5,1
 8006fe8:	f6f42823          	sw	a5,-144(s0)
 8006fec:	00100793          	li	a5,1
 8006ff0:	fcf42023          	sw	a5,-64(s0)
 8006ff4:	00c0006f          	j	8007000 <_vsnprintf+0x1a8>
        default :                                   n = 0U; break;
 8006ff8:	fc042023          	sw	zero,-64(s0)
 8006ffc:	00000013          	nop
      }
    } while (n);
 8007000:	fc042783          	lw	a5,-64(s0)
 8007004:	f0079ae3          	bnez	a5,8006f18 <_vsnprintf+0xc0>

    // evaluate width field
    width = 0U;
 8007008:	fc042423          	sw	zero,-56(s0)
    if (_is_digit(*format)) {
 800700c:	f7042783          	lw	a5,-144(s0)
 8007010:	0007c783          	lbu	a5,0(a5)
 8007014:	00078513          	mv	a0,a5
 8007018:	b15fe0ef          	jal	ra,8005b2c <_is_digit>
 800701c:	00050793          	mv	a5,a0
 8007020:	00078c63          	beqz	a5,8007038 <_vsnprintf+0x1e0>
      width = _atoi(&format);
 8007024:	f7040793          	addi	a5,s0,-144
 8007028:	00078513          	mv	a0,a5
 800702c:	b51fe0ef          	jal	ra,8005b7c <_atoi>
 8007030:	fca42423          	sw	a0,-56(s0)
 8007034:	0600006f          	j	8007094 <_vsnprintf+0x23c>
    }
    else if (*format == '*') {
 8007038:	f7042783          	lw	a5,-144(s0)
 800703c:	0007c703          	lbu	a4,0(a5)
 8007040:	02a00793          	li	a5,42
 8007044:	04f71863          	bne	a4,a5,8007094 <_vsnprintf+0x23c>
      const int w = va_arg(va, int);
 8007048:	f6c42783          	lw	a5,-148(s0)
 800704c:	00478713          	addi	a4,a5,4
 8007050:	f6e42623          	sw	a4,-148(s0)
 8007054:	0007a783          	lw	a5,0(a5)
 8007058:	faf42423          	sw	a5,-88(s0)
      if (w < 0) {
 800705c:	fa842783          	lw	a5,-88(s0)
 8007060:	0207d063          	bgez	a5,8007080 <_vsnprintf+0x228>
        flags |= FLAGS_LEFT;    // reverse padding
 8007064:	fcc42783          	lw	a5,-52(s0)
 8007068:	0027e793          	ori	a5,a5,2
 800706c:	fcf42623          	sw	a5,-52(s0)
        width = (unsigned int)-w;
 8007070:	fa842783          	lw	a5,-88(s0)
 8007074:	40f007b3          	neg	a5,a5
 8007078:	fcf42423          	sw	a5,-56(s0)
 800707c:	00c0006f          	j	8007088 <_vsnprintf+0x230>
      }
      else {
        width = (unsigned int)w;
 8007080:	fa842783          	lw	a5,-88(s0)
 8007084:	fcf42423          	sw	a5,-56(s0)
      }
      format++;
 8007088:	f7042783          	lw	a5,-144(s0)
 800708c:	00178793          	addi	a5,a5,1
 8007090:	f6f42823          	sw	a5,-144(s0)
    }

    // evaluate precision field
    precision = 0U;
 8007094:	fc042223          	sw	zero,-60(s0)
    if (*format == '.') {
 8007098:	f7042783          	lw	a5,-144(s0)
 800709c:	0007c703          	lbu	a4,0(a5)
 80070a0:	02e00793          	li	a5,46
 80070a4:	08f71463          	bne	a4,a5,800712c <_vsnprintf+0x2d4>
      flags |= FLAGS_PRECISION;
 80070a8:	fcc42783          	lw	a5,-52(s0)
 80070ac:	4007e793          	ori	a5,a5,1024
 80070b0:	fcf42623          	sw	a5,-52(s0)
      format++;
 80070b4:	f7042783          	lw	a5,-144(s0)
 80070b8:	00178793          	addi	a5,a5,1
 80070bc:	f6f42823          	sw	a5,-144(s0)
      if (_is_digit(*format)) {
 80070c0:	f7042783          	lw	a5,-144(s0)
 80070c4:	0007c783          	lbu	a5,0(a5)
 80070c8:	00078513          	mv	a0,a5
 80070cc:	a61fe0ef          	jal	ra,8005b2c <_is_digit>
 80070d0:	00050793          	mv	a5,a0
 80070d4:	00078c63          	beqz	a5,80070ec <_vsnprintf+0x294>
        precision = _atoi(&format);
 80070d8:	f7040793          	addi	a5,s0,-144
 80070dc:	00078513          	mv	a0,a5
 80070e0:	a9dfe0ef          	jal	ra,8005b7c <_atoi>
 80070e4:	fca42223          	sw	a0,-60(s0)
 80070e8:	0440006f          	j	800712c <_vsnprintf+0x2d4>
      }
      else if (*format == '*') {
 80070ec:	f7042783          	lw	a5,-144(s0)
 80070f0:	0007c703          	lbu	a4,0(a5)
 80070f4:	02a00793          	li	a5,42
 80070f8:	02f71a63          	bne	a4,a5,800712c <_vsnprintf+0x2d4>
        const int prec = (int)va_arg(va, int);
 80070fc:	f6c42783          	lw	a5,-148(s0)
 8007100:	00478713          	addi	a4,a5,4
 8007104:	f6e42623          	sw	a4,-148(s0)
 8007108:	0007a783          	lw	a5,0(a5)
 800710c:	faf42223          	sw	a5,-92(s0)
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8007110:	fa442783          	lw	a5,-92(s0)
 8007114:	0007d463          	bgez	a5,800711c <_vsnprintf+0x2c4>
 8007118:	00000793          	li	a5,0
 800711c:	fcf42223          	sw	a5,-60(s0)
        format++;
 8007120:	f7042783          	lw	a5,-144(s0)
 8007124:	00178793          	addi	a5,a5,1
 8007128:	f6f42823          	sw	a5,-144(s0)
      }
    }

    // evaluate length field
    switch (*format) {
 800712c:	f7042783          	lw	a5,-144(s0)
 8007130:	0007c783          	lbu	a5,0(a5)
 8007134:	f9878793          	addi	a5,a5,-104
 8007138:	01200713          	li	a4,18
 800713c:	0ef76c63          	bltu	a4,a5,8007234 <_vsnprintf+0x3dc>
 8007140:	00279713          	slli	a4,a5,0x2
 8007144:	0800c7b7          	lui	a5,0x800c
 8007148:	09c78793          	addi	a5,a5,156 # 800c09c <nan+0x200>
 800714c:	00f707b3          	add	a5,a4,a5
 8007150:	0007a783          	lw	a5,0(a5)
 8007154:	00078067          	jr	a5
      case 'l' :
        flags |= FLAGS_LONG;
 8007158:	fcc42783          	lw	a5,-52(s0)
 800715c:	1007e793          	ori	a5,a5,256
 8007160:	fcf42623          	sw	a5,-52(s0)
        format++;
 8007164:	f7042783          	lw	a5,-144(s0)
 8007168:	00178793          	addi	a5,a5,1
 800716c:	f6f42823          	sw	a5,-144(s0)
        if (*format == 'l') {
 8007170:	f7042783          	lw	a5,-144(s0)
 8007174:	0007c703          	lbu	a4,0(a5)
 8007178:	06c00793          	li	a5,108
 800717c:	0cf71063          	bne	a4,a5,800723c <_vsnprintf+0x3e4>
          flags |= FLAGS_LONG_LONG;
 8007180:	fcc42783          	lw	a5,-52(s0)
 8007184:	2007e793          	ori	a5,a5,512
 8007188:	fcf42623          	sw	a5,-52(s0)
          format++;
 800718c:	f7042783          	lw	a5,-144(s0)
 8007190:	00178793          	addi	a5,a5,1
 8007194:	f6f42823          	sw	a5,-144(s0)
        }
        break;
 8007198:	0a40006f          	j	800723c <_vsnprintf+0x3e4>
      case 'h' :
        flags |= FLAGS_SHORT;
 800719c:	fcc42783          	lw	a5,-52(s0)
 80071a0:	0807e793          	ori	a5,a5,128
 80071a4:	fcf42623          	sw	a5,-52(s0)
        format++;
 80071a8:	f7042783          	lw	a5,-144(s0)
 80071ac:	00178793          	addi	a5,a5,1
 80071b0:	f6f42823          	sw	a5,-144(s0)
        if (*format == 'h') {
 80071b4:	f7042783          	lw	a5,-144(s0)
 80071b8:	0007c703          	lbu	a4,0(a5)
 80071bc:	06800793          	li	a5,104
 80071c0:	08f71263          	bne	a4,a5,8007244 <_vsnprintf+0x3ec>
          flags |= FLAGS_CHAR;
 80071c4:	fcc42783          	lw	a5,-52(s0)
 80071c8:	0407e793          	ori	a5,a5,64
 80071cc:	fcf42623          	sw	a5,-52(s0)
          format++;
 80071d0:	f7042783          	lw	a5,-144(s0)
 80071d4:	00178793          	addi	a5,a5,1
 80071d8:	f6f42823          	sw	a5,-144(s0)
        }
        break;
 80071dc:	0680006f          	j	8007244 <_vsnprintf+0x3ec>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80071e0:	fcc42783          	lw	a5,-52(s0)
 80071e4:	1007e793          	ori	a5,a5,256
 80071e8:	fcf42623          	sw	a5,-52(s0)
        format++;
 80071ec:	f7042783          	lw	a5,-144(s0)
 80071f0:	00178793          	addi	a5,a5,1
 80071f4:	f6f42823          	sw	a5,-144(s0)
        break;
 80071f8:	0500006f          	j	8007248 <_vsnprintf+0x3f0>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80071fc:	fcc42783          	lw	a5,-52(s0)
 8007200:	2007e793          	ori	a5,a5,512
 8007204:	fcf42623          	sw	a5,-52(s0)
        format++;
 8007208:	f7042783          	lw	a5,-144(s0)
 800720c:	00178793          	addi	a5,a5,1
 8007210:	f6f42823          	sw	a5,-144(s0)
        break;
 8007214:	0340006f          	j	8007248 <_vsnprintf+0x3f0>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007218:	fcc42783          	lw	a5,-52(s0)
 800721c:	1007e793          	ori	a5,a5,256
 8007220:	fcf42623          	sw	a5,-52(s0)
        format++;
 8007224:	f7042783          	lw	a5,-144(s0)
 8007228:	00178793          	addi	a5,a5,1
 800722c:	f6f42823          	sw	a5,-144(s0)
        break;
 8007230:	0180006f          	j	8007248 <_vsnprintf+0x3f0>
      default :
        break;
 8007234:	00000013          	nop
 8007238:	0100006f          	j	8007248 <_vsnprintf+0x3f0>
        break;
 800723c:	00000013          	nop
 8007240:	0080006f          	j	8007248 <_vsnprintf+0x3f0>
        break;
 8007244:	00000013          	nop
    }

    // evaluate specifier
    switch (*format) {
 8007248:	f7042783          	lw	a5,-144(s0)
 800724c:	0007c783          	lbu	a5,0(a5)
 8007250:	fdb78793          	addi	a5,a5,-37
 8007254:	05300713          	li	a4,83
 8007258:	0ef76ae3          	bltu	a4,a5,8007b4c <_vsnprintf+0xcf4>
 800725c:	00279713          	slli	a4,a5,0x2
 8007260:	0800c7b7          	lui	a5,0x800c
 8007264:	0e878793          	addi	a5,a5,232 # 800c0e8 <nan+0x24c>
 8007268:	00f707b3          	add	a5,a4,a5
 800726c:	0007a783          	lw	a5,0(a5)
 8007270:	00078067          	jr	a5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8007274:	f7042783          	lw	a5,-144(s0)
 8007278:	0007c703          	lbu	a4,0(a5)
 800727c:	07800793          	li	a5,120
 8007280:	00f70a63          	beq	a4,a5,8007294 <_vsnprintf+0x43c>
 8007284:	f7042783          	lw	a5,-144(s0)
 8007288:	0007c703          	lbu	a4,0(a5)
 800728c:	05800793          	li	a5,88
 8007290:	00f71863          	bne	a4,a5,80072a0 <_vsnprintf+0x448>
          base = 16U;
 8007294:	01000793          	li	a5,16
 8007298:	faf42c23          	sw	a5,-72(s0)
 800729c:	0500006f          	j	80072ec <_vsnprintf+0x494>
        }
        else if (*format == 'o') {
 80072a0:	f7042783          	lw	a5,-144(s0)
 80072a4:	0007c703          	lbu	a4,0(a5)
 80072a8:	06f00793          	li	a5,111
 80072ac:	00f71863          	bne	a4,a5,80072bc <_vsnprintf+0x464>
          base =  8U;
 80072b0:	00800793          	li	a5,8
 80072b4:	faf42c23          	sw	a5,-72(s0)
 80072b8:	0340006f          	j	80072ec <_vsnprintf+0x494>
        }
        else if (*format == 'b') {
 80072bc:	f7042783          	lw	a5,-144(s0)
 80072c0:	0007c703          	lbu	a4,0(a5)
 80072c4:	06200793          	li	a5,98
 80072c8:	00f71863          	bne	a4,a5,80072d8 <_vsnprintf+0x480>
          base =  2U;
 80072cc:	00200793          	li	a5,2
 80072d0:	faf42c23          	sw	a5,-72(s0)
 80072d4:	0180006f          	j	80072ec <_vsnprintf+0x494>
        }
        else {
          base = 10U;
 80072d8:	00a00793          	li	a5,10
 80072dc:	faf42c23          	sw	a5,-72(s0)
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80072e0:	fcc42783          	lw	a5,-52(s0)
 80072e4:	fef7f793          	andi	a5,a5,-17
 80072e8:	fcf42623          	sw	a5,-52(s0)
        }
        // uppercase
        if (*format == 'X') {
 80072ec:	f7042783          	lw	a5,-144(s0)
 80072f0:	0007c703          	lbu	a4,0(a5)
 80072f4:	05800793          	li	a5,88
 80072f8:	00f71863          	bne	a4,a5,8007308 <_vsnprintf+0x4b0>
          flags |= FLAGS_UPPERCASE;
 80072fc:	fcc42783          	lw	a5,-52(s0)
 8007300:	0207e793          	ori	a5,a5,32
 8007304:	fcf42623          	sw	a5,-52(s0)
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8007308:	f7042783          	lw	a5,-144(s0)
 800730c:	0007c703          	lbu	a4,0(a5)
 8007310:	06900793          	li	a5,105
 8007314:	02f70063          	beq	a4,a5,8007334 <_vsnprintf+0x4dc>
 8007318:	f7042783          	lw	a5,-144(s0)
 800731c:	0007c703          	lbu	a4,0(a5)
 8007320:	06400793          	li	a5,100
 8007324:	00f70863          	beq	a4,a5,8007334 <_vsnprintf+0x4dc>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8007328:	fcc42783          	lw	a5,-52(s0)
 800732c:	ff37f793          	andi	a5,a5,-13
 8007330:	fcf42623          	sw	a5,-52(s0)
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8007334:	fcc42783          	lw	a5,-52(s0)
 8007338:	4007f793          	andi	a5,a5,1024
 800733c:	00078863          	beqz	a5,800734c <_vsnprintf+0x4f4>
          flags &= ~FLAGS_ZEROPAD;
 8007340:	fcc42783          	lw	a5,-52(s0)
 8007344:	ffe7f793          	andi	a5,a5,-2
 8007348:	fcf42623          	sw	a5,-52(s0)
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800734c:	f7042783          	lw	a5,-144(s0)
 8007350:	0007c703          	lbu	a4,0(a5)
 8007354:	06900793          	li	a5,105
 8007358:	00f70a63          	beq	a4,a5,800736c <_vsnprintf+0x514>
 800735c:	f7042783          	lw	a5,-144(s0)
 8007360:	0007c703          	lbu	a4,0(a5)
 8007364:	06400793          	li	a5,100
 8007368:	20f71e63          	bne	a4,a5,8007584 <_vsnprintf+0x72c>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800736c:	fcc42783          	lw	a5,-52(s0)
 8007370:	2007f793          	andi	a5,a5,512
 8007374:	0c078863          	beqz	a5,8007444 <_vsnprintf+0x5ec>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8007378:	f6c42783          	lw	a5,-148(s0)
 800737c:	00778793          	addi	a5,a5,7
 8007380:	ff87f793          	andi	a5,a5,-8
 8007384:	00878713          	addi	a4,a5,8
 8007388:	f6e42623          	sw	a4,-148(s0)
 800738c:	0047a803          	lw	a6,4(a5)
 8007390:	0007a783          	lw	a5,0(a5)
 8007394:	f8f42c23          	sw	a5,-104(s0)
 8007398:	f9042e23          	sw	a6,-100(s0)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800739c:	f9c42783          	lw	a5,-100(s0)
 80073a0:	41f7d913          	srai	s2,a5,0x1f
 80073a4:	f9c42783          	lw	a5,-100(s0)
 80073a8:	41f7d993          	srai	s3,a5,0x1f
 80073ac:	f9842783          	lw	a5,-104(s0)
 80073b0:	0127ca33          	xor	s4,a5,s2
 80073b4:	f9c42783          	lw	a5,-100(s0)
 80073b8:	0137cab3          	xor	s5,a5,s3
 80073bc:	412a07b3          	sub	a5,s4,s2
 80073c0:	00078713          	mv	a4,a5
 80073c4:	00ea3733          	sltu	a4,s4,a4
 80073c8:	413a8833          	sub	a6,s5,s3
 80073cc:	40e80733          	sub	a4,a6,a4
 80073d0:	00070813          	mv	a6,a4
 80073d4:	00078a13          	mv	s4,a5
 80073d8:	00080a93          	mv	s5,a6
 80073dc:	000a0613          	mv	a2,s4
 80073e0:	000a8693          	mv	a3,s5
 80073e4:	f9c42783          	lw	a5,-100(s0)
 80073e8:	01f7d793          	srli	a5,a5,0x1f
 80073ec:	0ff7f713          	andi	a4,a5,255
 80073f0:	fb842783          	lw	a5,-72(s0)
 80073f4:	00078b13          	mv	s6,a5
 80073f8:	00000b93          	li	s7,0
 80073fc:	fcc42783          	lw	a5,-52(s0)
 8007400:	00f12623          	sw	a5,12(sp)
 8007404:	fc842783          	lw	a5,-56(s0)
 8007408:	00f12423          	sw	a5,8(sp)
 800740c:	fc442783          	lw	a5,-60(s0)
 8007410:	00f12223          	sw	a5,4(sp)
 8007414:	01712023          	sw	s7,0(sp)
 8007418:	000b0893          	mv	a7,s6
 800741c:	00070813          	mv	a6,a4
 8007420:	00060713          	mv	a4,a2
 8007424:	00068793          	mv	a5,a3
 8007428:	f7442683          	lw	a3,-140(s0)
 800742c:	fbc42603          	lw	a2,-68(s0)
 8007430:	f7842583          	lw	a1,-136(s0)
 8007434:	f7c42503          	lw	a0,-132(s0)
 8007438:	d61fe0ef          	jal	ra,8006198 <_ntoa_long_long>
 800743c:	faa42e23          	sw	a0,-68(s0)
          if (flags & FLAGS_LONG_LONG) {
 8007440:	2a40006f          	j	80076e4 <_vsnprintf+0x88c>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8007444:	fcc42783          	lw	a5,-52(s0)
 8007448:	1007f793          	andi	a5,a5,256
 800744c:	06078c63          	beqz	a5,80074c4 <_vsnprintf+0x66c>
            const long value = va_arg(va, long);
 8007450:	f6c42783          	lw	a5,-148(s0)
 8007454:	00478713          	addi	a4,a5,4
 8007458:	f6e42623          	sw	a4,-148(s0)
 800745c:	0007a783          	lw	a5,0(a5)
 8007460:	f8f42a23          	sw	a5,-108(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007464:	f9442783          	lw	a5,-108(s0)
 8007468:	41f7d713          	srai	a4,a5,0x1f
 800746c:	f9442783          	lw	a5,-108(s0)
 8007470:	00f747b3          	xor	a5,a4,a5
 8007474:	40e787b3          	sub	a5,a5,a4
 8007478:	00078693          	mv	a3,a5
 800747c:	f9442783          	lw	a5,-108(s0)
 8007480:	01f7d793          	srli	a5,a5,0x1f
 8007484:	0ff7f713          	andi	a4,a5,255
 8007488:	fcc42783          	lw	a5,-52(s0)
 800748c:	00f12223          	sw	a5,4(sp)
 8007490:	fc842783          	lw	a5,-56(s0)
 8007494:	00f12023          	sw	a5,0(sp)
 8007498:	fc442883          	lw	a7,-60(s0)
 800749c:	fb842803          	lw	a6,-72(s0)
 80074a0:	00070793          	mv	a5,a4
 80074a4:	00068713          	mv	a4,a3
 80074a8:	f7442683          	lw	a3,-140(s0)
 80074ac:	fbc42603          	lw	a2,-68(s0)
 80074b0:	f7842583          	lw	a1,-136(s0)
 80074b4:	f7c42503          	lw	a0,-132(s0)
 80074b8:	b8dfe0ef          	jal	ra,8006044 <_ntoa_long>
 80074bc:	faa42e23          	sw	a0,-68(s0)
          if (flags & FLAGS_LONG_LONG) {
 80074c0:	2240006f          	j	80076e4 <_vsnprintf+0x88c>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80074c4:	fcc42783          	lw	a5,-52(s0)
 80074c8:	0407f793          	andi	a5,a5,64
 80074cc:	00078e63          	beqz	a5,80074e8 <_vsnprintf+0x690>
 80074d0:	f6c42783          	lw	a5,-148(s0)
 80074d4:	00478713          	addi	a4,a5,4
 80074d8:	f6e42623          	sw	a4,-148(s0)
 80074dc:	0007a783          	lw	a5,0(a5)
 80074e0:	0ff7f793          	andi	a5,a5,255
 80074e4:	03c0006f          	j	8007520 <_vsnprintf+0x6c8>
 80074e8:	fcc42783          	lw	a5,-52(s0)
 80074ec:	0807f793          	andi	a5,a5,128
 80074f0:	02078063          	beqz	a5,8007510 <_vsnprintf+0x6b8>
 80074f4:	f6c42783          	lw	a5,-148(s0)
 80074f8:	00478713          	addi	a4,a5,4
 80074fc:	f6e42623          	sw	a4,-148(s0)
 8007500:	0007a783          	lw	a5,0(a5)
 8007504:	01079793          	slli	a5,a5,0x10
 8007508:	4107d793          	srai	a5,a5,0x10
 800750c:	0140006f          	j	8007520 <_vsnprintf+0x6c8>
 8007510:	f6c42783          	lw	a5,-148(s0)
 8007514:	00478713          	addi	a4,a5,4
 8007518:	f6e42623          	sw	a4,-148(s0)
 800751c:	0007a783          	lw	a5,0(a5)
 8007520:	f8f42823          	sw	a5,-112(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007524:	f9042783          	lw	a5,-112(s0)
 8007528:	41f7d713          	srai	a4,a5,0x1f
 800752c:	f9042783          	lw	a5,-112(s0)
 8007530:	00f747b3          	xor	a5,a4,a5
 8007534:	40e787b3          	sub	a5,a5,a4
 8007538:	00078693          	mv	a3,a5
 800753c:	f9042783          	lw	a5,-112(s0)
 8007540:	01f7d793          	srli	a5,a5,0x1f
 8007544:	0ff7f713          	andi	a4,a5,255
 8007548:	fcc42783          	lw	a5,-52(s0)
 800754c:	00f12223          	sw	a5,4(sp)
 8007550:	fc842783          	lw	a5,-56(s0)
 8007554:	00f12023          	sw	a5,0(sp)
 8007558:	fc442883          	lw	a7,-60(s0)
 800755c:	fb842803          	lw	a6,-72(s0)
 8007560:	00070793          	mv	a5,a4
 8007564:	00068713          	mv	a4,a3
 8007568:	f7442683          	lw	a3,-140(s0)
 800756c:	fbc42603          	lw	a2,-68(s0)
 8007570:	f7842583          	lw	a1,-136(s0)
 8007574:	f7c42503          	lw	a0,-132(s0)
 8007578:	acdfe0ef          	jal	ra,8006044 <_ntoa_long>
 800757c:	faa42e23          	sw	a0,-68(s0)
          if (flags & FLAGS_LONG_LONG) {
 8007580:	1640006f          	j	80076e4 <_vsnprintf+0x88c>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8007584:	fcc42783          	lw	a5,-52(s0)
 8007588:	2007f793          	andi	a5,a5,512
 800758c:	06078663          	beqz	a5,80075f8 <_vsnprintf+0x7a0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8007590:	f6c42783          	lw	a5,-148(s0)
 8007594:	00778793          	addi	a5,a5,7
 8007598:	ff87f793          	andi	a5,a5,-8
 800759c:	00878713          	addi	a4,a5,8
 80075a0:	f6e42623          	sw	a4,-148(s0)
 80075a4:	0007a703          	lw	a4,0(a5)
 80075a8:	0047a783          	lw	a5,4(a5)
 80075ac:	fb842683          	lw	a3,-72(s0)
 80075b0:	00068c13          	mv	s8,a3
 80075b4:	00000c93          	li	s9,0
 80075b8:	fcc42683          	lw	a3,-52(s0)
 80075bc:	00d12623          	sw	a3,12(sp)
 80075c0:	fc842683          	lw	a3,-56(s0)
 80075c4:	00d12423          	sw	a3,8(sp)
 80075c8:	fc442683          	lw	a3,-60(s0)
 80075cc:	00d12223          	sw	a3,4(sp)
 80075d0:	01912023          	sw	s9,0(sp)
 80075d4:	000c0893          	mv	a7,s8
 80075d8:	00000813          	li	a6,0
 80075dc:	f7442683          	lw	a3,-140(s0)
 80075e0:	fbc42603          	lw	a2,-68(s0)
 80075e4:	f7842583          	lw	a1,-136(s0)
 80075e8:	f7c42503          	lw	a0,-132(s0)
 80075ec:	badfe0ef          	jal	ra,8006198 <_ntoa_long_long>
 80075f0:	faa42e23          	sw	a0,-68(s0)
 80075f4:	0f00006f          	j	80076e4 <_vsnprintf+0x88c>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80075f8:	fcc42783          	lw	a5,-52(s0)
 80075fc:	1007f793          	andi	a5,a5,256
 8007600:	04078663          	beqz	a5,800764c <_vsnprintf+0x7f4>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8007604:	f6c42783          	lw	a5,-148(s0)
 8007608:	00478713          	addi	a4,a5,4
 800760c:	f6e42623          	sw	a4,-148(s0)
 8007610:	0007a703          	lw	a4,0(a5)
 8007614:	fcc42783          	lw	a5,-52(s0)
 8007618:	00f12223          	sw	a5,4(sp)
 800761c:	fc842783          	lw	a5,-56(s0)
 8007620:	00f12023          	sw	a5,0(sp)
 8007624:	fc442883          	lw	a7,-60(s0)
 8007628:	fb842803          	lw	a6,-72(s0)
 800762c:	00000793          	li	a5,0
 8007630:	f7442683          	lw	a3,-140(s0)
 8007634:	fbc42603          	lw	a2,-68(s0)
 8007638:	f7842583          	lw	a1,-136(s0)
 800763c:	f7c42503          	lw	a0,-132(s0)
 8007640:	a05fe0ef          	jal	ra,8006044 <_ntoa_long>
 8007644:	faa42e23          	sw	a0,-68(s0)
 8007648:	09c0006f          	j	80076e4 <_vsnprintf+0x88c>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800764c:	fcc42783          	lw	a5,-52(s0)
 8007650:	0407f793          	andi	a5,a5,64
 8007654:	00078e63          	beqz	a5,8007670 <_vsnprintf+0x818>
 8007658:	f6c42783          	lw	a5,-148(s0)
 800765c:	00478713          	addi	a4,a5,4
 8007660:	f6e42623          	sw	a4,-148(s0)
 8007664:	0007a783          	lw	a5,0(a5)
 8007668:	0ff7f793          	andi	a5,a5,255
 800766c:	03c0006f          	j	80076a8 <_vsnprintf+0x850>
 8007670:	fcc42783          	lw	a5,-52(s0)
 8007674:	0807f793          	andi	a5,a5,128
 8007678:	02078063          	beqz	a5,8007698 <_vsnprintf+0x840>
 800767c:	f6c42783          	lw	a5,-148(s0)
 8007680:	00478713          	addi	a4,a5,4
 8007684:	f6e42623          	sw	a4,-148(s0)
 8007688:	0007a783          	lw	a5,0(a5)
 800768c:	01079793          	slli	a5,a5,0x10
 8007690:	0107d793          	srli	a5,a5,0x10
 8007694:	0140006f          	j	80076a8 <_vsnprintf+0x850>
 8007698:	f6c42783          	lw	a5,-148(s0)
 800769c:	00478713          	addi	a4,a5,4
 80076a0:	f6e42623          	sw	a4,-148(s0)
 80076a4:	0007a783          	lw	a5,0(a5)
 80076a8:	faf42023          	sw	a5,-96(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80076ac:	fcc42783          	lw	a5,-52(s0)
 80076b0:	00f12223          	sw	a5,4(sp)
 80076b4:	fc842783          	lw	a5,-56(s0)
 80076b8:	00f12023          	sw	a5,0(sp)
 80076bc:	fc442883          	lw	a7,-60(s0)
 80076c0:	fb842803          	lw	a6,-72(s0)
 80076c4:	00000793          	li	a5,0
 80076c8:	fa042703          	lw	a4,-96(s0)
 80076cc:	f7442683          	lw	a3,-140(s0)
 80076d0:	fbc42603          	lw	a2,-68(s0)
 80076d4:	f7842583          	lw	a1,-136(s0)
 80076d8:	f7c42503          	lw	a0,-132(s0)
 80076dc:	969fe0ef          	jal	ra,8006044 <_ntoa_long>
 80076e0:	faa42e23          	sw	a0,-68(s0)
          }
        }
        format++;
 80076e4:	f7042783          	lw	a5,-144(s0)
 80076e8:	00178793          	addi	a5,a5,1
 80076ec:	f6f42823          	sw	a5,-144(s0)
        break;
 80076f0:	4940006f          	j	8007b84 <_vsnprintf+0xd2c>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80076f4:	f7042783          	lw	a5,-144(s0)
 80076f8:	0007c703          	lbu	a4,0(a5)
 80076fc:	04600793          	li	a5,70
 8007700:	00f71863          	bne	a4,a5,8007710 <_vsnprintf+0x8b8>
 8007704:	fcc42783          	lw	a5,-52(s0)
 8007708:	0207e793          	ori	a5,a5,32
 800770c:	fcf42623          	sw	a5,-52(s0)
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8007710:	f6c42783          	lw	a5,-148(s0)
 8007714:	00778793          	addi	a5,a5,7
 8007718:	ff87f793          	andi	a5,a5,-8
 800771c:	00878713          	addi	a4,a5,8
 8007720:	f6e42623          	sw	a4,-148(s0)
 8007724:	0007b787          	fld	fa5,0(a5)
 8007728:	fcc42803          	lw	a6,-52(s0)
 800772c:	fc842783          	lw	a5,-56(s0)
 8007730:	fc442703          	lw	a4,-60(s0)
 8007734:	22f78553          	fmv.d	fa0,fa5
 8007738:	f7442683          	lw	a3,-140(s0)
 800773c:	fbc42603          	lw	a2,-68(s0)
 8007740:	f7842583          	lw	a1,-136(s0)
 8007744:	f7c42503          	lw	a0,-132(s0)
 8007748:	be5fe0ef          	jal	ra,800632c <_ftoa>
 800774c:	faa42e23          	sw	a0,-68(s0)
        format++;
 8007750:	f7042783          	lw	a5,-144(s0)
 8007754:	00178793          	addi	a5,a5,1
 8007758:	f6f42823          	sw	a5,-144(s0)
        break;
 800775c:	4280006f          	j	8007b84 <_vsnprintf+0xd2c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8007760:	f7042783          	lw	a5,-144(s0)
 8007764:	0007c703          	lbu	a4,0(a5)
 8007768:	06700793          	li	a5,103
 800776c:	00f70a63          	beq	a4,a5,8007780 <_vsnprintf+0x928>
 8007770:	f7042783          	lw	a5,-144(s0)
 8007774:	0007c703          	lbu	a4,0(a5)
 8007778:	04700793          	li	a5,71
 800777c:	00f71c63          	bne	a4,a5,8007794 <_vsnprintf+0x93c>
 8007780:	fcc42703          	lw	a4,-52(s0)
 8007784:	000017b7          	lui	a5,0x1
 8007788:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x8003800>
 800778c:	00f767b3          	or	a5,a4,a5
 8007790:	fcf42623          	sw	a5,-52(s0)
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8007794:	f7042783          	lw	a5,-144(s0)
 8007798:	0007c703          	lbu	a4,0(a5)
 800779c:	04500793          	li	a5,69
 80077a0:	00f70a63          	beq	a4,a5,80077b4 <_vsnprintf+0x95c>
 80077a4:	f7042783          	lw	a5,-144(s0)
 80077a8:	0007c703          	lbu	a4,0(a5)
 80077ac:	04700793          	li	a5,71
 80077b0:	00f71863          	bne	a4,a5,80077c0 <_vsnprintf+0x968>
 80077b4:	fcc42783          	lw	a5,-52(s0)
 80077b8:	0207e793          	ori	a5,a5,32
 80077bc:	fcf42623          	sw	a5,-52(s0)
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80077c0:	f6c42783          	lw	a5,-148(s0)
 80077c4:	00778793          	addi	a5,a5,7
 80077c8:	ff87f793          	andi	a5,a5,-8
 80077cc:	00878713          	addi	a4,a5,8
 80077d0:	f6e42623          	sw	a4,-148(s0)
 80077d4:	0007b787          	fld	fa5,0(a5)
 80077d8:	fcc42803          	lw	a6,-52(s0)
 80077dc:	fc842783          	lw	a5,-56(s0)
 80077e0:	fc442703          	lw	a4,-60(s0)
 80077e4:	22f78553          	fmv.d	fa0,fa5
 80077e8:	f7442683          	lw	a3,-140(s0)
 80077ec:	fbc42603          	lw	a2,-68(s0)
 80077f0:	f7842583          	lw	a1,-136(s0)
 80077f4:	f7c42503          	lw	a0,-132(s0)
 80077f8:	92cff0ef          	jal	ra,8006924 <_etoa>
 80077fc:	faa42e23          	sw	a0,-68(s0)
        format++;
 8007800:	f7042783          	lw	a5,-144(s0)
 8007804:	00178793          	addi	a5,a5,1
 8007808:	f6f42823          	sw	a5,-144(s0)
        break;
 800780c:	3780006f          	j	8007b84 <_vsnprintf+0xd2c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8007810:	00100793          	li	a5,1
 8007814:	faf42a23          	sw	a5,-76(s0)
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8007818:	fcc42783          	lw	a5,-52(s0)
 800781c:	0027f793          	andi	a5,a5,2
 8007820:	04079063          	bnez	a5,8007860 <_vsnprintf+0xa08>
          while (l++ < width) {
 8007824:	0280006f          	j	800784c <_vsnprintf+0x9f4>
            out(' ', buffer, idx++, maxlen);
 8007828:	fbc42783          	lw	a5,-68(s0)
 800782c:	00178713          	addi	a4,a5,1
 8007830:	fae42e23          	sw	a4,-68(s0)
 8007834:	f7c42703          	lw	a4,-132(s0)
 8007838:	f7442683          	lw	a3,-140(s0)
 800783c:	00078613          	mv	a2,a5
 8007840:	f7842583          	lw	a1,-136(s0)
 8007844:	02000513          	li	a0,32
 8007848:	000700e7          	jalr	a4
          while (l++ < width) {
 800784c:	fb442783          	lw	a5,-76(s0)
 8007850:	00178713          	addi	a4,a5,1
 8007854:	fae42a23          	sw	a4,-76(s0)
 8007858:	fc842703          	lw	a4,-56(s0)
 800785c:	fce7e6e3          	bltu	a5,a4,8007828 <_vsnprintf+0x9d0>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8007860:	f6c42783          	lw	a5,-148(s0)
 8007864:	00478713          	addi	a4,a5,4
 8007868:	f6e42623          	sw	a4,-148(s0)
 800786c:	0007a783          	lw	a5,0(a5)
 8007870:	0ff7f513          	andi	a0,a5,255
 8007874:	fbc42783          	lw	a5,-68(s0)
 8007878:	00178713          	addi	a4,a5,1
 800787c:	fae42e23          	sw	a4,-68(s0)
 8007880:	f7c42703          	lw	a4,-132(s0)
 8007884:	f7442683          	lw	a3,-140(s0)
 8007888:	00078613          	mv	a2,a5
 800788c:	f7842583          	lw	a1,-136(s0)
 8007890:	000700e7          	jalr	a4
        // post padding
        if (flags & FLAGS_LEFT) {
 8007894:	fcc42783          	lw	a5,-52(s0)
 8007898:	0027f793          	andi	a5,a5,2
 800789c:	04078063          	beqz	a5,80078dc <_vsnprintf+0xa84>
          while (l++ < width) {
 80078a0:	0280006f          	j	80078c8 <_vsnprintf+0xa70>
            out(' ', buffer, idx++, maxlen);
 80078a4:	fbc42783          	lw	a5,-68(s0)
 80078a8:	00178713          	addi	a4,a5,1
 80078ac:	fae42e23          	sw	a4,-68(s0)
 80078b0:	f7c42703          	lw	a4,-132(s0)
 80078b4:	f7442683          	lw	a3,-140(s0)
 80078b8:	00078613          	mv	a2,a5
 80078bc:	f7842583          	lw	a1,-136(s0)
 80078c0:	02000513          	li	a0,32
 80078c4:	000700e7          	jalr	a4
          while (l++ < width) {
 80078c8:	fb442783          	lw	a5,-76(s0)
 80078cc:	00178713          	addi	a4,a5,1
 80078d0:	fae42a23          	sw	a4,-76(s0)
 80078d4:	fc842703          	lw	a4,-56(s0)
 80078d8:	fce7e6e3          	bltu	a5,a4,80078a4 <_vsnprintf+0xa4c>
          }
        }
        format++;
 80078dc:	f7042783          	lw	a5,-144(s0)
 80078e0:	00178793          	addi	a5,a5,1
 80078e4:	f6f42823          	sw	a5,-144(s0)
        break;
 80078e8:	29c0006f          	j	8007b84 <_vsnprintf+0xd2c>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80078ec:	f6c42783          	lw	a5,-148(s0)
 80078f0:	00478713          	addi	a4,a5,4
 80078f4:	f6e42623          	sw	a4,-148(s0)
 80078f8:	0007a783          	lw	a5,0(a5)
 80078fc:	faf42823          	sw	a5,-80(s0)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8007900:	fc442783          	lw	a5,-60(s0)
 8007904:	00078663          	beqz	a5,8007910 <_vsnprintf+0xab8>
 8007908:	fc442783          	lw	a5,-60(s0)
 800790c:	0080006f          	j	8007914 <_vsnprintf+0xabc>
 8007910:	fff00793          	li	a5,-1
 8007914:	00078593          	mv	a1,a5
 8007918:	fb042503          	lw	a0,-80(s0)
 800791c:	9acfe0ef          	jal	ra,8005ac8 <_strnlen_s>
 8007920:	faa42623          	sw	a0,-84(s0)
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8007924:	fcc42783          	lw	a5,-52(s0)
 8007928:	4007f793          	andi	a5,a5,1024
 800792c:	00078c63          	beqz	a5,8007944 <_vsnprintf+0xaec>
          l = (l < precision ? l : precision);
 8007930:	fac42703          	lw	a4,-84(s0)
 8007934:	fc442783          	lw	a5,-60(s0)
 8007938:	00f77463          	bleu	a5,a4,8007940 <_vsnprintf+0xae8>
 800793c:	00070793          	mv	a5,a4
 8007940:	faf42623          	sw	a5,-84(s0)
        }
        if (!(flags & FLAGS_LEFT)) {
 8007944:	fcc42783          	lw	a5,-52(s0)
 8007948:	0027f793          	andi	a5,a5,2
 800794c:	06079a63          	bnez	a5,80079c0 <_vsnprintf+0xb68>
          while (l++ < width) {
 8007950:	0280006f          	j	8007978 <_vsnprintf+0xb20>
            out(' ', buffer, idx++, maxlen);
 8007954:	fbc42783          	lw	a5,-68(s0)
 8007958:	00178713          	addi	a4,a5,1
 800795c:	fae42e23          	sw	a4,-68(s0)
 8007960:	f7c42703          	lw	a4,-132(s0)
 8007964:	f7442683          	lw	a3,-140(s0)
 8007968:	00078613          	mv	a2,a5
 800796c:	f7842583          	lw	a1,-136(s0)
 8007970:	02000513          	li	a0,32
 8007974:	000700e7          	jalr	a4
          while (l++ < width) {
 8007978:	fac42783          	lw	a5,-84(s0)
 800797c:	00178713          	addi	a4,a5,1
 8007980:	fae42623          	sw	a4,-84(s0)
 8007984:	fc842703          	lw	a4,-56(s0)
 8007988:	fce7e6e3          	bltu	a5,a4,8007954 <_vsnprintf+0xafc>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800798c:	0340006f          	j	80079c0 <_vsnprintf+0xb68>
          out(*(p++), buffer, idx++, maxlen);
 8007990:	fb042783          	lw	a5,-80(s0)
 8007994:	00178713          	addi	a4,a5,1
 8007998:	fae42823          	sw	a4,-80(s0)
 800799c:	0007c503          	lbu	a0,0(a5)
 80079a0:	fbc42783          	lw	a5,-68(s0)
 80079a4:	00178713          	addi	a4,a5,1
 80079a8:	fae42e23          	sw	a4,-68(s0)
 80079ac:	f7c42703          	lw	a4,-132(s0)
 80079b0:	f7442683          	lw	a3,-140(s0)
 80079b4:	00078613          	mv	a2,a5
 80079b8:	f7842583          	lw	a1,-136(s0)
 80079bc:	000700e7          	jalr	a4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80079c0:	fb042783          	lw	a5,-80(s0)
 80079c4:	0007c783          	lbu	a5,0(a5)
 80079c8:	02078063          	beqz	a5,80079e8 <_vsnprintf+0xb90>
 80079cc:	fcc42783          	lw	a5,-52(s0)
 80079d0:	4007f793          	andi	a5,a5,1024
 80079d4:	fa078ee3          	beqz	a5,8007990 <_vsnprintf+0xb38>
 80079d8:	fc442783          	lw	a5,-60(s0)
 80079dc:	fff78713          	addi	a4,a5,-1
 80079e0:	fce42223          	sw	a4,-60(s0)
 80079e4:	fa0796e3          	bnez	a5,8007990 <_vsnprintf+0xb38>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80079e8:	fcc42783          	lw	a5,-52(s0)
 80079ec:	0027f793          	andi	a5,a5,2
 80079f0:	04078063          	beqz	a5,8007a30 <_vsnprintf+0xbd8>
          while (l++ < width) {
 80079f4:	0280006f          	j	8007a1c <_vsnprintf+0xbc4>
            out(' ', buffer, idx++, maxlen);
 80079f8:	fbc42783          	lw	a5,-68(s0)
 80079fc:	00178713          	addi	a4,a5,1
 8007a00:	fae42e23          	sw	a4,-68(s0)
 8007a04:	f7c42703          	lw	a4,-132(s0)
 8007a08:	f7442683          	lw	a3,-140(s0)
 8007a0c:	00078613          	mv	a2,a5
 8007a10:	f7842583          	lw	a1,-136(s0)
 8007a14:	02000513          	li	a0,32
 8007a18:	000700e7          	jalr	a4
          while (l++ < width) {
 8007a1c:	fac42783          	lw	a5,-84(s0)
 8007a20:	00178713          	addi	a4,a5,1
 8007a24:	fae42623          	sw	a4,-84(s0)
 8007a28:	fc842703          	lw	a4,-56(s0)
 8007a2c:	fce7e6e3          	bltu	a5,a4,80079f8 <_vsnprintf+0xba0>
          }
        }
        format++;
 8007a30:	f7042783          	lw	a5,-144(s0)
 8007a34:	00178793          	addi	a5,a5,1
 8007a38:	f6f42823          	sw	a5,-144(s0)
        break;
 8007a3c:	1480006f          	j	8007b84 <_vsnprintf+0xd2c>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8007a40:	00800793          	li	a5,8
 8007a44:	fcf42423          	sw	a5,-56(s0)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8007a48:	fcc42783          	lw	a5,-52(s0)
 8007a4c:	0217e793          	ori	a5,a5,33
 8007a50:	fcf42623          	sw	a5,-52(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8007a54:	f80407a3          	sb	zero,-113(s0)
        if (is_ll) {
 8007a58:	f8f44783          	lbu	a5,-113(s0)
 8007a5c:	06078263          	beqz	a5,8007ac0 <_vsnprintf+0xc68>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8007a60:	f6c42783          	lw	a5,-148(s0)
 8007a64:	00478713          	addi	a4,a5,4
 8007a68:	f6e42623          	sw	a4,-148(s0)
 8007a6c:	0007a783          	lw	a5,0(a5)
 8007a70:	00078d13          	mv	s10,a5
 8007a74:	00000d93          	li	s11,0
 8007a78:	fcc42783          	lw	a5,-52(s0)
 8007a7c:	00f12623          	sw	a5,12(sp)
 8007a80:	fc842783          	lw	a5,-56(s0)
 8007a84:	00f12423          	sw	a5,8(sp)
 8007a88:	fc442783          	lw	a5,-60(s0)
 8007a8c:	00f12223          	sw	a5,4(sp)
 8007a90:	00012023          	sw	zero,0(sp)
 8007a94:	01000893          	li	a7,16
 8007a98:	00000813          	li	a6,0
 8007a9c:	000d0713          	mv	a4,s10
 8007aa0:	000d8793          	mv	a5,s11
 8007aa4:	f7442683          	lw	a3,-140(s0)
 8007aa8:	fbc42603          	lw	a2,-68(s0)
 8007aac:	f7842583          	lw	a1,-136(s0)
 8007ab0:	f7c42503          	lw	a0,-132(s0)
 8007ab4:	ee4fe0ef          	jal	ra,8006198 <_ntoa_long_long>
 8007ab8:	faa42e23          	sw	a0,-68(s0)
 8007abc:	04c0006f          	j	8007b08 <_vsnprintf+0xcb0>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8007ac0:	f6c42783          	lw	a5,-148(s0)
 8007ac4:	00478713          	addi	a4,a5,4
 8007ac8:	f6e42623          	sw	a4,-148(s0)
 8007acc:	0007a783          	lw	a5,0(a5)
 8007ad0:	00078713          	mv	a4,a5
 8007ad4:	fcc42783          	lw	a5,-52(s0)
 8007ad8:	00f12223          	sw	a5,4(sp)
 8007adc:	fc842783          	lw	a5,-56(s0)
 8007ae0:	00f12023          	sw	a5,0(sp)
 8007ae4:	fc442883          	lw	a7,-60(s0)
 8007ae8:	01000813          	li	a6,16
 8007aec:	00000793          	li	a5,0
 8007af0:	f7442683          	lw	a3,-140(s0)
 8007af4:	fbc42603          	lw	a2,-68(s0)
 8007af8:	f7842583          	lw	a1,-136(s0)
 8007afc:	f7c42503          	lw	a0,-132(s0)
 8007b00:	d44fe0ef          	jal	ra,8006044 <_ntoa_long>
 8007b04:	faa42e23          	sw	a0,-68(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8007b08:	f7042783          	lw	a5,-144(s0)
 8007b0c:	00178793          	addi	a5,a5,1
 8007b10:	f6f42823          	sw	a5,-144(s0)
        break;
 8007b14:	0700006f          	j	8007b84 <_vsnprintf+0xd2c>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8007b18:	fbc42783          	lw	a5,-68(s0)
 8007b1c:	00178713          	addi	a4,a5,1
 8007b20:	fae42e23          	sw	a4,-68(s0)
 8007b24:	f7c42703          	lw	a4,-132(s0)
 8007b28:	f7442683          	lw	a3,-140(s0)
 8007b2c:	00078613          	mv	a2,a5
 8007b30:	f7842583          	lw	a1,-136(s0)
 8007b34:	02500513          	li	a0,37
 8007b38:	000700e7          	jalr	a4
        format++;
 8007b3c:	f7042783          	lw	a5,-144(s0)
 8007b40:	00178793          	addi	a5,a5,1
 8007b44:	f6f42823          	sw	a5,-144(s0)
        break;
 8007b48:	03c0006f          	j	8007b84 <_vsnprintf+0xd2c>

      default :
        out(*format, buffer, idx++, maxlen);
 8007b4c:	f7042783          	lw	a5,-144(s0)
 8007b50:	0007c503          	lbu	a0,0(a5)
 8007b54:	fbc42783          	lw	a5,-68(s0)
 8007b58:	00178713          	addi	a4,a5,1
 8007b5c:	fae42e23          	sw	a4,-68(s0)
 8007b60:	f7c42703          	lw	a4,-132(s0)
 8007b64:	f7442683          	lw	a3,-140(s0)
 8007b68:	00078613          	mv	a2,a5
 8007b6c:	f7842583          	lw	a1,-136(s0)
 8007b70:	000700e7          	jalr	a4
        format++;
 8007b74:	f7042783          	lw	a5,-144(s0)
 8007b78:	00178793          	addi	a5,a5,1
 8007b7c:	f6f42823          	sw	a5,-144(s0)
        break;
 8007b80:	00000013          	nop
  while (*format)
 8007b84:	f7042783          	lw	a5,-144(s0)
 8007b88:	0007c783          	lbu	a5,0(a5)
 8007b8c:	b2079a63          	bnez	a5,8006ec0 <_vsnprintf+0x68>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8007b90:	fbc42703          	lw	a4,-68(s0)
 8007b94:	f7442783          	lw	a5,-140(s0)
 8007b98:	00f76863          	bltu	a4,a5,8007ba8 <_vsnprintf+0xd50>
 8007b9c:	f7442783          	lw	a5,-140(s0)
 8007ba0:	fff78793          	addi	a5,a5,-1
 8007ba4:	0080006f          	j	8007bac <_vsnprintf+0xd54>
 8007ba8:	fbc42783          	lw	a5,-68(s0)
 8007bac:	f7c42703          	lw	a4,-132(s0)
 8007bb0:	f7442683          	lw	a3,-140(s0)
 8007bb4:	00078613          	mv	a2,a5
 8007bb8:	f7842583          	lw	a1,-136(s0)
 8007bbc:	00000513          	li	a0,0
 8007bc0:	000700e7          	jalr	a4

  // return written chars without terminating \0
  return (int)idx;
 8007bc4:	fbc42783          	lw	a5,-68(s0)
}
 8007bc8:	00078513          	mv	a0,a5
 8007bcc:	0ac12083          	lw	ra,172(sp)
 8007bd0:	0a812403          	lw	s0,168(sp)
 8007bd4:	0a412903          	lw	s2,164(sp)
 8007bd8:	0a012983          	lw	s3,160(sp)
 8007bdc:	09c12a03          	lw	s4,156(sp)
 8007be0:	09812a83          	lw	s5,152(sp)
 8007be4:	09412b03          	lw	s6,148(sp)
 8007be8:	09012b83          	lw	s7,144(sp)
 8007bec:	08c12c03          	lw	s8,140(sp)
 8007bf0:	08812c83          	lw	s9,136(sp)
 8007bf4:	08412d03          	lw	s10,132(sp)
 8007bf8:	08012d83          	lw	s11,128(sp)
 8007bfc:	0b010113          	addi	sp,sp,176
 8007c00:	00008067          	ret

08007c04 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8007c04:	fb010113          	addi	sp,sp,-80
 8007c08:	02112623          	sw	ra,44(sp)
 8007c0c:	02812423          	sw	s0,40(sp)
 8007c10:	03010413          	addi	s0,sp,48
 8007c14:	fca42e23          	sw	a0,-36(s0)
 8007c18:	00b42223          	sw	a1,4(s0)
 8007c1c:	00c42423          	sw	a2,8(s0)
 8007c20:	00d42623          	sw	a3,12(s0)
 8007c24:	00e42823          	sw	a4,16(s0)
 8007c28:	00f42a23          	sw	a5,20(s0)
 8007c2c:	01042c23          	sw	a6,24(s0)
 8007c30:	01142e23          	sw	a7,28(s0)
  va_list va;
  va_start(va, format);
 8007c34:	02040793          	addi	a5,s0,32
 8007c38:	fe478793          	addi	a5,a5,-28
 8007c3c:	fef42423          	sw	a5,-24(s0)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8007c40:	fe842703          	lw	a4,-24(s0)
 8007c44:	fe440793          	addi	a5,s0,-28
 8007c48:	fdc42683          	lw	a3,-36(s0)
 8007c4c:	fff00613          	li	a2,-1
 8007c50:	00078593          	mv	a1,a5
 8007c54:	080067b7          	lui	a5,0x8006
 8007c58:	a1c78513          	addi	a0,a5,-1508 # 8005a1c <_out_char>
 8007c5c:	9fcff0ef          	jal	ra,8006e58 <_vsnprintf>
 8007c60:	fea42623          	sw	a0,-20(s0)
  va_end(va);
  return ret;
 8007c64:	fec42783          	lw	a5,-20(s0)
}
 8007c68:	00078513          	mv	a0,a5
 8007c6c:	02c12083          	lw	ra,44(sp)
 8007c70:	02812403          	lw	s0,40(sp)
 8007c74:	05010113          	addi	sp,sp,80
 8007c78:	00008067          	ret

08007c7c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8007c7c:	fb010113          	addi	sp,sp,-80
 8007c80:	02112623          	sw	ra,44(sp)
 8007c84:	02812423          	sw	s0,40(sp)
 8007c88:	03010413          	addi	s0,sp,48
 8007c8c:	fca42e23          	sw	a0,-36(s0)
 8007c90:	fcb42c23          	sw	a1,-40(s0)
 8007c94:	00c42423          	sw	a2,8(s0)
 8007c98:	00d42623          	sw	a3,12(s0)
 8007c9c:	00e42823          	sw	a4,16(s0)
 8007ca0:	00f42a23          	sw	a5,20(s0)
 8007ca4:	01042c23          	sw	a6,24(s0)
 8007ca8:	01142e23          	sw	a7,28(s0)
  va_list va;
  va_start(va, format);
 8007cac:	02040793          	addi	a5,s0,32
 8007cb0:	fe878793          	addi	a5,a5,-24
 8007cb4:	fef42423          	sw	a5,-24(s0)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8007cb8:	fe842783          	lw	a5,-24(s0)
 8007cbc:	00078713          	mv	a4,a5
 8007cc0:	fd842683          	lw	a3,-40(s0)
 8007cc4:	fff00613          	li	a2,-1
 8007cc8:	fdc42583          	lw	a1,-36(s0)
 8007ccc:	080067b7          	lui	a5,0x8006
 8007cd0:	99c78513          	addi	a0,a5,-1636 # 800599c <_out_buffer>
 8007cd4:	984ff0ef          	jal	ra,8006e58 <_vsnprintf>
 8007cd8:	fea42623          	sw	a0,-20(s0)
  va_end(va);
  return ret;
 8007cdc:	fec42783          	lw	a5,-20(s0)
}
 8007ce0:	00078513          	mv	a0,a5
 8007ce4:	02c12083          	lw	ra,44(sp)
 8007ce8:	02812403          	lw	s0,40(sp)
 8007cec:	05010113          	addi	sp,sp,80
 8007cf0:	00008067          	ret

08007cf4 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8007cf4:	fb010113          	addi	sp,sp,-80
 8007cf8:	02112623          	sw	ra,44(sp)
 8007cfc:	02812423          	sw	s0,40(sp)
 8007d00:	03010413          	addi	s0,sp,48
 8007d04:	fca42e23          	sw	a0,-36(s0)
 8007d08:	fcb42c23          	sw	a1,-40(s0)
 8007d0c:	fcc42a23          	sw	a2,-44(s0)
 8007d10:	00d42623          	sw	a3,12(s0)
 8007d14:	00e42823          	sw	a4,16(s0)
 8007d18:	00f42a23          	sw	a5,20(s0)
 8007d1c:	01042c23          	sw	a6,24(s0)
 8007d20:	01142e23          	sw	a7,28(s0)
  va_list va;
  va_start(va, format);
 8007d24:	02040793          	addi	a5,s0,32
 8007d28:	fec78793          	addi	a5,a5,-20
 8007d2c:	fef42423          	sw	a5,-24(s0)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8007d30:	fe842783          	lw	a5,-24(s0)
 8007d34:	00078713          	mv	a4,a5
 8007d38:	fd442683          	lw	a3,-44(s0)
 8007d3c:	fd842603          	lw	a2,-40(s0)
 8007d40:	fdc42583          	lw	a1,-36(s0)
 8007d44:	080067b7          	lui	a5,0x8006
 8007d48:	99c78513          	addi	a0,a5,-1636 # 800599c <_out_buffer>
 8007d4c:	90cff0ef          	jal	ra,8006e58 <_vsnprintf>
 8007d50:	fea42623          	sw	a0,-20(s0)
  va_end(va);
  return ret;
 8007d54:	fec42783          	lw	a5,-20(s0)
}
 8007d58:	00078513          	mv	a0,a5
 8007d5c:	02c12083          	lw	ra,44(sp)
 8007d60:	02812403          	lw	s0,40(sp)
 8007d64:	05010113          	addi	sp,sp,80
 8007d68:	00008067          	ret

08007d6c <vprintf_>:


int vprintf_(const char* format, va_list va)
{
 8007d6c:	fd010113          	addi	sp,sp,-48
 8007d70:	02112623          	sw	ra,44(sp)
 8007d74:	02812423          	sw	s0,40(sp)
 8007d78:	03010413          	addi	s0,sp,48
 8007d7c:	fca42e23          	sw	a0,-36(s0)
 8007d80:	fcb42c23          	sw	a1,-40(s0)
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8007d84:	fec40793          	addi	a5,s0,-20
 8007d88:	fd842703          	lw	a4,-40(s0)
 8007d8c:	fdc42683          	lw	a3,-36(s0)
 8007d90:	fff00613          	li	a2,-1
 8007d94:	00078593          	mv	a1,a5
 8007d98:	080067b7          	lui	a5,0x8006
 8007d9c:	a1c78513          	addi	a0,a5,-1508 # 8005a1c <_out_char>
 8007da0:	8b8ff0ef          	jal	ra,8006e58 <_vsnprintf>
 8007da4:	00050793          	mv	a5,a0
}
 8007da8:	00078513          	mv	a0,a5
 8007dac:	02c12083          	lw	ra,44(sp)
 8007db0:	02812403          	lw	s0,40(sp)
 8007db4:	03010113          	addi	sp,sp,48
 8007db8:	00008067          	ret

08007dbc <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8007dbc:	fe010113          	addi	sp,sp,-32
 8007dc0:	00112e23          	sw	ra,28(sp)
 8007dc4:	00812c23          	sw	s0,24(sp)
 8007dc8:	02010413          	addi	s0,sp,32
 8007dcc:	fea42623          	sw	a0,-20(s0)
 8007dd0:	feb42423          	sw	a1,-24(s0)
 8007dd4:	fec42223          	sw	a2,-28(s0)
 8007dd8:	fed42023          	sw	a3,-32(s0)
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8007ddc:	fe042703          	lw	a4,-32(s0)
 8007de0:	fe442683          	lw	a3,-28(s0)
 8007de4:	fe842603          	lw	a2,-24(s0)
 8007de8:	fec42583          	lw	a1,-20(s0)
 8007dec:	080067b7          	lui	a5,0x8006
 8007df0:	99c78513          	addi	a0,a5,-1636 # 800599c <_out_buffer>
 8007df4:	864ff0ef          	jal	ra,8006e58 <_vsnprintf>
 8007df8:	00050793          	mv	a5,a0
}
 8007dfc:	00078513          	mv	a0,a5
 8007e00:	01c12083          	lw	ra,28(sp)
 8007e04:	01812403          	lw	s0,24(sp)
 8007e08:	02010113          	addi	sp,sp,32
 8007e0c:	00008067          	ret

08007e10 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
 8007e10:	fb010113          	addi	sp,sp,-80
 8007e14:	02112623          	sw	ra,44(sp)
 8007e18:	02812423          	sw	s0,40(sp)
 8007e1c:	03010413          	addi	s0,sp,48
 8007e20:	fca42e23          	sw	a0,-36(s0)
 8007e24:	fcb42c23          	sw	a1,-40(s0)
 8007e28:	fcc42a23          	sw	a2,-44(s0)
 8007e2c:	00d42623          	sw	a3,12(s0)
 8007e30:	00e42823          	sw	a4,16(s0)
 8007e34:	00f42a23          	sw	a5,20(s0)
 8007e38:	01042c23          	sw	a6,24(s0)
 8007e3c:	01142e23          	sw	a7,28(s0)
  va_list va;
  va_start(va, format);
 8007e40:	02040793          	addi	a5,s0,32
 8007e44:	fec78793          	addi	a5,a5,-20
 8007e48:	fef42423          	sw	a5,-24(s0)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8007e4c:	fdc42783          	lw	a5,-36(s0)
 8007e50:	fef42023          	sw	a5,-32(s0)
 8007e54:	fd842783          	lw	a5,-40(s0)
 8007e58:	fef42223          	sw	a5,-28(s0)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8007e5c:	fe842703          	lw	a4,-24(s0)
 8007e60:	fe040793          	addi	a5,s0,-32
 8007e64:	fd442683          	lw	a3,-44(s0)
 8007e68:	fff00613          	li	a2,-1
 8007e6c:	00078593          	mv	a1,a5
 8007e70:	080067b7          	lui	a5,0x8006
 8007e74:	a6878513          	addi	a0,a5,-1432 # 8005a68 <_out_fct>
 8007e78:	fe1fe0ef          	jal	ra,8006e58 <_vsnprintf>
 8007e7c:	fea42623          	sw	a0,-20(s0)
  va_end(va);
  return ret;
 8007e80:	fec42783          	lw	a5,-20(s0)
}
 8007e84:	00078513          	mv	a0,a5
 8007e88:	02c12083          	lw	ra,44(sp)
 8007e8c:	02812403          	lw	s0,40(sp)
 8007e90:	05010113          	addi	sp,sp,80
 8007e94:	00008067          	ret

08007e98 <_putchar>:
 *  printf library does not know how to actually print characters so
 *  we supply a function here to make the system call.
 */

void _putchar(char character)
{
 8007e98:	fe010113          	addi	sp,sp,-32
 8007e9c:	00112e23          	sw	ra,28(sp)
 8007ea0:	00812c23          	sw	s0,24(sp)
 8007ea4:	02010413          	addi	s0,sp,32
 8007ea8:	00050793          	mv	a5,a0
 8007eac:	fef407a3          	sb	a5,-17(s0)
    write(1, &character, 1);
 8007eb0:	fef40793          	addi	a5,s0,-17
 8007eb4:	00100613          	li	a2,1
 8007eb8:	00078593          	mv	a1,a5
 8007ebc:	00100513          	li	a0,1
 8007ec0:	06c000ef          	jal	ra,8007f2c <write>
}
 8007ec4:	00000013          	nop
 8007ec8:	01c12083          	lw	ra,28(sp)
 8007ecc:	01812403          	lw	s0,24(sp)
 8007ed0:	02010113          	addi	sp,sp,32
 8007ed4:	00008067          	ret

08007ed8 <exit>:
 8007ed8:	ff010113          	addi	sp,sp,-16
 8007edc:	00000593          	li	a1,0
 8007ee0:	00812423          	sw	s0,8(sp)
 8007ee4:	00112623          	sw	ra,12(sp)
 8007ee8:	00050413          	mv	s0,a0
 8007eec:	0bc000ef          	jal	ra,8007fa8 <__call_exitprocs>
 8007ef0:	1481a503          	lw	a0,328(gp) # 800d948 <_global_impure_ptr>
 8007ef4:	03c52783          	lw	a5,60(a0)
 8007ef8:	00078463          	beqz	a5,8007f00 <exit+0x28>
 8007efc:	000780e7          	jalr	a5
 8007f00:	00040513          	mv	a0,s0
 8007f04:	418020ef          	jal	ra,800a31c <_exit>

08007f08 <copysignf>:
 8007f08:	e00507d3          	fmv.x.s	a5,fa0
 8007f0c:	e00586d3          	fmv.x.s	a3,fa1
 8007f10:	80000737          	lui	a4,0x80000
 8007f14:	fff74613          	not	a2,a4
 8007f18:	00c7f7b3          	and	a5,a5,a2
 8007f1c:	00d77733          	and	a4,a4,a3
 8007f20:	00e7e7b3          	or	a5,a5,a4
 8007f24:	f0078553          	fmv.s.x	fa0,a5
 8007f28:	00008067          	ret

08007f2c <write>:
 8007f2c:	00060693          	mv	a3,a2
 8007f30:	00058613          	mv	a2,a1
 8007f34:	00050593          	mv	a1,a0
 8007f38:	1541a503          	lw	a0,340(gp) # 800d954 <_impure_ptr>
 8007f3c:	0040006f          	j	8007f40 <_write_r>

08007f40 <_write_r>:
 8007f40:	ff010113          	addi	sp,sp,-16
 8007f44:	00058793          	mv	a5,a1
 8007f48:	00812423          	sw	s0,8(sp)
 8007f4c:	00912223          	sw	s1,4(sp)
 8007f50:	00060593          	mv	a1,a2
 8007f54:	00050493          	mv	s1,a0
 8007f58:	00078513          	mv	a0,a5
 8007f5c:	00068613          	mv	a2,a3
 8007f60:	00112623          	sw	ra,12(sp)
 8007f64:	1a01ac23          	sw	zero,440(gp) # 800d9b8 <errno>
 8007f68:	561010ef          	jal	ra,8009cc8 <_write>
 8007f6c:	fff00793          	li	a5,-1
 8007f70:	00f50c63          	beq	a0,a5,8007f88 <_write_r+0x48>
 8007f74:	00c12083          	lw	ra,12(sp)
 8007f78:	00812403          	lw	s0,8(sp)
 8007f7c:	00412483          	lw	s1,4(sp)
 8007f80:	01010113          	addi	sp,sp,16
 8007f84:	00008067          	ret
 8007f88:	1b81a783          	lw	a5,440(gp) # 800d9b8 <errno>
 8007f8c:	fe0784e3          	beqz	a5,8007f74 <_write_r+0x34>
 8007f90:	00c12083          	lw	ra,12(sp)
 8007f94:	00812403          	lw	s0,8(sp)
 8007f98:	00f4a023          	sw	a5,0(s1)
 8007f9c:	00412483          	lw	s1,4(sp)
 8007fa0:	01010113          	addi	sp,sp,16
 8007fa4:	00008067          	ret

08007fa8 <__call_exitprocs>:
 8007fa8:	fd010113          	addi	sp,sp,-48
 8007fac:	01812423          	sw	s8,8(sp)
 8007fb0:	1481ac03          	lw	s8,328(gp) # 800d948 <_global_impure_ptr>
 8007fb4:	01312e23          	sw	s3,28(sp)
 8007fb8:	01412c23          	sw	s4,24(sp)
 8007fbc:	01512a23          	sw	s5,20(sp)
 8007fc0:	01612823          	sw	s6,16(sp)
 8007fc4:	02112623          	sw	ra,44(sp)
 8007fc8:	02812423          	sw	s0,40(sp)
 8007fcc:	02912223          	sw	s1,36(sp)
 8007fd0:	03212023          	sw	s2,32(sp)
 8007fd4:	01712623          	sw	s7,12(sp)
 8007fd8:	00050a93          	mv	s5,a0
 8007fdc:	00058b13          	mv	s6,a1
 8007fe0:	00100a13          	li	s4,1
 8007fe4:	fff00993          	li	s3,-1
 8007fe8:	148c2903          	lw	s2,328(s8)
 8007fec:	02090863          	beqz	s2,800801c <__call_exitprocs+0x74>
 8007ff0:	00492483          	lw	s1,4(s2)
 8007ff4:	fff48413          	addi	s0,s1,-1
 8007ff8:	02044263          	bltz	s0,800801c <__call_exitprocs+0x74>
 8007ffc:	00249493          	slli	s1,s1,0x2
 8008000:	009904b3          	add	s1,s2,s1
 8008004:	040b0463          	beqz	s6,800804c <__call_exitprocs+0xa4>
 8008008:	1044a783          	lw	a5,260(s1)
 800800c:	05678063          	beq	a5,s6,800804c <__call_exitprocs+0xa4>
 8008010:	fff40413          	addi	s0,s0,-1
 8008014:	ffc48493          	addi	s1,s1,-4
 8008018:	ff3416e3          	bne	s0,s3,8008004 <__call_exitprocs+0x5c>
 800801c:	02c12083          	lw	ra,44(sp)
 8008020:	02812403          	lw	s0,40(sp)
 8008024:	02412483          	lw	s1,36(sp)
 8008028:	02012903          	lw	s2,32(sp)
 800802c:	01c12983          	lw	s3,28(sp)
 8008030:	01812a03          	lw	s4,24(sp)
 8008034:	01412a83          	lw	s5,20(sp)
 8008038:	01012b03          	lw	s6,16(sp)
 800803c:	00c12b83          	lw	s7,12(sp)
 8008040:	00812c03          	lw	s8,8(sp)
 8008044:	03010113          	addi	sp,sp,48
 8008048:	00008067          	ret
 800804c:	00492783          	lw	a5,4(s2)
 8008050:	0044a683          	lw	a3,4(s1)
 8008054:	fff78793          	addi	a5,a5,-1
 8008058:	04878a63          	beq	a5,s0,80080ac <__call_exitprocs+0x104>
 800805c:	0004a223          	sw	zero,4(s1)
 8008060:	fa0688e3          	beqz	a3,8008010 <__call_exitprocs+0x68>
 8008064:	18892783          	lw	a5,392(s2)
 8008068:	008a1733          	sll	a4,s4,s0
 800806c:	00492b83          	lw	s7,4(s2)
 8008070:	00f777b3          	and	a5,a4,a5
 8008074:	00079e63          	bnez	a5,8008090 <__call_exitprocs+0xe8>
 8008078:	000680e7          	jalr	a3
 800807c:	00492783          	lw	a5,4(s2)
 8008080:	f77794e3          	bne	a5,s7,8007fe8 <__call_exitprocs+0x40>
 8008084:	148c2783          	lw	a5,328(s8)
 8008088:	f92784e3          	beq	a5,s2,8008010 <__call_exitprocs+0x68>
 800808c:	f5dff06f          	j	8007fe8 <__call_exitprocs+0x40>
 8008090:	18c92783          	lw	a5,396(s2)
 8008094:	0844a583          	lw	a1,132(s1)
 8008098:	00f77733          	and	a4,a4,a5
 800809c:	00071c63          	bnez	a4,80080b4 <__call_exitprocs+0x10c>
 80080a0:	000a8513          	mv	a0,s5
 80080a4:	000680e7          	jalr	a3
 80080a8:	fd5ff06f          	j	800807c <__call_exitprocs+0xd4>
 80080ac:	00892223          	sw	s0,4(s2)
 80080b0:	fb1ff06f          	j	8008060 <__call_exitprocs+0xb8>
 80080b4:	00058513          	mv	a0,a1
 80080b8:	000680e7          	jalr	a3
 80080bc:	fc1ff06f          	j	800807c <__call_exitprocs+0xd4>

080080c0 <cleanup_glue>:
 80080c0:	ff010113          	addi	sp,sp,-16
 80080c4:	00812423          	sw	s0,8(sp)
 80080c8:	00058413          	mv	s0,a1
 80080cc:	0005a583          	lw	a1,0(a1)
 80080d0:	00912223          	sw	s1,4(sp)
 80080d4:	00112623          	sw	ra,12(sp)
 80080d8:	00050493          	mv	s1,a0
 80080dc:	00058463          	beqz	a1,80080e4 <cleanup_glue+0x24>
 80080e0:	fe1ff0ef          	jal	ra,80080c0 <cleanup_glue>
 80080e4:	00040593          	mv	a1,s0
 80080e8:	00812403          	lw	s0,8(sp)
 80080ec:	00c12083          	lw	ra,12(sp)
 80080f0:	00048513          	mv	a0,s1
 80080f4:	00412483          	lw	s1,4(sp)
 80080f8:	01010113          	addi	sp,sp,16
 80080fc:	2300006f          	j	800832c <_free_r>

08008100 <_reclaim_reent>:
 8008100:	1541a783          	lw	a5,340(gp) # 800d954 <_impure_ptr>
 8008104:	10a78263          	beq	a5,a0,8008208 <_reclaim_reent+0x108>
 8008108:	04c52703          	lw	a4,76(a0)
 800810c:	fe010113          	addi	sp,sp,-32
 8008110:	00912a23          	sw	s1,20(sp)
 8008114:	00112e23          	sw	ra,28(sp)
 8008118:	00812c23          	sw	s0,24(sp)
 800811c:	01212823          	sw	s2,16(sp)
 8008120:	01312623          	sw	s3,12(sp)
 8008124:	00050493          	mv	s1,a0
 8008128:	04070263          	beqz	a4,800816c <_reclaim_reent+0x6c>
 800812c:	00000913          	li	s2,0
 8008130:	08000993          	li	s3,128
 8008134:	012707b3          	add	a5,a4,s2
 8008138:	0007a583          	lw	a1,0(a5)
 800813c:	00058e63          	beqz	a1,8008158 <_reclaim_reent+0x58>
 8008140:	0005a403          	lw	s0,0(a1)
 8008144:	00048513          	mv	a0,s1
 8008148:	1e4000ef          	jal	ra,800832c <_free_r>
 800814c:	00040593          	mv	a1,s0
 8008150:	fe0418e3          	bnez	s0,8008140 <_reclaim_reent+0x40>
 8008154:	04c4a703          	lw	a4,76(s1)
 8008158:	00490913          	addi	s2,s2,4
 800815c:	fd391ce3          	bne	s2,s3,8008134 <_reclaim_reent+0x34>
 8008160:	00070593          	mv	a1,a4
 8008164:	00048513          	mv	a0,s1
 8008168:	1c4000ef          	jal	ra,800832c <_free_r>
 800816c:	0404a583          	lw	a1,64(s1)
 8008170:	00058663          	beqz	a1,800817c <_reclaim_reent+0x7c>
 8008174:	00048513          	mv	a0,s1
 8008178:	1b4000ef          	jal	ra,800832c <_free_r>
 800817c:	1484a583          	lw	a1,328(s1)
 8008180:	02058063          	beqz	a1,80081a0 <_reclaim_reent+0xa0>
 8008184:	14c48913          	addi	s2,s1,332
 8008188:	01258c63          	beq	a1,s2,80081a0 <_reclaim_reent+0xa0>
 800818c:	0005a403          	lw	s0,0(a1)
 8008190:	00048513          	mv	a0,s1
 8008194:	198000ef          	jal	ra,800832c <_free_r>
 8008198:	00040593          	mv	a1,s0
 800819c:	fe8918e3          	bne	s2,s0,800818c <_reclaim_reent+0x8c>
 80081a0:	0544a583          	lw	a1,84(s1)
 80081a4:	00058663          	beqz	a1,80081b0 <_reclaim_reent+0xb0>
 80081a8:	00048513          	mv	a0,s1
 80081ac:	180000ef          	jal	ra,800832c <_free_r>
 80081b0:	0384a783          	lw	a5,56(s1)
 80081b4:	02078c63          	beqz	a5,80081ec <_reclaim_reent+0xec>
 80081b8:	03c4a783          	lw	a5,60(s1)
 80081bc:	00048513          	mv	a0,s1
 80081c0:	000780e7          	jalr	a5
 80081c4:	2e04a583          	lw	a1,736(s1)
 80081c8:	02058263          	beqz	a1,80081ec <_reclaim_reent+0xec>
 80081cc:	01812403          	lw	s0,24(sp)
 80081d0:	01c12083          	lw	ra,28(sp)
 80081d4:	01012903          	lw	s2,16(sp)
 80081d8:	00c12983          	lw	s3,12(sp)
 80081dc:	00048513          	mv	a0,s1
 80081e0:	01412483          	lw	s1,20(sp)
 80081e4:	02010113          	addi	sp,sp,32
 80081e8:	ed9ff06f          	j	80080c0 <cleanup_glue>
 80081ec:	01c12083          	lw	ra,28(sp)
 80081f0:	01812403          	lw	s0,24(sp)
 80081f4:	01412483          	lw	s1,20(sp)
 80081f8:	01012903          	lw	s2,16(sp)
 80081fc:	00c12983          	lw	s3,12(sp)
 8008200:	02010113          	addi	sp,sp,32
 8008204:	00008067          	ret
 8008208:	00008067          	ret

0800820c <_malloc_trim_r>:
 800820c:	fe010113          	addi	sp,sp,-32
 8008210:	01212823          	sw	s2,16(sp)
 8008214:	00812c23          	sw	s0,24(sp)
 8008218:	00912a23          	sw	s1,20(sp)
 800821c:	01312623          	sw	s3,12(sp)
 8008220:	00058413          	mv	s0,a1
 8008224:	00112e23          	sw	ra,28(sp)
 8008228:	00050993          	mv	s3,a0
 800822c:	c2818913          	addi	s2,gp,-984 # 800d428 <__malloc_av_>
 8008230:	36d000ef          	jal	ra,8008d9c <__malloc_lock>
 8008234:	00892683          	lw	a3,8(s2)
 8008238:	00001737          	lui	a4,0x1
 800823c:	fef70793          	addi	a5,a4,-17 # fef <_start-0x8003011>
 8008240:	0046a483          	lw	s1,4(a3)
 8008244:	40878433          	sub	s0,a5,s0
 8008248:	ffc4f493          	andi	s1,s1,-4
 800824c:	00940433          	add	s0,s0,s1
 8008250:	00c45413          	srli	s0,s0,0xc
 8008254:	fff40413          	addi	s0,s0,-1
 8008258:	00c41413          	slli	s0,s0,0xc
 800825c:	00e44e63          	blt	s0,a4,8008278 <_malloc_trim_r+0x6c>
 8008260:	00000593          	li	a1,0
 8008264:	00098513          	mv	a0,s3
 8008268:	33d000ef          	jal	ra,8008da4 <_sbrk_r>
 800826c:	00892783          	lw	a5,8(s2)
 8008270:	009787b3          	add	a5,a5,s1
 8008274:	02f50663          	beq	a0,a5,80082a0 <_malloc_trim_r+0x94>
 8008278:	00098513          	mv	a0,s3
 800827c:	325000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008280:	01c12083          	lw	ra,28(sp)
 8008284:	01812403          	lw	s0,24(sp)
 8008288:	01412483          	lw	s1,20(sp)
 800828c:	01012903          	lw	s2,16(sp)
 8008290:	00c12983          	lw	s3,12(sp)
 8008294:	00000513          	li	a0,0
 8008298:	02010113          	addi	sp,sp,32
 800829c:	00008067          	ret
 80082a0:	408005b3          	neg	a1,s0
 80082a4:	00098513          	mv	a0,s3
 80082a8:	2fd000ef          	jal	ra,8008da4 <_sbrk_r>
 80082ac:	fff00793          	li	a5,-1
 80082b0:	04f50463          	beq	a0,a5,80082f8 <_malloc_trim_r+0xec>
 80082b4:	1801a783          	lw	a5,384(gp) # 800d980 <__malloc_current_mallinfo>
 80082b8:	00892683          	lw	a3,8(s2)
 80082bc:	408484b3          	sub	s1,s1,s0
 80082c0:	0014e493          	ori	s1,s1,1
 80082c4:	40878433          	sub	s0,a5,s0
 80082c8:	00098513          	mv	a0,s3
 80082cc:	0096a223          	sw	s1,4(a3)
 80082d0:	1881a023          	sw	s0,384(gp) # 800d980 <__malloc_current_mallinfo>
 80082d4:	2cd000ef          	jal	ra,8008da0 <__malloc_unlock>
 80082d8:	01c12083          	lw	ra,28(sp)
 80082dc:	01812403          	lw	s0,24(sp)
 80082e0:	01412483          	lw	s1,20(sp)
 80082e4:	01012903          	lw	s2,16(sp)
 80082e8:	00c12983          	lw	s3,12(sp)
 80082ec:	00100513          	li	a0,1
 80082f0:	02010113          	addi	sp,sp,32
 80082f4:	00008067          	ret
 80082f8:	00000593          	li	a1,0
 80082fc:	00098513          	mv	a0,s3
 8008300:	2a5000ef          	jal	ra,8008da4 <_sbrk_r>
 8008304:	00892703          	lw	a4,8(s2)
 8008308:	00f00693          	li	a3,15
 800830c:	40e507b3          	sub	a5,a0,a4
 8008310:	f6f6d4e3          	ble	a5,a3,8008278 <_malloc_trim_r+0x6c>
 8008314:	1581a683          	lw	a3,344(gp) # 800d958 <__malloc_sbrk_base>
 8008318:	0017e793          	ori	a5,a5,1
 800831c:	00f72223          	sw	a5,4(a4)
 8008320:	40d50533          	sub	a0,a0,a3
 8008324:	18a1a023          	sw	a0,384(gp) # 800d980 <__malloc_current_mallinfo>
 8008328:	f51ff06f          	j	8008278 <_malloc_trim_r+0x6c>

0800832c <_free_r>:
 800832c:	12058663          	beqz	a1,8008458 <_free_r+0x12c>
 8008330:	ff010113          	addi	sp,sp,-16
 8008334:	00812423          	sw	s0,8(sp)
 8008338:	00912223          	sw	s1,4(sp)
 800833c:	00058413          	mv	s0,a1
 8008340:	00050493          	mv	s1,a0
 8008344:	00112623          	sw	ra,12(sp)
 8008348:	255000ef          	jal	ra,8008d9c <__malloc_lock>
 800834c:	ffc42503          	lw	a0,-4(s0)
 8008350:	ff840713          	addi	a4,s0,-8
 8008354:	ffe57793          	andi	a5,a0,-2
 8008358:	00f70633          	add	a2,a4,a5
 800835c:	c2818593          	addi	a1,gp,-984 # 800d428 <__malloc_av_>
 8008360:	00462683          	lw	a3,4(a2)
 8008364:	0085a803          	lw	a6,8(a1)
 8008368:	ffc6f693          	andi	a3,a3,-4
 800836c:	18c80e63          	beq	a6,a2,8008508 <_free_r+0x1dc>
 8008370:	00d62223          	sw	a3,4(a2)
 8008374:	00157513          	andi	a0,a0,1
 8008378:	00d60833          	add	a6,a2,a3
 800837c:	0a051063          	bnez	a0,800841c <_free_r+0xf0>
 8008380:	ff842303          	lw	t1,-8(s0)
 8008384:	00482803          	lw	a6,4(a6)
 8008388:	40670733          	sub	a4,a4,t1
 800838c:	00872883          	lw	a7,8(a4)
 8008390:	c3018513          	addi	a0,gp,-976 # 800d430 <__malloc_av_+0x8>
 8008394:	006787b3          	add	a5,a5,t1
 8008398:	00187813          	andi	a6,a6,1
 800839c:	14a88063          	beq	a7,a0,80084dc <_free_r+0x1b0>
 80083a0:	00c72303          	lw	t1,12(a4)
 80083a4:	0068a623          	sw	t1,12(a7)
 80083a8:	01132423          	sw	a7,8(t1)
 80083ac:	1c080663          	beqz	a6,8008578 <_free_r+0x24c>
 80083b0:	0017e693          	ori	a3,a5,1
 80083b4:	00d72223          	sw	a3,4(a4)
 80083b8:	00f62023          	sw	a5,0(a2)
 80083bc:	1ff00693          	li	a3,511
 80083c0:	0af6e863          	bltu	a3,a5,8008470 <_free_r+0x144>
 80083c4:	0037d793          	srli	a5,a5,0x3
 80083c8:	00178693          	addi	a3,a5,1
 80083cc:	00369693          	slli	a3,a3,0x3
 80083d0:	0045a803          	lw	a6,4(a1)
 80083d4:	00d586b3          	add	a3,a1,a3
 80083d8:	0006a503          	lw	a0,0(a3)
 80083dc:	4027d613          	srai	a2,a5,0x2
 80083e0:	00100793          	li	a5,1
 80083e4:	00c797b3          	sll	a5,a5,a2
 80083e8:	0107e7b3          	or	a5,a5,a6
 80083ec:	ff868613          	addi	a2,a3,-8
 80083f0:	00c72623          	sw	a2,12(a4)
 80083f4:	00a72423          	sw	a0,8(a4)
 80083f8:	00f5a223          	sw	a5,4(a1)
 80083fc:	00e6a023          	sw	a4,0(a3)
 8008400:	00e52623          	sw	a4,12(a0)
 8008404:	00812403          	lw	s0,8(sp)
 8008408:	00c12083          	lw	ra,12(sp)
 800840c:	00048513          	mv	a0,s1
 8008410:	00412483          	lw	s1,4(sp)
 8008414:	01010113          	addi	sp,sp,16
 8008418:	1890006f          	j	8008da0 <__malloc_unlock>
 800841c:	00482503          	lw	a0,4(a6)
 8008420:	00157513          	andi	a0,a0,1
 8008424:	02051c63          	bnez	a0,800845c <_free_r+0x130>
 8008428:	00d787b3          	add	a5,a5,a3
 800842c:	c3018513          	addi	a0,gp,-976 # 800d430 <__malloc_av_+0x8>
 8008430:	00862683          	lw	a3,8(a2)
 8008434:	0017e893          	ori	a7,a5,1
 8008438:	00f70833          	add	a6,a4,a5
 800843c:	14a68a63          	beq	a3,a0,8008590 <_free_r+0x264>
 8008440:	00c62603          	lw	a2,12(a2)
 8008444:	00c6a623          	sw	a2,12(a3)
 8008448:	00d62423          	sw	a3,8(a2)
 800844c:	01172223          	sw	a7,4(a4)
 8008450:	00f82023          	sw	a5,0(a6)
 8008454:	f69ff06f          	j	80083bc <_free_r+0x90>
 8008458:	00008067          	ret
 800845c:	0017e693          	ori	a3,a5,1
 8008460:	fed42e23          	sw	a3,-4(s0)
 8008464:	00f62023          	sw	a5,0(a2)
 8008468:	1ff00693          	li	a3,511
 800846c:	f4f6fce3          	bleu	a5,a3,80083c4 <_free_r+0x98>
 8008470:	0097d693          	srli	a3,a5,0x9
 8008474:	00400613          	li	a2,4
 8008478:	0cd66e63          	bltu	a2,a3,8008554 <_free_r+0x228>
 800847c:	0067d693          	srli	a3,a5,0x6
 8008480:	03968513          	addi	a0,a3,57
 8008484:	03868613          	addi	a2,a3,56
 8008488:	00351513          	slli	a0,a0,0x3
 800848c:	00a58533          	add	a0,a1,a0
 8008490:	00052683          	lw	a3,0(a0)
 8008494:	ff850513          	addi	a0,a0,-8
 8008498:	10d50a63          	beq	a0,a3,80085ac <_free_r+0x280>
 800849c:	0046a603          	lw	a2,4(a3)
 80084a0:	ffc67613          	andi	a2,a2,-4
 80084a4:	00c7f663          	bleu	a2,a5,80084b0 <_free_r+0x184>
 80084a8:	0086a683          	lw	a3,8(a3)
 80084ac:	fed518e3          	bne	a0,a3,800849c <_free_r+0x170>
 80084b0:	00c6a503          	lw	a0,12(a3)
 80084b4:	00a72623          	sw	a0,12(a4)
 80084b8:	00d72423          	sw	a3,8(a4)
 80084bc:	00812403          	lw	s0,8(sp)
 80084c0:	00e52423          	sw	a4,8(a0)
 80084c4:	00c12083          	lw	ra,12(sp)
 80084c8:	00048513          	mv	a0,s1
 80084cc:	00412483          	lw	s1,4(sp)
 80084d0:	00e6a623          	sw	a4,12(a3)
 80084d4:	01010113          	addi	sp,sp,16
 80084d8:	0c90006f          	j	8008da0 <__malloc_unlock>
 80084dc:	12081863          	bnez	a6,800860c <_free_r+0x2e0>
 80084e0:	00862583          	lw	a1,8(a2)
 80084e4:	00c62603          	lw	a2,12(a2)
 80084e8:	00f687b3          	add	a5,a3,a5
 80084ec:	0017e693          	ori	a3,a5,1
 80084f0:	00c5a623          	sw	a2,12(a1)
 80084f4:	00b62423          	sw	a1,8(a2)
 80084f8:	00d72223          	sw	a3,4(a4)
 80084fc:	00f70733          	add	a4,a4,a5
 8008500:	00f72023          	sw	a5,0(a4)
 8008504:	f01ff06f          	j	8008404 <_free_r+0xd8>
 8008508:	00157513          	andi	a0,a0,1
 800850c:	00d787b3          	add	a5,a5,a3
 8008510:	02051063          	bnez	a0,8008530 <_free_r+0x204>
 8008514:	ff842503          	lw	a0,-8(s0)
 8008518:	40a70733          	sub	a4,a4,a0
 800851c:	00c72683          	lw	a3,12(a4)
 8008520:	00872603          	lw	a2,8(a4)
 8008524:	00a787b3          	add	a5,a5,a0
 8008528:	00d62623          	sw	a3,12(a2)
 800852c:	00c6a423          	sw	a2,8(a3)
 8008530:	0017e613          	ori	a2,a5,1
 8008534:	15c1a683          	lw	a3,348(gp) # 800d95c <__malloc_trim_threshold>
 8008538:	00c72223          	sw	a2,4(a4)
 800853c:	00e5a423          	sw	a4,8(a1)
 8008540:	ecd7e2e3          	bltu	a5,a3,8008404 <_free_r+0xd8>
 8008544:	1781a583          	lw	a1,376(gp) # 800d978 <__malloc_top_pad>
 8008548:	00048513          	mv	a0,s1
 800854c:	cc1ff0ef          	jal	ra,800820c <_malloc_trim_r>
 8008550:	eb5ff06f          	j	8008404 <_free_r+0xd8>
 8008554:	01400613          	li	a2,20
 8008558:	02d67463          	bleu	a3,a2,8008580 <_free_r+0x254>
 800855c:	05400613          	li	a2,84
 8008560:	06d66463          	bltu	a2,a3,80085c8 <_free_r+0x29c>
 8008564:	00c7d693          	srli	a3,a5,0xc
 8008568:	06f68513          	addi	a0,a3,111
 800856c:	06e68613          	addi	a2,a3,110
 8008570:	00351513          	slli	a0,a0,0x3
 8008574:	f19ff06f          	j	800848c <_free_r+0x160>
 8008578:	00d787b3          	add	a5,a5,a3
 800857c:	eb5ff06f          	j	8008430 <_free_r+0x104>
 8008580:	05c68513          	addi	a0,a3,92
 8008584:	05b68613          	addi	a2,a3,91
 8008588:	00351513          	slli	a0,a0,0x3
 800858c:	f01ff06f          	j	800848c <_free_r+0x160>
 8008590:	00e5aa23          	sw	a4,20(a1)
 8008594:	00e5a823          	sw	a4,16(a1)
 8008598:	00a72623          	sw	a0,12(a4)
 800859c:	00a72423          	sw	a0,8(a4)
 80085a0:	01172223          	sw	a7,4(a4)
 80085a4:	00f82023          	sw	a5,0(a6)
 80085a8:	e5dff06f          	j	8008404 <_free_r+0xd8>
 80085ac:	0045a803          	lw	a6,4(a1)
 80085b0:	40265613          	srai	a2,a2,0x2
 80085b4:	00100793          	li	a5,1
 80085b8:	00c79633          	sll	a2,a5,a2
 80085bc:	01066633          	or	a2,a2,a6
 80085c0:	00c5a223          	sw	a2,4(a1)
 80085c4:	ef1ff06f          	j	80084b4 <_free_r+0x188>
 80085c8:	15400613          	li	a2,340
 80085cc:	00d66c63          	bltu	a2,a3,80085e4 <_free_r+0x2b8>
 80085d0:	00f7d693          	srli	a3,a5,0xf
 80085d4:	07868513          	addi	a0,a3,120
 80085d8:	07768613          	addi	a2,a3,119
 80085dc:	00351513          	slli	a0,a0,0x3
 80085e0:	eadff06f          	j	800848c <_free_r+0x160>
 80085e4:	55400613          	li	a2,1364
 80085e8:	00d66c63          	bltu	a2,a3,8008600 <_free_r+0x2d4>
 80085ec:	0127d693          	srli	a3,a5,0x12
 80085f0:	07d68513          	addi	a0,a3,125
 80085f4:	07c68613          	addi	a2,a3,124
 80085f8:	00351513          	slli	a0,a0,0x3
 80085fc:	e91ff06f          	j	800848c <_free_r+0x160>
 8008600:	3f800513          	li	a0,1016
 8008604:	07e00613          	li	a2,126
 8008608:	e85ff06f          	j	800848c <_free_r+0x160>
 800860c:	0017e693          	ori	a3,a5,1
 8008610:	00d72223          	sw	a3,4(a4)
 8008614:	00f62023          	sw	a5,0(a2)
 8008618:	dedff06f          	j	8008404 <_free_r+0xd8>

0800861c <_malloc_r>:
 800861c:	fd010113          	addi	sp,sp,-48
 8008620:	02912223          	sw	s1,36(sp)
 8008624:	01312e23          	sw	s3,28(sp)
 8008628:	02112623          	sw	ra,44(sp)
 800862c:	02812423          	sw	s0,40(sp)
 8008630:	03212023          	sw	s2,32(sp)
 8008634:	01412c23          	sw	s4,24(sp)
 8008638:	01512a23          	sw	s5,20(sp)
 800863c:	01612823          	sw	s6,16(sp)
 8008640:	01712623          	sw	s7,12(sp)
 8008644:	01812423          	sw	s8,8(sp)
 8008648:	01912223          	sw	s9,4(sp)
 800864c:	00b58493          	addi	s1,a1,11
 8008650:	01600793          	li	a5,22
 8008654:	00050993          	mv	s3,a0
 8008658:	0697e463          	bltu	a5,s1,80086c0 <_malloc_r+0xa4>
 800865c:	01000793          	li	a5,16
 8008660:	20b7ec63          	bltu	a5,a1,8008878 <_malloc_r+0x25c>
 8008664:	738000ef          	jal	ra,8008d9c <__malloc_lock>
 8008668:	01000493          	li	s1,16
 800866c:	00200613          	li	a2,2
 8008670:	01800793          	li	a5,24
 8008674:	c2818913          	addi	s2,gp,-984 # 800d428 <__malloc_av_>
 8008678:	00f907b3          	add	a5,s2,a5
 800867c:	0047a403          	lw	s0,4(a5)
 8008680:	ff878713          	addi	a4,a5,-8
 8008684:	24e40263          	beq	s0,a4,80088c8 <_malloc_r+0x2ac>
 8008688:	00442783          	lw	a5,4(s0)
 800868c:	00c42683          	lw	a3,12(s0)
 8008690:	00842603          	lw	a2,8(s0)
 8008694:	ffc7f793          	andi	a5,a5,-4
 8008698:	00f407b3          	add	a5,s0,a5
 800869c:	0047a703          	lw	a4,4(a5)
 80086a0:	00d62623          	sw	a3,12(a2)
 80086a4:	00c6a423          	sw	a2,8(a3)
 80086a8:	00176713          	ori	a4,a4,1
 80086ac:	00098513          	mv	a0,s3
 80086b0:	00e7a223          	sw	a4,4(a5)
 80086b4:	6ec000ef          	jal	ra,8008da0 <__malloc_unlock>
 80086b8:	00840513          	addi	a0,s0,8
 80086bc:	1c80006f          	j	8008884 <_malloc_r+0x268>
 80086c0:	ff84f493          	andi	s1,s1,-8
 80086c4:	1a04ca63          	bltz	s1,8008878 <_malloc_r+0x25c>
 80086c8:	1ab4e863          	bltu	s1,a1,8008878 <_malloc_r+0x25c>
 80086cc:	6d0000ef          	jal	ra,8008d9c <__malloc_lock>
 80086d0:	1f700793          	li	a5,503
 80086d4:	4697f863          	bleu	s1,a5,8008b44 <_malloc_r+0x528>
 80086d8:	0094d793          	srli	a5,s1,0x9
 80086dc:	1c078e63          	beqz	a5,80088b8 <_malloc_r+0x29c>
 80086e0:	00400713          	li	a4,4
 80086e4:	3ef76c63          	bltu	a4,a5,8008adc <_malloc_r+0x4c0>
 80086e8:	0064d793          	srli	a5,s1,0x6
 80086ec:	03978613          	addi	a2,a5,57
 80086f0:	03878513          	addi	a0,a5,56
 80086f4:	00361693          	slli	a3,a2,0x3
 80086f8:	c2818913          	addi	s2,gp,-984 # 800d428 <__malloc_av_>
 80086fc:	00d906b3          	add	a3,s2,a3
 8008700:	0046a403          	lw	s0,4(a3)
 8008704:	ff868693          	addi	a3,a3,-8
 8008708:	02868c63          	beq	a3,s0,8008740 <_malloc_r+0x124>
 800870c:	00442783          	lw	a5,4(s0)
 8008710:	00f00593          	li	a1,15
 8008714:	ffc7f793          	andi	a5,a5,-4
 8008718:	40978733          	sub	a4,a5,s1
 800871c:	02e5c063          	blt	a1,a4,800873c <_malloc_r+0x120>
 8008720:	34075863          	bgez	a4,8008a70 <_malloc_r+0x454>
 8008724:	00c42403          	lw	s0,12(s0)
 8008728:	00868c63          	beq	a3,s0,8008740 <_malloc_r+0x124>
 800872c:	00442783          	lw	a5,4(s0)
 8008730:	ffc7f793          	andi	a5,a5,-4
 8008734:	40978733          	sub	a4,a5,s1
 8008738:	fee5d4e3          	ble	a4,a1,8008720 <_malloc_r+0x104>
 800873c:	00050613          	mv	a2,a0
 8008740:	01092403          	lw	s0,16(s2)
 8008744:	00890813          	addi	a6,s2,8
 8008748:	19040c63          	beq	s0,a6,80088e0 <_malloc_r+0x2c4>
 800874c:	00442583          	lw	a1,4(s0)
 8008750:	00f00713          	li	a4,15
 8008754:	ffc5f593          	andi	a1,a1,-4
 8008758:	409587b3          	sub	a5,a1,s1
 800875c:	40f74a63          	blt	a4,a5,8008b70 <_malloc_r+0x554>
 8008760:	01092a23          	sw	a6,20(s2)
 8008764:	01092823          	sw	a6,16(s2)
 8008768:	3e07d463          	bgez	a5,8008b50 <_malloc_r+0x534>
 800876c:	1ff00793          	li	a5,511
 8008770:	30b7e663          	bltu	a5,a1,8008a7c <_malloc_r+0x460>
 8008774:	0035d593          	srli	a1,a1,0x3
 8008778:	00158793          	addi	a5,a1,1
 800877c:	00379793          	slli	a5,a5,0x3
 8008780:	00492503          	lw	a0,4(s2)
 8008784:	00f907b3          	add	a5,s2,a5
 8008788:	0007a683          	lw	a3,0(a5)
 800878c:	4025d593          	srai	a1,a1,0x2
 8008790:	00100713          	li	a4,1
 8008794:	00b71733          	sll	a4,a4,a1
 8008798:	00a76733          	or	a4,a4,a0
 800879c:	ff878593          	addi	a1,a5,-8
 80087a0:	00b42623          	sw	a1,12(s0)
 80087a4:	00d42423          	sw	a3,8(s0)
 80087a8:	00e92223          	sw	a4,4(s2)
 80087ac:	0087a023          	sw	s0,0(a5)
 80087b0:	0086a623          	sw	s0,12(a3)
 80087b4:	40265793          	srai	a5,a2,0x2
 80087b8:	00100693          	li	a3,1
 80087bc:	00f696b3          	sll	a3,a3,a5
 80087c0:	12d76a63          	bltu	a4,a3,80088f4 <_malloc_r+0x2d8>
 80087c4:	00e6f7b3          	and	a5,a3,a4
 80087c8:	02079463          	bnez	a5,80087f0 <_malloc_r+0x1d4>
 80087cc:	00169693          	slli	a3,a3,0x1
 80087d0:	ffc67613          	andi	a2,a2,-4
 80087d4:	00e6f7b3          	and	a5,a3,a4
 80087d8:	00460613          	addi	a2,a2,4
 80087dc:	00079a63          	bnez	a5,80087f0 <_malloc_r+0x1d4>
 80087e0:	00169693          	slli	a3,a3,0x1
 80087e4:	00e6f7b3          	and	a5,a3,a4
 80087e8:	00460613          	addi	a2,a2,4
 80087ec:	fe078ae3          	beqz	a5,80087e0 <_malloc_r+0x1c4>
 80087f0:	00f00513          	li	a0,15
 80087f4:	00361893          	slli	a7,a2,0x3
 80087f8:	011908b3          	add	a7,s2,a7
 80087fc:	00088593          	mv	a1,a7
 8008800:	00060313          	mv	t1,a2
 8008804:	00c5a403          	lw	s0,12(a1)
 8008808:	00859a63          	bne	a1,s0,800881c <_malloc_r+0x200>
 800880c:	2f40006f          	j	8008b00 <_malloc_r+0x4e4>
 8008810:	30075263          	bgez	a4,8008b14 <_malloc_r+0x4f8>
 8008814:	00c42403          	lw	s0,12(s0)
 8008818:	2e858463          	beq	a1,s0,8008b00 <_malloc_r+0x4e4>
 800881c:	00442783          	lw	a5,4(s0)
 8008820:	ffc7f793          	andi	a5,a5,-4
 8008824:	40978733          	sub	a4,a5,s1
 8008828:	fee554e3          	ble	a4,a0,8008810 <_malloc_r+0x1f4>
 800882c:	00c42683          	lw	a3,12(s0)
 8008830:	00842603          	lw	a2,8(s0)
 8008834:	0014e593          	ori	a1,s1,1
 8008838:	00b42223          	sw	a1,4(s0)
 800883c:	00d62623          	sw	a3,12(a2)
 8008840:	00c6a423          	sw	a2,8(a3)
 8008844:	009404b3          	add	s1,s0,s1
 8008848:	00992a23          	sw	s1,20(s2)
 800884c:	00992823          	sw	s1,16(s2)
 8008850:	00176693          	ori	a3,a4,1
 8008854:	0104a623          	sw	a6,12(s1)
 8008858:	0104a423          	sw	a6,8(s1)
 800885c:	00d4a223          	sw	a3,4(s1)
 8008860:	00f407b3          	add	a5,s0,a5
 8008864:	00098513          	mv	a0,s3
 8008868:	00e7a023          	sw	a4,0(a5)
 800886c:	534000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008870:	00840513          	addi	a0,s0,8
 8008874:	0100006f          	j	8008884 <_malloc_r+0x268>
 8008878:	00c00793          	li	a5,12
 800887c:	00f9a023          	sw	a5,0(s3)
 8008880:	00000513          	li	a0,0
 8008884:	02c12083          	lw	ra,44(sp)
 8008888:	02812403          	lw	s0,40(sp)
 800888c:	02412483          	lw	s1,36(sp)
 8008890:	02012903          	lw	s2,32(sp)
 8008894:	01c12983          	lw	s3,28(sp)
 8008898:	01812a03          	lw	s4,24(sp)
 800889c:	01412a83          	lw	s5,20(sp)
 80088a0:	01012b03          	lw	s6,16(sp)
 80088a4:	00c12b83          	lw	s7,12(sp)
 80088a8:	00812c03          	lw	s8,8(sp)
 80088ac:	00412c83          	lw	s9,4(sp)
 80088b0:	03010113          	addi	sp,sp,48
 80088b4:	00008067          	ret
 80088b8:	20000693          	li	a3,512
 80088bc:	04000613          	li	a2,64
 80088c0:	03f00513          	li	a0,63
 80088c4:	e35ff06f          	j	80086f8 <_malloc_r+0xdc>
 80088c8:	00c7a403          	lw	s0,12(a5)
 80088cc:	00260613          	addi	a2,a2,2
 80088d0:	da879ce3          	bne	a5,s0,8008688 <_malloc_r+0x6c>
 80088d4:	01092403          	lw	s0,16(s2)
 80088d8:	00890813          	addi	a6,s2,8
 80088dc:	e70418e3          	bne	s0,a6,800874c <_malloc_r+0x130>
 80088e0:	00492703          	lw	a4,4(s2)
 80088e4:	40265793          	srai	a5,a2,0x2
 80088e8:	00100693          	li	a3,1
 80088ec:	00f696b3          	sll	a3,a3,a5
 80088f0:	ecd77ae3          	bleu	a3,a4,80087c4 <_malloc_r+0x1a8>
 80088f4:	00892403          	lw	s0,8(s2)
 80088f8:	00442783          	lw	a5,4(s0)
 80088fc:	ffc7fb93          	andi	s7,a5,-4
 8008900:	009be863          	bltu	s7,s1,8008910 <_malloc_r+0x2f4>
 8008904:	409b8733          	sub	a4,s7,s1
 8008908:	00f00793          	li	a5,15
 800890c:	12e7ce63          	blt	a5,a4,8008a48 <_malloc_r+0x42c>
 8008910:	1781aa03          	lw	s4,376(gp) # 800d978 <__malloc_top_pad>
 8008914:	1581a703          	lw	a4,344(gp) # 800d958 <__malloc_sbrk_base>
 8008918:	fff00793          	li	a5,-1
 800891c:	01740c33          	add	s8,s0,s7
 8008920:	01448a33          	add	s4,s1,s4
 8008924:	32f70863          	beq	a4,a5,8008c54 <_malloc_r+0x638>
 8008928:	000017b7          	lui	a5,0x1
 800892c:	00f78793          	addi	a5,a5,15 # 100f <_start-0x8002ff1>
 8008930:	00fa0a33          	add	s4,s4,a5
 8008934:	fffff7b7          	lui	a5,0xfffff
 8008938:	00fa7a33          	and	s4,s4,a5
 800893c:	000a0593          	mv	a1,s4
 8008940:	00098513          	mv	a0,s3
 8008944:	460000ef          	jal	ra,8008da4 <_sbrk_r>
 8008948:	fff00793          	li	a5,-1
 800894c:	00050a93          	mv	s5,a0
 8008950:	26f50a63          	beq	a0,a5,8008bc4 <_malloc_r+0x5a8>
 8008954:	27856663          	bltu	a0,s8,8008bc0 <_malloc_r+0x5a4>
 8008958:	18018b13          	addi	s6,gp,384 # 800d980 <__malloc_current_mallinfo>
 800895c:	000b2703          	lw	a4,0(s6)
 8008960:	00ea0733          	add	a4,s4,a4
 8008964:	00eb2023          	sw	a4,0(s6)
 8008968:	00070793          	mv	a5,a4
 800896c:	34ac0c63          	beq	s8,a0,8008cc4 <_malloc_r+0x6a8>
 8008970:	1581a683          	lw	a3,344(gp) # 800d958 <__malloc_sbrk_base>
 8008974:	fff00713          	li	a4,-1
 8008978:	36e68463          	beq	a3,a4,8008ce0 <_malloc_r+0x6c4>
 800897c:	418a8c33          	sub	s8,s5,s8
 8008980:	00fc07b3          	add	a5,s8,a5
 8008984:	00fb2023          	sw	a5,0(s6)
 8008988:	007af793          	andi	a5,s5,7
 800898c:	00001737          	lui	a4,0x1
 8008990:	00078a63          	beqz	a5,80089a4 <_malloc_r+0x388>
 8008994:	40fa8ab3          	sub	s5,s5,a5
 8008998:	00870713          	addi	a4,a4,8 # 1008 <_start-0x8002ff8>
 800899c:	008a8a93          	addi	s5,s5,8
 80089a0:	40f70733          	sub	a4,a4,a5
 80089a4:	000017b7          	lui	a5,0x1
 80089a8:	fff78793          	addi	a5,a5,-1 # fff <_start-0x8003001>
 80089ac:	014a8a33          	add	s4,s5,s4
 80089b0:	00fa7a33          	and	s4,s4,a5
 80089b4:	41470a33          	sub	s4,a4,s4
 80089b8:	000a0593          	mv	a1,s4
 80089bc:	00098513          	mv	a0,s3
 80089c0:	3e4000ef          	jal	ra,8008da4 <_sbrk_r>
 80089c4:	fff00793          	li	a5,-1
 80089c8:	32f50463          	beq	a0,a5,8008cf0 <_malloc_r+0x6d4>
 80089cc:	415507b3          	sub	a5,a0,s5
 80089d0:	014787b3          	add	a5,a5,s4
 80089d4:	0017e793          	ori	a5,a5,1
 80089d8:	000b2703          	lw	a4,0(s6)
 80089dc:	01592423          	sw	s5,8(s2)
 80089e0:	00faa223          	sw	a5,4(s5)
 80089e4:	00ea0733          	add	a4,s4,a4
 80089e8:	00eb2023          	sw	a4,0(s6)
 80089ec:	2f240e63          	beq	s0,s2,8008ce8 <_malloc_r+0x6cc>
 80089f0:	00f00613          	li	a2,15
 80089f4:	31767463          	bleu	s7,a2,8008cfc <_malloc_r+0x6e0>
 80089f8:	00442683          	lw	a3,4(s0)
 80089fc:	ff4b8793          	addi	a5,s7,-12
 8008a00:	ff87f793          	andi	a5,a5,-8
 8008a04:	0016f693          	andi	a3,a3,1
 8008a08:	00f6e6b3          	or	a3,a3,a5
 8008a0c:	00d42223          	sw	a3,4(s0)
 8008a10:	00500593          	li	a1,5
 8008a14:	00f406b3          	add	a3,s0,a5
 8008a18:	00b6a223          	sw	a1,4(a3)
 8008a1c:	00b6a423          	sw	a1,8(a3)
 8008a20:	32f66063          	bltu	a2,a5,8008d40 <_malloc_r+0x724>
 8008a24:	004aa783          	lw	a5,4(s5)
 8008a28:	000a8413          	mv	s0,s5
 8008a2c:	1741a603          	lw	a2,372(gp) # 800d974 <__malloc_max_sbrked_mem>
 8008a30:	00e67463          	bleu	a4,a2,8008a38 <_malloc_r+0x41c>
 8008a34:	16e1aa23          	sw	a4,372(gp) # 800d974 <__malloc_max_sbrked_mem>
 8008a38:	1701a603          	lw	a2,368(gp) # 800d970 <__malloc_max_total_mem>
 8008a3c:	18e67863          	bleu	a4,a2,8008bcc <_malloc_r+0x5b0>
 8008a40:	16e1a823          	sw	a4,368(gp) # 800d970 <__malloc_max_total_mem>
 8008a44:	1880006f          	j	8008bcc <_malloc_r+0x5b0>
 8008a48:	0014e793          	ori	a5,s1,1
 8008a4c:	00f42223          	sw	a5,4(s0)
 8008a50:	009404b3          	add	s1,s0,s1
 8008a54:	00992423          	sw	s1,8(s2)
 8008a58:	00176713          	ori	a4,a4,1
 8008a5c:	00098513          	mv	a0,s3
 8008a60:	00e4a223          	sw	a4,4(s1)
 8008a64:	33c000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008a68:	00840513          	addi	a0,s0,8
 8008a6c:	e19ff06f          	j	8008884 <_malloc_r+0x268>
 8008a70:	00c42683          	lw	a3,12(s0)
 8008a74:	00842603          	lw	a2,8(s0)
 8008a78:	c21ff06f          	j	8008698 <_malloc_r+0x7c>
 8008a7c:	0095d793          	srli	a5,a1,0x9
 8008a80:	00400713          	li	a4,4
 8008a84:	12f77463          	bleu	a5,a4,8008bac <_malloc_r+0x590>
 8008a88:	01400713          	li	a4,20
 8008a8c:	1ef76663          	bltu	a4,a5,8008c78 <_malloc_r+0x65c>
 8008a90:	05c78693          	addi	a3,a5,92
 8008a94:	05b78713          	addi	a4,a5,91
 8008a98:	00369693          	slli	a3,a3,0x3
 8008a9c:	00d906b3          	add	a3,s2,a3
 8008aa0:	0006a783          	lw	a5,0(a3)
 8008aa4:	ff868693          	addi	a3,a3,-8
 8008aa8:	1af68a63          	beq	a3,a5,8008c5c <_malloc_r+0x640>
 8008aac:	0047a703          	lw	a4,4(a5)
 8008ab0:	ffc77713          	andi	a4,a4,-4
 8008ab4:	00e5f663          	bleu	a4,a1,8008ac0 <_malloc_r+0x4a4>
 8008ab8:	0087a783          	lw	a5,8(a5)
 8008abc:	fef698e3          	bne	a3,a5,8008aac <_malloc_r+0x490>
 8008ac0:	00c7a683          	lw	a3,12(a5)
 8008ac4:	00492703          	lw	a4,4(s2)
 8008ac8:	00d42623          	sw	a3,12(s0)
 8008acc:	00f42423          	sw	a5,8(s0)
 8008ad0:	0086a423          	sw	s0,8(a3)
 8008ad4:	0087a623          	sw	s0,12(a5)
 8008ad8:	cddff06f          	j	80087b4 <_malloc_r+0x198>
 8008adc:	01400713          	li	a4,20
 8008ae0:	10f77863          	bleu	a5,a4,8008bf0 <_malloc_r+0x5d4>
 8008ae4:	05400713          	li	a4,84
 8008ae8:	1af76663          	bltu	a4,a5,8008c94 <_malloc_r+0x678>
 8008aec:	00c4d793          	srli	a5,s1,0xc
 8008af0:	06f78613          	addi	a2,a5,111
 8008af4:	06e78513          	addi	a0,a5,110
 8008af8:	00361693          	slli	a3,a2,0x3
 8008afc:	bfdff06f          	j	80086f8 <_malloc_r+0xdc>
 8008b00:	00130313          	addi	t1,t1,1
 8008b04:	00337793          	andi	a5,t1,3
 8008b08:	00858593          	addi	a1,a1,8
 8008b0c:	ce079ce3          	bnez	a5,8008804 <_malloc_r+0x1e8>
 8008b10:	0fc0006f          	j	8008c0c <_malloc_r+0x5f0>
 8008b14:	00f407b3          	add	a5,s0,a5
 8008b18:	0047a703          	lw	a4,4(a5)
 8008b1c:	00c42683          	lw	a3,12(s0)
 8008b20:	00842603          	lw	a2,8(s0)
 8008b24:	00176713          	ori	a4,a4,1
 8008b28:	00e7a223          	sw	a4,4(a5)
 8008b2c:	00d62623          	sw	a3,12(a2)
 8008b30:	00098513          	mv	a0,s3
 8008b34:	00c6a423          	sw	a2,8(a3)
 8008b38:	268000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008b3c:	00840513          	addi	a0,s0,8
 8008b40:	d45ff06f          	j	8008884 <_malloc_r+0x268>
 8008b44:	0034d613          	srli	a2,s1,0x3
 8008b48:	00848793          	addi	a5,s1,8
 8008b4c:	b29ff06f          	j	8008674 <_malloc_r+0x58>
 8008b50:	00b405b3          	add	a1,s0,a1
 8008b54:	0045a783          	lw	a5,4(a1)
 8008b58:	00098513          	mv	a0,s3
 8008b5c:	0017e793          	ori	a5,a5,1
 8008b60:	00f5a223          	sw	a5,4(a1)
 8008b64:	23c000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008b68:	00840513          	addi	a0,s0,8
 8008b6c:	d19ff06f          	j	8008884 <_malloc_r+0x268>
 8008b70:	0014e713          	ori	a4,s1,1
 8008b74:	00e42223          	sw	a4,4(s0)
 8008b78:	009404b3          	add	s1,s0,s1
 8008b7c:	00992a23          	sw	s1,20(s2)
 8008b80:	00992823          	sw	s1,16(s2)
 8008b84:	0017e713          	ori	a4,a5,1
 8008b88:	0104a623          	sw	a6,12(s1)
 8008b8c:	0104a423          	sw	a6,8(s1)
 8008b90:	00e4a223          	sw	a4,4(s1)
 8008b94:	00b405b3          	add	a1,s0,a1
 8008b98:	00098513          	mv	a0,s3
 8008b9c:	00f5a023          	sw	a5,0(a1)
 8008ba0:	200000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008ba4:	00840513          	addi	a0,s0,8
 8008ba8:	cddff06f          	j	8008884 <_malloc_r+0x268>
 8008bac:	0065d793          	srli	a5,a1,0x6
 8008bb0:	03978693          	addi	a3,a5,57
 8008bb4:	03878713          	addi	a4,a5,56
 8008bb8:	00369693          	slli	a3,a3,0x3
 8008bbc:	ee1ff06f          	j	8008a9c <_malloc_r+0x480>
 8008bc0:	0f240863          	beq	s0,s2,8008cb0 <_malloc_r+0x694>
 8008bc4:	00892403          	lw	s0,8(s2)
 8008bc8:	00442783          	lw	a5,4(s0)
 8008bcc:	ffc7f793          	andi	a5,a5,-4
 8008bd0:	40978733          	sub	a4,a5,s1
 8008bd4:	0097e663          	bltu	a5,s1,8008be0 <_malloc_r+0x5c4>
 8008bd8:	00f00793          	li	a5,15
 8008bdc:	e6e7c6e3          	blt	a5,a4,8008a48 <_malloc_r+0x42c>
 8008be0:	00098513          	mv	a0,s3
 8008be4:	1bc000ef          	jal	ra,8008da0 <__malloc_unlock>
 8008be8:	00000513          	li	a0,0
 8008bec:	c99ff06f          	j	8008884 <_malloc_r+0x268>
 8008bf0:	05c78613          	addi	a2,a5,92
 8008bf4:	05b78513          	addi	a0,a5,91
 8008bf8:	00361693          	slli	a3,a2,0x3
 8008bfc:	afdff06f          	j	80086f8 <_malloc_r+0xdc>
 8008c00:	0088a783          	lw	a5,8(a7)
 8008c04:	fff60613          	addi	a2,a2,-1
 8008c08:	19179663          	bne	a5,a7,8008d94 <_malloc_r+0x778>
 8008c0c:	00367793          	andi	a5,a2,3
 8008c10:	ff888893          	addi	a7,a7,-8
 8008c14:	fe0796e3          	bnez	a5,8008c00 <_malloc_r+0x5e4>
 8008c18:	00492703          	lw	a4,4(s2)
 8008c1c:	fff6c793          	not	a5,a3
 8008c20:	00e7f7b3          	and	a5,a5,a4
 8008c24:	00f92223          	sw	a5,4(s2)
 8008c28:	00169693          	slli	a3,a3,0x1
 8008c2c:	ccd7e4e3          	bltu	a5,a3,80088f4 <_malloc_r+0x2d8>
 8008c30:	cc0682e3          	beqz	a3,80088f4 <_malloc_r+0x2d8>
 8008c34:	00f6f733          	and	a4,a3,a5
 8008c38:	00071a63          	bnez	a4,8008c4c <_malloc_r+0x630>
 8008c3c:	00169693          	slli	a3,a3,0x1
 8008c40:	00f6f733          	and	a4,a3,a5
 8008c44:	00430313          	addi	t1,t1,4
 8008c48:	fe070ae3          	beqz	a4,8008c3c <_malloc_r+0x620>
 8008c4c:	00030613          	mv	a2,t1
 8008c50:	ba5ff06f          	j	80087f4 <_malloc_r+0x1d8>
 8008c54:	010a0a13          	addi	s4,s4,16
 8008c58:	ce5ff06f          	j	800893c <_malloc_r+0x320>
 8008c5c:	00492503          	lw	a0,4(s2)
 8008c60:	40275593          	srai	a1,a4,0x2
 8008c64:	00100713          	li	a4,1
 8008c68:	00b71733          	sll	a4,a4,a1
 8008c6c:	00a76733          	or	a4,a4,a0
 8008c70:	00e92223          	sw	a4,4(s2)
 8008c74:	e55ff06f          	j	8008ac8 <_malloc_r+0x4ac>
 8008c78:	05400713          	li	a4,84
 8008c7c:	08f76663          	bltu	a4,a5,8008d08 <_malloc_r+0x6ec>
 8008c80:	00c5d793          	srli	a5,a1,0xc
 8008c84:	06f78693          	addi	a3,a5,111
 8008c88:	06e78713          	addi	a4,a5,110
 8008c8c:	00369693          	slli	a3,a3,0x3
 8008c90:	e0dff06f          	j	8008a9c <_malloc_r+0x480>
 8008c94:	15400713          	li	a4,340
 8008c98:	08f76663          	bltu	a4,a5,8008d24 <_malloc_r+0x708>
 8008c9c:	00f4d793          	srli	a5,s1,0xf
 8008ca0:	07878613          	addi	a2,a5,120
 8008ca4:	07778513          	addi	a0,a5,119
 8008ca8:	00361693          	slli	a3,a2,0x3
 8008cac:	a4dff06f          	j	80086f8 <_malloc_r+0xdc>
 8008cb0:	18018b13          	addi	s6,gp,384 # 800d980 <__malloc_current_mallinfo>
 8008cb4:	000b2783          	lw	a5,0(s6)
 8008cb8:	00fa07b3          	add	a5,s4,a5
 8008cbc:	00fb2023          	sw	a5,0(s6)
 8008cc0:	cb1ff06f          	j	8008970 <_malloc_r+0x354>
 8008cc4:	014c1693          	slli	a3,s8,0x14
 8008cc8:	ca0694e3          	bnez	a3,8008970 <_malloc_r+0x354>
 8008ccc:	00892403          	lw	s0,8(s2)
 8008cd0:	014b87b3          	add	a5,s7,s4
 8008cd4:	0017e793          	ori	a5,a5,1
 8008cd8:	00f42223          	sw	a5,4(s0)
 8008cdc:	d51ff06f          	j	8008a2c <_malloc_r+0x410>
 8008ce0:	1551ac23          	sw	s5,344(gp) # 800d958 <__malloc_sbrk_base>
 8008ce4:	ca5ff06f          	j	8008988 <_malloc_r+0x36c>
 8008ce8:	000a8413          	mv	s0,s5
 8008cec:	d41ff06f          	j	8008a2c <_malloc_r+0x410>
 8008cf0:	00100793          	li	a5,1
 8008cf4:	00000a13          	li	s4,0
 8008cf8:	ce1ff06f          	j	80089d8 <_malloc_r+0x3bc>
 8008cfc:	00100793          	li	a5,1
 8008d00:	00faa223          	sw	a5,4(s5)
 8008d04:	eddff06f          	j	8008be0 <_malloc_r+0x5c4>
 8008d08:	15400713          	li	a4,340
 8008d0c:	04f76863          	bltu	a4,a5,8008d5c <_malloc_r+0x740>
 8008d10:	00f5d793          	srli	a5,a1,0xf
 8008d14:	07878693          	addi	a3,a5,120
 8008d18:	07778713          	addi	a4,a5,119
 8008d1c:	00369693          	slli	a3,a3,0x3
 8008d20:	d7dff06f          	j	8008a9c <_malloc_r+0x480>
 8008d24:	55400713          	li	a4,1364
 8008d28:	04f76863          	bltu	a4,a5,8008d78 <_malloc_r+0x75c>
 8008d2c:	0124d793          	srli	a5,s1,0x12
 8008d30:	07d78613          	addi	a2,a5,125
 8008d34:	07c78513          	addi	a0,a5,124
 8008d38:	00361693          	slli	a3,a2,0x3
 8008d3c:	9bdff06f          	j	80086f8 <_malloc_r+0xdc>
 8008d40:	00840593          	addi	a1,s0,8
 8008d44:	00098513          	mv	a0,s3
 8008d48:	de4ff0ef          	jal	ra,800832c <_free_r>
 8008d4c:	00892403          	lw	s0,8(s2)
 8008d50:	000b2703          	lw	a4,0(s6)
 8008d54:	00442783          	lw	a5,4(s0)
 8008d58:	cd5ff06f          	j	8008a2c <_malloc_r+0x410>
 8008d5c:	55400713          	li	a4,1364
 8008d60:	02f76463          	bltu	a4,a5,8008d88 <_malloc_r+0x76c>
 8008d64:	0125d793          	srli	a5,a1,0x12
 8008d68:	07d78693          	addi	a3,a5,125
 8008d6c:	07c78713          	addi	a4,a5,124
 8008d70:	00369693          	slli	a3,a3,0x3
 8008d74:	d29ff06f          	j	8008a9c <_malloc_r+0x480>
 8008d78:	3f800693          	li	a3,1016
 8008d7c:	07f00613          	li	a2,127
 8008d80:	07e00513          	li	a0,126
 8008d84:	975ff06f          	j	80086f8 <_malloc_r+0xdc>
 8008d88:	3f800693          	li	a3,1016
 8008d8c:	07e00713          	li	a4,126
 8008d90:	d0dff06f          	j	8008a9c <_malloc_r+0x480>
 8008d94:	00492783          	lw	a5,4(s2)
 8008d98:	e91ff06f          	j	8008c28 <_malloc_r+0x60c>

08008d9c <__malloc_lock>:
 8008d9c:	00008067          	ret

08008da0 <__malloc_unlock>:
 8008da0:	00008067          	ret

08008da4 <_sbrk_r>:
 8008da4:	ff010113          	addi	sp,sp,-16
 8008da8:	00812423          	sw	s0,8(sp)
 8008dac:	00912223          	sw	s1,4(sp)
 8008db0:	00050493          	mv	s1,a0
 8008db4:	00058513          	mv	a0,a1
 8008db8:	00112623          	sw	ra,12(sp)
 8008dbc:	1a01ac23          	sw	zero,440(gp) # 800d9b8 <errno>
 8008dc0:	480010ef          	jal	ra,800a240 <_sbrk>
 8008dc4:	fff00793          	li	a5,-1
 8008dc8:	00f50c63          	beq	a0,a5,8008de0 <_sbrk_r+0x3c>
 8008dcc:	00c12083          	lw	ra,12(sp)
 8008dd0:	00812403          	lw	s0,8(sp)
 8008dd4:	00412483          	lw	s1,4(sp)
 8008dd8:	01010113          	addi	sp,sp,16
 8008ddc:	00008067          	ret
 8008de0:	1b81a783          	lw	a5,440(gp) # 800d9b8 <errno>
 8008de4:	fe0784e3          	beqz	a5,8008dcc <_sbrk_r+0x28>
 8008de8:	00c12083          	lw	ra,12(sp)
 8008dec:	00812403          	lw	s0,8(sp)
 8008df0:	00f4a023          	sw	a5,0(s1)
 8008df4:	00412483          	lw	s1,4(sp)
 8008df8:	01010113          	addi	sp,sp,16
 8008dfc:	00008067          	ret

08008e00 <__udivdi3>:
 8008e00:	fd010113          	addi	sp,sp,-48
 8008e04:	02812423          	sw	s0,40(sp)
 8008e08:	01412c23          	sw	s4,24(sp)
 8008e0c:	02112623          	sw	ra,44(sp)
 8008e10:	02912223          	sw	s1,36(sp)
 8008e14:	03212023          	sw	s2,32(sp)
 8008e18:	01312e23          	sw	s3,28(sp)
 8008e1c:	01512a23          	sw	s5,20(sp)
 8008e20:	01612823          	sw	s6,16(sp)
 8008e24:	01712623          	sw	s7,12(sp)
 8008e28:	01812423          	sw	s8,8(sp)
 8008e2c:	01912223          	sw	s9,4(sp)
 8008e30:	00050a13          	mv	s4,a0
 8008e34:	00058413          	mv	s0,a1
 8008e38:	22069e63          	bnez	a3,8009074 <__udivdi3+0x274>
 8008e3c:	00068993          	mv	s3,a3
 8008e40:	00060493          	mv	s1,a2
 8008e44:	00050913          	mv	s2,a0
 8008e48:	10c5fe63          	bleu	a2,a1,8008f64 <__udivdi3+0x164>
 8008e4c:	000107b7          	lui	a5,0x10
 8008e50:	00058a93          	mv	s5,a1
 8008e54:	2cf66e63          	bltu	a2,a5,8009130 <__udivdi3+0x330>
 8008e58:	010007b7          	lui	a5,0x1000
 8008e5c:	56f66a63          	bltu	a2,a5,80093d0 <__udivdi3+0x5d0>
 8008e60:	01865793          	srli	a5,a2,0x18
 8008e64:	01800993          	li	s3,24
 8008e68:	0800c737          	lui	a4,0x800c
 8008e6c:	32070713          	addi	a4,a4,800 # 800c320 <__clz_tab>
 8008e70:	00e787b3          	add	a5,a5,a4
 8008e74:	0007c783          	lbu	a5,0(a5) # 1000000 <_start-0x7004000>
 8008e78:	013789b3          	add	s3,a5,s3
 8008e7c:	02000793          	li	a5,32
 8008e80:	413787b3          	sub	a5,a5,s3
 8008e84:	00078c63          	beqz	a5,8008e9c <__udivdi3+0x9c>
 8008e88:	00f41433          	sll	s0,s0,a5
 8008e8c:	013a59b3          	srl	s3,s4,s3
 8008e90:	00f614b3          	sll	s1,a2,a5
 8008e94:	0089eab3          	or	s5,s3,s0
 8008e98:	00fa1933          	sll	s2,s4,a5
 8008e9c:	0104db13          	srli	s6,s1,0x10
 8008ea0:	000b0593          	mv	a1,s6
 8008ea4:	000a8513          	mv	a0,s5
 8008ea8:	3cd000ef          	jal	ra,8009a74 <__umodsi3>
 8008eac:	00050a13          	mv	s4,a0
 8008eb0:	000b0593          	mv	a1,s6
 8008eb4:	000a8513          	mv	a0,s5
 8008eb8:	01049a93          	slli	s5,s1,0x10
 8008ebc:	371000ef          	jal	ra,8009a2c <__udivsi3>
 8008ec0:	010ada93          	srli	s5,s5,0x10
 8008ec4:	00050593          	mv	a1,a0
 8008ec8:	00050413          	mv	s0,a0
 8008ecc:	000a8513          	mv	a0,s5
 8008ed0:	331000ef          	jal	ra,8009a00 <__mulsi3>
 8008ed4:	010a1a13          	slli	s4,s4,0x10
 8008ed8:	01095793          	srli	a5,s2,0x10
 8008edc:	00fa67b3          	or	a5,s4,a5
 8008ee0:	00a7fc63          	bleu	a0,a5,8008ef8 <__udivdi3+0xf8>
 8008ee4:	009787b3          	add	a5,a5,s1
 8008ee8:	fff40713          	addi	a4,s0,-1
 8008eec:	0097e463          	bltu	a5,s1,8008ef4 <__udivdi3+0xf4>
 8008ef0:	52a7e863          	bltu	a5,a0,8009420 <__udivdi3+0x620>
 8008ef4:	00070413          	mv	s0,a4
 8008ef8:	40a789b3          	sub	s3,a5,a0
 8008efc:	000b0593          	mv	a1,s6
 8008f00:	00098513          	mv	a0,s3
 8008f04:	371000ef          	jal	ra,8009a74 <__umodsi3>
 8008f08:	00050a13          	mv	s4,a0
 8008f0c:	000b0593          	mv	a1,s6
 8008f10:	00098513          	mv	a0,s3
 8008f14:	319000ef          	jal	ra,8009a2c <__udivsi3>
 8008f18:	01091913          	slli	s2,s2,0x10
 8008f1c:	00050593          	mv	a1,a0
 8008f20:	00050993          	mv	s3,a0
 8008f24:	010a1a13          	slli	s4,s4,0x10
 8008f28:	000a8513          	mv	a0,s5
 8008f2c:	01095913          	srli	s2,s2,0x10
 8008f30:	2d1000ef          	jal	ra,8009a00 <__mulsi3>
 8008f34:	012a6933          	or	s2,s4,s2
 8008f38:	00a97e63          	bleu	a0,s2,8008f54 <__udivdi3+0x154>
 8008f3c:	01248933          	add	s2,s1,s2
 8008f40:	fff98793          	addi	a5,s3,-1
 8008f44:	00996663          	bltu	s2,s1,8008f50 <__udivdi3+0x150>
 8008f48:	ffe98993          	addi	s3,s3,-2
 8008f4c:	00a96463          	bltu	s2,a0,8008f54 <__udivdi3+0x154>
 8008f50:	00078993          	mv	s3,a5
 8008f54:	01041513          	slli	a0,s0,0x10
 8008f58:	01356533          	or	a0,a0,s3
 8008f5c:	00000c13          	li	s8,0
 8008f60:	16c0006f          	j	80090cc <__udivdi3+0x2cc>
 8008f64:	00061a63          	bnez	a2,8008f78 <__udivdi3+0x178>
 8008f68:	00000593          	li	a1,0
 8008f6c:	00100513          	li	a0,1
 8008f70:	2bd000ef          	jal	ra,8009a2c <__udivsi3>
 8008f74:	00050493          	mv	s1,a0
 8008f78:	000107b7          	lui	a5,0x10
 8008f7c:	18f4ee63          	bltu	s1,a5,8009118 <__udivdi3+0x318>
 8008f80:	010007b7          	lui	a5,0x1000
 8008f84:	44f4ec63          	bltu	s1,a5,80093dc <__udivdi3+0x5dc>
 8008f88:	0184d793          	srli	a5,s1,0x18
 8008f8c:	01800993          	li	s3,24
 8008f90:	0800c737          	lui	a4,0x800c
 8008f94:	32070713          	addi	a4,a4,800 # 800c320 <__clz_tab>
 8008f98:	00e787b3          	add	a5,a5,a4
 8008f9c:	0007c783          	lbu	a5,0(a5) # 1000000 <_start-0x7004000>
 8008fa0:	013789b3          	add	s3,a5,s3
 8008fa4:	02000793          	li	a5,32
 8008fa8:	413787b3          	sub	a5,a5,s3
 8008fac:	18079e63          	bnez	a5,8009148 <__udivdi3+0x348>
 8008fb0:	01049b93          	slli	s7,s1,0x10
 8008fb4:	40940433          	sub	s0,s0,s1
 8008fb8:	0104db13          	srli	s6,s1,0x10
 8008fbc:	010bdb93          	srli	s7,s7,0x10
 8008fc0:	00100c13          	li	s8,1
 8008fc4:	000b0593          	mv	a1,s6
 8008fc8:	00040513          	mv	a0,s0
 8008fcc:	2a9000ef          	jal	ra,8009a74 <__umodsi3>
 8008fd0:	00050a13          	mv	s4,a0
 8008fd4:	000b0593          	mv	a1,s6
 8008fd8:	00040513          	mv	a0,s0
 8008fdc:	251000ef          	jal	ra,8009a2c <__udivsi3>
 8008fe0:	000b8593          	mv	a1,s7
 8008fe4:	00050413          	mv	s0,a0
 8008fe8:	219000ef          	jal	ra,8009a00 <__mulsi3>
 8008fec:	010a1a13          	slli	s4,s4,0x10
 8008ff0:	01095793          	srli	a5,s2,0x10
 8008ff4:	00fa67b3          	or	a5,s4,a5
 8008ff8:	00a7fc63          	bleu	a0,a5,8009010 <__udivdi3+0x210>
 8008ffc:	009787b3          	add	a5,a5,s1
 8009000:	fff40713          	addi	a4,s0,-1
 8009004:	0097e463          	bltu	a5,s1,800900c <__udivdi3+0x20c>
 8009008:	42a7e263          	bltu	a5,a0,800942c <__udivdi3+0x62c>
 800900c:	00070413          	mv	s0,a4
 8009010:	40a789b3          	sub	s3,a5,a0
 8009014:	000b0593          	mv	a1,s6
 8009018:	00098513          	mv	a0,s3
 800901c:	259000ef          	jal	ra,8009a74 <__umodsi3>
 8009020:	00050a13          	mv	s4,a0
 8009024:	000b0593          	mv	a1,s6
 8009028:	00098513          	mv	a0,s3
 800902c:	201000ef          	jal	ra,8009a2c <__udivsi3>
 8009030:	01091913          	slli	s2,s2,0x10
 8009034:	000b8593          	mv	a1,s7
 8009038:	010a1a13          	slli	s4,s4,0x10
 800903c:	01095913          	srli	s2,s2,0x10
 8009040:	00050993          	mv	s3,a0
 8009044:	012a6933          	or	s2,s4,s2
 8009048:	1b9000ef          	jal	ra,8009a00 <__mulsi3>
 800904c:	00a97e63          	bleu	a0,s2,8009068 <__udivdi3+0x268>
 8009050:	01248933          	add	s2,s1,s2
 8009054:	fff98793          	addi	a5,s3,-1
 8009058:	00996663          	bltu	s2,s1,8009064 <__udivdi3+0x264>
 800905c:	ffe98993          	addi	s3,s3,-2
 8009060:	00a96463          	bltu	s2,a0,8009068 <__udivdi3+0x268>
 8009064:	00078993          	mv	s3,a5
 8009068:	01041513          	slli	a0,s0,0x10
 800906c:	01356533          	or	a0,a0,s3
 8009070:	05c0006f          	j	80090cc <__udivdi3+0x2cc>
 8009074:	04d5e863          	bltu	a1,a3,80090c4 <__udivdi3+0x2c4>
 8009078:	000107b7          	lui	a5,0x10
 800907c:	08f6e463          	bltu	a3,a5,8009104 <__udivdi3+0x304>
 8009080:	010007b7          	lui	a5,0x1000
 8009084:	34f6e063          	bltu	a3,a5,80093c4 <__udivdi3+0x5c4>
 8009088:	0186d593          	srli	a1,a3,0x18
 800908c:	01800513          	li	a0,24
 8009090:	0800c737          	lui	a4,0x800c
 8009094:	32070713          	addi	a4,a4,800 # 800c320 <__clz_tab>
 8009098:	00e58733          	add	a4,a1,a4
 800909c:	00074783          	lbu	a5,0(a4)
 80090a0:	02000b13          	li	s6,32
 80090a4:	00a787b3          	add	a5,a5,a0
 80090a8:	40fb0b33          	sub	s6,s6,a5
 80090ac:	180b1063          	bnez	s6,800922c <__udivdi3+0x42c>
 80090b0:	3286ec63          	bltu	a3,s0,80093e8 <__udivdi3+0x5e8>
 80090b4:	00ca3633          	sltu	a2,s4,a2
 80090b8:	00164513          	xori	a0,a2,1
 80090bc:	00000c13          	li	s8,0
 80090c0:	00c0006f          	j	80090cc <__udivdi3+0x2cc>
 80090c4:	00000c13          	li	s8,0
 80090c8:	00000513          	li	a0,0
 80090cc:	000c0593          	mv	a1,s8
 80090d0:	02c12083          	lw	ra,44(sp)
 80090d4:	02812403          	lw	s0,40(sp)
 80090d8:	02412483          	lw	s1,36(sp)
 80090dc:	02012903          	lw	s2,32(sp)
 80090e0:	01c12983          	lw	s3,28(sp)
 80090e4:	01812a03          	lw	s4,24(sp)
 80090e8:	01412a83          	lw	s5,20(sp)
 80090ec:	01012b03          	lw	s6,16(sp)
 80090f0:	00c12b83          	lw	s7,12(sp)
 80090f4:	00812c03          	lw	s8,8(sp)
 80090f8:	00412c83          	lw	s9,4(sp)
 80090fc:	03010113          	addi	sp,sp,48
 8009100:	00008067          	ret
 8009104:	0ff00793          	li	a5,255
 8009108:	2ed7f663          	bleu	a3,a5,80093f4 <__udivdi3+0x5f4>
 800910c:	0086d593          	srli	a1,a3,0x8
 8009110:	00800513          	li	a0,8
 8009114:	f7dff06f          	j	8009090 <__udivdi3+0x290>
 8009118:	0ff00713          	li	a4,255
 800911c:	00048793          	mv	a5,s1
 8009120:	e69778e3          	bleu	s1,a4,8008f90 <__udivdi3+0x190>
 8009124:	0084d793          	srli	a5,s1,0x8
 8009128:	00800993          	li	s3,8
 800912c:	e65ff06f          	j	8008f90 <__udivdi3+0x190>
 8009130:	0ff00713          	li	a4,255
 8009134:	00060793          	mv	a5,a2
 8009138:	d2c778e3          	bleu	a2,a4,8008e68 <__udivdi3+0x68>
 800913c:	00865793          	srli	a5,a2,0x8
 8009140:	00800993          	li	s3,8
 8009144:	d25ff06f          	j	8008e68 <__udivdi3+0x68>
 8009148:	00f494b3          	sll	s1,s1,a5
 800914c:	01345c33          	srl	s8,s0,s3
 8009150:	0104db13          	srli	s6,s1,0x10
 8009154:	000b0593          	mv	a1,s6
 8009158:	000c0513          	mv	a0,s8
 800915c:	00f41433          	sll	s0,s0,a5
 8009160:	00fa1933          	sll	s2,s4,a5
 8009164:	013a59b3          	srl	s3,s4,s3
 8009168:	10d000ef          	jal	ra,8009a74 <__umodsi3>
 800916c:	0089eab3          	or	s5,s3,s0
 8009170:	000b0593          	mv	a1,s6
 8009174:	00050993          	mv	s3,a0
 8009178:	01049b93          	slli	s7,s1,0x10
 800917c:	000c0513          	mv	a0,s8
 8009180:	0ad000ef          	jal	ra,8009a2c <__udivsi3>
 8009184:	010bdb93          	srli	s7,s7,0x10
 8009188:	00050593          	mv	a1,a0
 800918c:	00050a13          	mv	s4,a0
 8009190:	000b8513          	mv	a0,s7
 8009194:	06d000ef          	jal	ra,8009a00 <__mulsi3>
 8009198:	01099993          	slli	s3,s3,0x10
 800919c:	010ad793          	srli	a5,s5,0x10
 80091a0:	00f9e7b3          	or	a5,s3,a5
 80091a4:	00a7fe63          	bleu	a0,a5,80091c0 <__udivdi3+0x3c0>
 80091a8:	009787b3          	add	a5,a5,s1
 80091ac:	fffa0713          	addi	a4,s4,-1
 80091b0:	2697e463          	bltu	a5,s1,8009418 <__udivdi3+0x618>
 80091b4:	26a7f263          	bleu	a0,a5,8009418 <__udivdi3+0x618>
 80091b8:	ffea0a13          	addi	s4,s4,-2
 80091bc:	009787b3          	add	a5,a5,s1
 80091c0:	40a78433          	sub	s0,a5,a0
 80091c4:	000b0593          	mv	a1,s6
 80091c8:	00040513          	mv	a0,s0
 80091cc:	0a9000ef          	jal	ra,8009a74 <__umodsi3>
 80091d0:	00050993          	mv	s3,a0
 80091d4:	000b0593          	mv	a1,s6
 80091d8:	00040513          	mv	a0,s0
 80091dc:	051000ef          	jal	ra,8009a2c <__udivsi3>
 80091e0:	010a9a93          	slli	s5,s5,0x10
 80091e4:	00050593          	mv	a1,a0
 80091e8:	00050c13          	mv	s8,a0
 80091ec:	01099413          	slli	s0,s3,0x10
 80091f0:	000b8513          	mv	a0,s7
 80091f4:	010ada93          	srli	s5,s5,0x10
 80091f8:	009000ef          	jal	ra,8009a00 <__mulsi3>
 80091fc:	01546433          	or	s0,s0,s5
 8009200:	00a47e63          	bleu	a0,s0,800921c <__udivdi3+0x41c>
 8009204:	00940433          	add	s0,s0,s1
 8009208:	fffc0793          	addi	a5,s8,-1
 800920c:	1e946e63          	bltu	s0,s1,8009408 <__udivdi3+0x608>
 8009210:	1ea47c63          	bleu	a0,s0,8009408 <__udivdi3+0x608>
 8009214:	ffec0c13          	addi	s8,s8,-2
 8009218:	00940433          	add	s0,s0,s1
 800921c:	010a1a13          	slli	s4,s4,0x10
 8009220:	40a40433          	sub	s0,s0,a0
 8009224:	018a6c33          	or	s8,s4,s8
 8009228:	d9dff06f          	j	8008fc4 <__udivdi3+0x1c4>
 800922c:	00f65bb3          	srl	s7,a2,a5
 8009230:	016696b3          	sll	a3,a3,s6
 8009234:	00dbebb3          	or	s7,s7,a3
 8009238:	00f454b3          	srl	s1,s0,a5
 800923c:	010bd993          	srli	s3,s7,0x10
 8009240:	00fa57b3          	srl	a5,s4,a5
 8009244:	00098593          	mv	a1,s3
 8009248:	01641433          	sll	s0,s0,s6
 800924c:	00048513          	mv	a0,s1
 8009250:	0087e433          	or	s0,a5,s0
 8009254:	01661ab3          	sll	s5,a2,s6
 8009258:	01d000ef          	jal	ra,8009a74 <__umodsi3>
 800925c:	00050913          	mv	s2,a0
 8009260:	00098593          	mv	a1,s3
 8009264:	010b9c13          	slli	s8,s7,0x10
 8009268:	00048513          	mv	a0,s1
 800926c:	7c0000ef          	jal	ra,8009a2c <__udivsi3>
 8009270:	010c5c13          	srli	s8,s8,0x10
 8009274:	00050593          	mv	a1,a0
 8009278:	00050c93          	mv	s9,a0
 800927c:	000c0513          	mv	a0,s8
 8009280:	780000ef          	jal	ra,8009a00 <__mulsi3>
 8009284:	01091913          	slli	s2,s2,0x10
 8009288:	01045793          	srli	a5,s0,0x10
 800928c:	00f967b3          	or	a5,s2,a5
 8009290:	00a7fe63          	bleu	a0,a5,80092ac <__udivdi3+0x4ac>
 8009294:	017787b3          	add	a5,a5,s7
 8009298:	fffc8713          	addi	a4,s9,-1
 800929c:	1777ea63          	bltu	a5,s7,8009410 <__udivdi3+0x610>
 80092a0:	16a7f863          	bleu	a0,a5,8009410 <__udivdi3+0x610>
 80092a4:	ffec8c93          	addi	s9,s9,-2
 80092a8:	017787b3          	add	a5,a5,s7
 80092ac:	40a784b3          	sub	s1,a5,a0
 80092b0:	00098593          	mv	a1,s3
 80092b4:	00048513          	mv	a0,s1
 80092b8:	7bc000ef          	jal	ra,8009a74 <__umodsi3>
 80092bc:	00050913          	mv	s2,a0
 80092c0:	00098593          	mv	a1,s3
 80092c4:	00048513          	mv	a0,s1
 80092c8:	764000ef          	jal	ra,8009a2c <__udivsi3>
 80092cc:	01041413          	slli	s0,s0,0x10
 80092d0:	00050593          	mv	a1,a0
 80092d4:	00050493          	mv	s1,a0
 80092d8:	01091913          	slli	s2,s2,0x10
 80092dc:	000c0513          	mv	a0,s8
 80092e0:	01045413          	srli	s0,s0,0x10
 80092e4:	71c000ef          	jal	ra,8009a00 <__mulsi3>
 80092e8:	00896433          	or	s0,s2,s0
 80092ec:	00a47e63          	bleu	a0,s0,8009308 <__udivdi3+0x508>
 80092f0:	01740433          	add	s0,s0,s7
 80092f4:	fff48793          	addi	a5,s1,-1
 80092f8:	11746463          	bltu	s0,s7,8009400 <__udivdi3+0x600>
 80092fc:	10a47263          	bleu	a0,s0,8009400 <__udivdi3+0x600>
 8009300:	ffe48493          	addi	s1,s1,-2
 8009304:	01740433          	add	s0,s0,s7
 8009308:	00010e37          	lui	t3,0x10
 800930c:	010c9c93          	slli	s9,s9,0x10
 8009310:	009cecb3          	or	s9,s9,s1
 8009314:	fffe0713          	addi	a4,t3,-1 # ffff <_start-0x7ff4001>
 8009318:	00ecf833          	and	a6,s9,a4
 800931c:	00eaf733          	and	a4,s5,a4
 8009320:	40a40433          	sub	s0,s0,a0
 8009324:	010cd893          	srli	a7,s9,0x10
 8009328:	010ada93          	srli	s5,s5,0x10
 800932c:	00080513          	mv	a0,a6
 8009330:	00070593          	mv	a1,a4
 8009334:	6cc000ef          	jal	ra,8009a00 <__mulsi3>
 8009338:	00050313          	mv	t1,a0
 800933c:	000a8593          	mv	a1,s5
 8009340:	00080513          	mv	a0,a6
 8009344:	6bc000ef          	jal	ra,8009a00 <__mulsi3>
 8009348:	00050813          	mv	a6,a0
 800934c:	00070593          	mv	a1,a4
 8009350:	00088513          	mv	a0,a7
 8009354:	6ac000ef          	jal	ra,8009a00 <__mulsi3>
 8009358:	00050713          	mv	a4,a0
 800935c:	000a8593          	mv	a1,s5
 8009360:	00088513          	mv	a0,a7
 8009364:	69c000ef          	jal	ra,8009a00 <__mulsi3>
 8009368:	01035793          	srli	a5,t1,0x10
 800936c:	00e80833          	add	a6,a6,a4
 8009370:	010787b3          	add	a5,a5,a6
 8009374:	00e7f463          	bleu	a4,a5,800937c <__udivdi3+0x57c>
 8009378:	01c50533          	add	a0,a0,t3
 800937c:	0107d713          	srli	a4,a5,0x10
 8009380:	00a70533          	add	a0,a4,a0
 8009384:	02a46a63          	bltu	s0,a0,80093b8 <__udivdi3+0x5b8>
 8009388:	00a40863          	beq	s0,a0,8009398 <__udivdi3+0x598>
 800938c:	000c8513          	mv	a0,s9
 8009390:	00000c13          	li	s8,0
 8009394:	d39ff06f          	j	80090cc <__udivdi3+0x2cc>
 8009398:	00010737          	lui	a4,0x10
 800939c:	fff70713          	addi	a4,a4,-1 # ffff <_start-0x7ff4001>
 80093a0:	00e7f7b3          	and	a5,a5,a4
 80093a4:	01079793          	slli	a5,a5,0x10
 80093a8:	00e37333          	and	t1,t1,a4
 80093ac:	016a1633          	sll	a2,s4,s6
 80093b0:	006787b3          	add	a5,a5,t1
 80093b4:	fcf67ce3          	bleu	a5,a2,800938c <__udivdi3+0x58c>
 80093b8:	fffc8513          	addi	a0,s9,-1
 80093bc:	00000c13          	li	s8,0
 80093c0:	d0dff06f          	j	80090cc <__udivdi3+0x2cc>
 80093c4:	0106d593          	srli	a1,a3,0x10
 80093c8:	01000513          	li	a0,16
 80093cc:	cc5ff06f          	j	8009090 <__udivdi3+0x290>
 80093d0:	01065793          	srli	a5,a2,0x10
 80093d4:	01000993          	li	s3,16
 80093d8:	a91ff06f          	j	8008e68 <__udivdi3+0x68>
 80093dc:	0104d793          	srli	a5,s1,0x10
 80093e0:	01000993          	li	s3,16
 80093e4:	badff06f          	j	8008f90 <__udivdi3+0x190>
 80093e8:	00000c13          	li	s8,0
 80093ec:	00100513          	li	a0,1
 80093f0:	cddff06f          	j	80090cc <__udivdi3+0x2cc>
 80093f4:	00068593          	mv	a1,a3
 80093f8:	00000513          	li	a0,0
 80093fc:	c95ff06f          	j	8009090 <__udivdi3+0x290>
 8009400:	00078493          	mv	s1,a5
 8009404:	f05ff06f          	j	8009308 <__udivdi3+0x508>
 8009408:	00078c13          	mv	s8,a5
 800940c:	e11ff06f          	j	800921c <__udivdi3+0x41c>
 8009410:	00070c93          	mv	s9,a4
 8009414:	e99ff06f          	j	80092ac <__udivdi3+0x4ac>
 8009418:	00070a13          	mv	s4,a4
 800941c:	da5ff06f          	j	80091c0 <__udivdi3+0x3c0>
 8009420:	ffe40413          	addi	s0,s0,-2
 8009424:	009787b3          	add	a5,a5,s1
 8009428:	ad1ff06f          	j	8008ef8 <__udivdi3+0xf8>
 800942c:	ffe40413          	addi	s0,s0,-2
 8009430:	009787b3          	add	a5,a5,s1
 8009434:	bddff06f          	j	8009010 <__udivdi3+0x210>

08009438 <__umoddi3>:
 8009438:	fd010113          	addi	sp,sp,-48
 800943c:	02812423          	sw	s0,40(sp)
 8009440:	02912223          	sw	s1,36(sp)
 8009444:	02112623          	sw	ra,44(sp)
 8009448:	03212023          	sw	s2,32(sp)
 800944c:	01312e23          	sw	s3,28(sp)
 8009450:	01412c23          	sw	s4,24(sp)
 8009454:	01512a23          	sw	s5,20(sp)
 8009458:	01612823          	sw	s6,16(sp)
 800945c:	01712623          	sw	s7,12(sp)
 8009460:	01812423          	sw	s8,8(sp)
 8009464:	01912223          	sw	s9,4(sp)
 8009468:	01a12023          	sw	s10,0(sp)
 800946c:	00058493          	mv	s1,a1
 8009470:	00050413          	mv	s0,a0
 8009474:	22069663          	bnez	a3,80096a0 <__umoddi3+0x268>
 8009478:	00068913          	mv	s2,a3
 800947c:	00060b13          	mv	s6,a2
 8009480:	00050993          	mv	s3,a0
 8009484:	12c5fe63          	bleu	a2,a1,80095c0 <__umoddi3+0x188>
 8009488:	000107b7          	lui	a5,0x10
 800948c:	00058a93          	mv	s5,a1
 8009490:	28f67a63          	bleu	a5,a2,8009724 <__umoddi3+0x2ec>
 8009494:	0ff00713          	li	a4,255
 8009498:	00060793          	mv	a5,a2
 800949c:	00c77663          	bleu	a2,a4,80094a8 <__umoddi3+0x70>
 80094a0:	00865793          	srli	a5,a2,0x8
 80094a4:	00800913          	li	s2,8
 80094a8:	0800c737          	lui	a4,0x800c
 80094ac:	32070713          	addi	a4,a4,800 # 800c320 <__clz_tab>
 80094b0:	00e787b3          	add	a5,a5,a4
 80094b4:	0007c783          	lbu	a5,0(a5) # 10000 <_start-0x7ff4000>
 80094b8:	02000513          	li	a0,32
 80094bc:	012787b3          	add	a5,a5,s2
 80094c0:	40f50933          	sub	s2,a0,a5
 80094c4:	00090c63          	beqz	s2,80094dc <__umoddi3+0xa4>
 80094c8:	012494b3          	sll	s1,s1,s2
 80094cc:	00f45ab3          	srl	s5,s0,a5
 80094d0:	01261b33          	sll	s6,a2,s2
 80094d4:	009aeab3          	or	s5,s5,s1
 80094d8:	012419b3          	sll	s3,s0,s2
 80094dc:	010b5b93          	srli	s7,s6,0x10
 80094e0:	000b8593          	mv	a1,s7
 80094e4:	000a8513          	mv	a0,s5
 80094e8:	58c000ef          	jal	ra,8009a74 <__umodsi3>
 80094ec:	00050a13          	mv	s4,a0
 80094f0:	000b8593          	mv	a1,s7
 80094f4:	000a8513          	mv	a0,s5
 80094f8:	010b1a93          	slli	s5,s6,0x10
 80094fc:	530000ef          	jal	ra,8009a2c <__udivsi3>
 8009500:	010ada93          	srli	s5,s5,0x10
 8009504:	00050593          	mv	a1,a0
 8009508:	000a8513          	mv	a0,s5
 800950c:	4f4000ef          	jal	ra,8009a00 <__mulsi3>
 8009510:	010a1a13          	slli	s4,s4,0x10
 8009514:	0109d793          	srli	a5,s3,0x10
 8009518:	00fa67b3          	or	a5,s4,a5
 800951c:	00a7f863          	bleu	a0,a5,800952c <__umoddi3+0xf4>
 8009520:	016787b3          	add	a5,a5,s6
 8009524:	0167e463          	bltu	a5,s6,800952c <__umoddi3+0xf4>
 8009528:	4ca7e863          	bltu	a5,a0,80099f8 <__umoddi3+0x5c0>
 800952c:	40a78433          	sub	s0,a5,a0
 8009530:	000b8593          	mv	a1,s7
 8009534:	00040513          	mv	a0,s0
 8009538:	53c000ef          	jal	ra,8009a74 <__umodsi3>
 800953c:	00050493          	mv	s1,a0
 8009540:	000b8593          	mv	a1,s7
 8009544:	00040513          	mv	a0,s0
 8009548:	4e4000ef          	jal	ra,8009a2c <__udivsi3>
 800954c:	00050593          	mv	a1,a0
 8009550:	000a8513          	mv	a0,s5
 8009554:	4ac000ef          	jal	ra,8009a00 <__mulsi3>
 8009558:	01099793          	slli	a5,s3,0x10
 800955c:	01049493          	slli	s1,s1,0x10
 8009560:	0107d793          	srli	a5,a5,0x10
 8009564:	00f4e7b3          	or	a5,s1,a5
 8009568:	00a7fa63          	bleu	a0,a5,800957c <__umoddi3+0x144>
 800956c:	016787b3          	add	a5,a5,s6
 8009570:	0167e663          	bltu	a5,s6,800957c <__umoddi3+0x144>
 8009574:	00a7f463          	bleu	a0,a5,800957c <__umoddi3+0x144>
 8009578:	016787b3          	add	a5,a5,s6
 800957c:	40a78533          	sub	a0,a5,a0
 8009580:	01255533          	srl	a0,a0,s2
 8009584:	00000593          	li	a1,0
 8009588:	02c12083          	lw	ra,44(sp)
 800958c:	02812403          	lw	s0,40(sp)
 8009590:	02412483          	lw	s1,36(sp)
 8009594:	02012903          	lw	s2,32(sp)
 8009598:	01c12983          	lw	s3,28(sp)
 800959c:	01812a03          	lw	s4,24(sp)
 80095a0:	01412a83          	lw	s5,20(sp)
 80095a4:	01012b03          	lw	s6,16(sp)
 80095a8:	00c12b83          	lw	s7,12(sp)
 80095ac:	00812c03          	lw	s8,8(sp)
 80095b0:	00412c83          	lw	s9,4(sp)
 80095b4:	00012d03          	lw	s10,0(sp)
 80095b8:	03010113          	addi	sp,sp,48
 80095bc:	00008067          	ret
 80095c0:	00061a63          	bnez	a2,80095d4 <__umoddi3+0x19c>
 80095c4:	00000593          	li	a1,0
 80095c8:	00100513          	li	a0,1
 80095cc:	460000ef          	jal	ra,8009a2c <__udivsi3>
 80095d0:	00050b13          	mv	s6,a0
 80095d4:	000107b7          	lui	a5,0x10
 80095d8:	12fb6a63          	bltu	s6,a5,800970c <__umoddi3+0x2d4>
 80095dc:	010007b7          	lui	a5,0x1000
 80095e0:	3cfb6c63          	bltu	s6,a5,80099b8 <__umoddi3+0x580>
 80095e4:	018b5793          	srli	a5,s6,0x18
 80095e8:	01800913          	li	s2,24
 80095ec:	0800c737          	lui	a4,0x800c
 80095f0:	32070713          	addi	a4,a4,800 # 800c320 <__clz_tab>
 80095f4:	00e787b3          	add	a5,a5,a4
 80095f8:	0007c783          	lbu	a5,0(a5) # 1000000 <_start-0x7004000>
 80095fc:	02000513          	li	a0,32
 8009600:	012787b3          	add	a5,a5,s2
 8009604:	40f50933          	sub	s2,a0,a5
 8009608:	12091863          	bnez	s2,8009738 <__umoddi3+0x300>
 800960c:	010b1b93          	slli	s7,s6,0x10
 8009610:	416484b3          	sub	s1,s1,s6
 8009614:	010b5a93          	srli	s5,s6,0x10
 8009618:	010bdb93          	srli	s7,s7,0x10
 800961c:	000a8593          	mv	a1,s5
 8009620:	00048513          	mv	a0,s1
 8009624:	450000ef          	jal	ra,8009a74 <__umodsi3>
 8009628:	00050a13          	mv	s4,a0
 800962c:	000a8593          	mv	a1,s5
 8009630:	00048513          	mv	a0,s1
 8009634:	3f8000ef          	jal	ra,8009a2c <__udivsi3>
 8009638:	000b8593          	mv	a1,s7
 800963c:	3c4000ef          	jal	ra,8009a00 <__mulsi3>
 8009640:	010a1a13          	slli	s4,s4,0x10
 8009644:	0109d793          	srli	a5,s3,0x10
 8009648:	00fa67b3          	or	a5,s4,a5
 800964c:	00a7fa63          	bleu	a0,a5,8009660 <__umoddi3+0x228>
 8009650:	016787b3          	add	a5,a5,s6
 8009654:	0167e663          	bltu	a5,s6,8009660 <__umoddi3+0x228>
 8009658:	00a7f463          	bleu	a0,a5,8009660 <__umoddi3+0x228>
 800965c:	016787b3          	add	a5,a5,s6
 8009660:	40a78433          	sub	s0,a5,a0
 8009664:	000a8593          	mv	a1,s5
 8009668:	00040513          	mv	a0,s0
 800966c:	408000ef          	jal	ra,8009a74 <__umodsi3>
 8009670:	00050493          	mv	s1,a0
 8009674:	000a8593          	mv	a1,s5
 8009678:	00040513          	mv	a0,s0
 800967c:	3b0000ef          	jal	ra,8009a2c <__udivsi3>
 8009680:	000b8593          	mv	a1,s7
 8009684:	01099993          	slli	s3,s3,0x10
 8009688:	378000ef          	jal	ra,8009a00 <__mulsi3>
 800968c:	01049493          	slli	s1,s1,0x10
 8009690:	0109d993          	srli	s3,s3,0x10
 8009694:	0134e7b3          	or	a5,s1,s3
 8009698:	eea7f2e3          	bleu	a0,a5,800957c <__umoddi3+0x144>
 800969c:	ed1ff06f          	j	800956c <__umoddi3+0x134>
 80096a0:	eed5e4e3          	bltu	a1,a3,8009588 <__umoddi3+0x150>
 80096a4:	000107b7          	lui	a5,0x10
 80096a8:	04f6e863          	bltu	a3,a5,80096f8 <__umoddi3+0x2c0>
 80096ac:	010007b7          	lui	a5,0x1000
 80096b0:	30f6ea63          	bltu	a3,a5,80099c4 <__umoddi3+0x58c>
 80096b4:	0186d713          	srli	a4,a3,0x18
 80096b8:	01800813          	li	a6,24
 80096bc:	0800c7b7          	lui	a5,0x800c
 80096c0:	32078793          	addi	a5,a5,800 # 800c320 <__clz_tab>
 80096c4:	00f707b3          	add	a5,a4,a5
 80096c8:	0007ca83          	lbu	s5,0(a5)
 80096cc:	02000a13          	li	s4,32
 80096d0:	010a8ab3          	add	s5,s5,a6
 80096d4:	415a0a33          	sub	s4,s4,s5
 80096d8:	120a1263          	bnez	s4,80097fc <__umoddi3+0x3c4>
 80096dc:	0096e463          	bltu	a3,s1,80096e4 <__umoddi3+0x2ac>
 80096e0:	eac464e3          	bltu	s0,a2,8009588 <__umoddi3+0x150>
 80096e4:	40c40533          	sub	a0,s0,a2
 80096e8:	40d486b3          	sub	a3,s1,a3
 80096ec:	00a435b3          	sltu	a1,s0,a0
 80096f0:	40b685b3          	sub	a1,a3,a1
 80096f4:	e95ff06f          	j	8009588 <__umoddi3+0x150>
 80096f8:	0ff00793          	li	a5,255
 80096fc:	2ed7f063          	bleu	a3,a5,80099dc <__umoddi3+0x5a4>
 8009700:	0086d713          	srli	a4,a3,0x8
 8009704:	00800813          	li	a6,8
 8009708:	fb5ff06f          	j	80096bc <__umoddi3+0x284>
 800970c:	0ff00713          	li	a4,255
 8009710:	000b0793          	mv	a5,s6
 8009714:	ed677ce3          	bleu	s6,a4,80095ec <__umoddi3+0x1b4>
 8009718:	008b5793          	srli	a5,s6,0x8
 800971c:	00800913          	li	s2,8
 8009720:	ecdff06f          	j	80095ec <__umoddi3+0x1b4>
 8009724:	010007b7          	lui	a5,0x1000
 8009728:	2af66463          	bltu	a2,a5,80099d0 <__umoddi3+0x598>
 800972c:	01865793          	srli	a5,a2,0x18
 8009730:	01800913          	li	s2,24
 8009734:	d75ff06f          	j	80094a8 <__umoddi3+0x70>
 8009738:	012b1b33          	sll	s6,s6,s2
 800973c:	00f4dc33          	srl	s8,s1,a5
 8009740:	010b5a93          	srli	s5,s6,0x10
 8009744:	00f457b3          	srl	a5,s0,a5
 8009748:	000a8593          	mv	a1,s5
 800974c:	012494b3          	sll	s1,s1,s2
 8009750:	000c0513          	mv	a0,s8
 8009754:	0097ea33          	or	s4,a5,s1
 8009758:	31c000ef          	jal	ra,8009a74 <__umodsi3>
 800975c:	00050993          	mv	s3,a0
 8009760:	000a8593          	mv	a1,s5
 8009764:	010b1b93          	slli	s7,s6,0x10
 8009768:	000c0513          	mv	a0,s8
 800976c:	2c0000ef          	jal	ra,8009a2c <__udivsi3>
 8009770:	010bdb93          	srli	s7,s7,0x10
 8009774:	00050593          	mv	a1,a0
 8009778:	000b8513          	mv	a0,s7
 800977c:	284000ef          	jal	ra,8009a00 <__mulsi3>
 8009780:	01099993          	slli	s3,s3,0x10
 8009784:	010a5793          	srli	a5,s4,0x10
 8009788:	00f9e7b3          	or	a5,s3,a5
 800978c:	012419b3          	sll	s3,s0,s2
 8009790:	00a7fa63          	bleu	a0,a5,80097a4 <__umoddi3+0x36c>
 8009794:	016787b3          	add	a5,a5,s6
 8009798:	0167e663          	bltu	a5,s6,80097a4 <__umoddi3+0x36c>
 800979c:	00a7f463          	bleu	a0,a5,80097a4 <__umoddi3+0x36c>
 80097a0:	016787b3          	add	a5,a5,s6
 80097a4:	40a784b3          	sub	s1,a5,a0
 80097a8:	000a8593          	mv	a1,s5
 80097ac:	00048513          	mv	a0,s1
 80097b0:	2c4000ef          	jal	ra,8009a74 <__umodsi3>
 80097b4:	00050413          	mv	s0,a0
 80097b8:	000a8593          	mv	a1,s5
 80097bc:	00048513          	mv	a0,s1
 80097c0:	26c000ef          	jal	ra,8009a2c <__udivsi3>
 80097c4:	010a1a13          	slli	s4,s4,0x10
 80097c8:	00050593          	mv	a1,a0
 80097cc:	01041493          	slli	s1,s0,0x10
 80097d0:	000b8513          	mv	a0,s7
 80097d4:	010a5a13          	srli	s4,s4,0x10
 80097d8:	228000ef          	jal	ra,8009a00 <__mulsi3>
 80097dc:	0144e4b3          	or	s1,s1,s4
 80097e0:	00a4fa63          	bleu	a0,s1,80097f4 <__umoddi3+0x3bc>
 80097e4:	016484b3          	add	s1,s1,s6
 80097e8:	0164e663          	bltu	s1,s6,80097f4 <__umoddi3+0x3bc>
 80097ec:	00a4f463          	bleu	a0,s1,80097f4 <__umoddi3+0x3bc>
 80097f0:	016484b3          	add	s1,s1,s6
 80097f4:	40a484b3          	sub	s1,s1,a0
 80097f8:	e25ff06f          	j	800961c <__umoddi3+0x1e4>
 80097fc:	015657b3          	srl	a5,a2,s5
 8009800:	014696b3          	sll	a3,a3,s4
 8009804:	00d7ec33          	or	s8,a5,a3
 8009808:	0154d9b3          	srl	s3,s1,s5
 800980c:	010c5c93          	srli	s9,s8,0x10
 8009810:	015457b3          	srl	a5,s0,s5
 8009814:	000c8593          	mv	a1,s9
 8009818:	00098513          	mv	a0,s3
 800981c:	014494b3          	sll	s1,s1,s4
 8009820:	0097e4b3          	or	s1,a5,s1
 8009824:	01461933          	sll	s2,a2,s4
 8009828:	24c000ef          	jal	ra,8009a74 <__umodsi3>
 800982c:	00050b93          	mv	s7,a0
 8009830:	000c8593          	mv	a1,s9
 8009834:	00098513          	mv	a0,s3
 8009838:	010c1d13          	slli	s10,s8,0x10
 800983c:	1f0000ef          	jal	ra,8009a2c <__udivsi3>
 8009840:	010d5d13          	srli	s10,s10,0x10
 8009844:	00050593          	mv	a1,a0
 8009848:	00050993          	mv	s3,a0
 800984c:	000d0513          	mv	a0,s10
 8009850:	1b0000ef          	jal	ra,8009a00 <__mulsi3>
 8009854:	010b9b93          	slli	s7,s7,0x10
 8009858:	0104d713          	srli	a4,s1,0x10
 800985c:	00ebe733          	or	a4,s7,a4
 8009860:	01441433          	sll	s0,s0,s4
 8009864:	00a77e63          	bleu	a0,a4,8009880 <__umoddi3+0x448>
 8009868:	01870733          	add	a4,a4,s8
 800986c:	fff98793          	addi	a5,s3,-1
 8009870:	19876063          	bltu	a4,s8,80099f0 <__umoddi3+0x5b8>
 8009874:	16a77e63          	bleu	a0,a4,80099f0 <__umoddi3+0x5b8>
 8009878:	ffe98993          	addi	s3,s3,-2
 800987c:	01870733          	add	a4,a4,s8
 8009880:	40a70b33          	sub	s6,a4,a0
 8009884:	000c8593          	mv	a1,s9
 8009888:	000b0513          	mv	a0,s6
 800988c:	1e8000ef          	jal	ra,8009a74 <__umodsi3>
 8009890:	00050b93          	mv	s7,a0
 8009894:	000c8593          	mv	a1,s9
 8009898:	000b0513          	mv	a0,s6
 800989c:	190000ef          	jal	ra,8009a2c <__udivsi3>
 80098a0:	01049493          	slli	s1,s1,0x10
 80098a4:	00050593          	mv	a1,a0
 80098a8:	00050b13          	mv	s6,a0
 80098ac:	010b9b93          	slli	s7,s7,0x10
 80098b0:	000d0513          	mv	a0,s10
 80098b4:	0104d493          	srli	s1,s1,0x10
 80098b8:	148000ef          	jal	ra,8009a00 <__mulsi3>
 80098bc:	009be4b3          	or	s1,s7,s1
 80098c0:	00a4fe63          	bleu	a0,s1,80098dc <__umoddi3+0x4a4>
 80098c4:	018484b3          	add	s1,s1,s8
 80098c8:	fffb0793          	addi	a5,s6,-1
 80098cc:	1184ee63          	bltu	s1,s8,80099e8 <__umoddi3+0x5b0>
 80098d0:	10a4fc63          	bleu	a0,s1,80099e8 <__umoddi3+0x5b0>
 80098d4:	ffeb0b13          	addi	s6,s6,-2
 80098d8:	018484b3          	add	s1,s1,s8
 80098dc:	00010e37          	lui	t3,0x10
 80098e0:	01099993          	slli	s3,s3,0x10
 80098e4:	0169e9b3          	or	s3,s3,s6
 80098e8:	fffe0713          	addi	a4,t3,-1 # ffff <_start-0x7ff4001>
 80098ec:	00e9f7b3          	and	a5,s3,a4
 80098f0:	00e97733          	and	a4,s2,a4
 80098f4:	40a484b3          	sub	s1,s1,a0
 80098f8:	0109d993          	srli	s3,s3,0x10
 80098fc:	01095893          	srli	a7,s2,0x10
 8009900:	00078513          	mv	a0,a5
 8009904:	00070593          	mv	a1,a4
 8009908:	0f8000ef          	jal	ra,8009a00 <__mulsi3>
 800990c:	00050813          	mv	a6,a0
 8009910:	00088593          	mv	a1,a7
 8009914:	00078513          	mv	a0,a5
 8009918:	0e8000ef          	jal	ra,8009a00 <__mulsi3>
 800991c:	00050313          	mv	t1,a0
 8009920:	00070593          	mv	a1,a4
 8009924:	00098513          	mv	a0,s3
 8009928:	0d8000ef          	jal	ra,8009a00 <__mulsi3>
 800992c:	00050713          	mv	a4,a0
 8009930:	00088593          	mv	a1,a7
 8009934:	00098513          	mv	a0,s3
 8009938:	0c8000ef          	jal	ra,8009a00 <__mulsi3>
 800993c:	01085793          	srli	a5,a6,0x10
 8009940:	00e30333          	add	t1,t1,a4
 8009944:	006787b3          	add	a5,a5,t1
 8009948:	00e7f463          	bleu	a4,a5,8009950 <__umoddi3+0x518>
 800994c:	01c50533          	add	a0,a0,t3
 8009950:	00010737          	lui	a4,0x10
 8009954:	fff70713          	addi	a4,a4,-1 # ffff <_start-0x7ff4001>
 8009958:	0107d593          	srli	a1,a5,0x10
 800995c:	00e7f7b3          	and	a5,a5,a4
 8009960:	01079793          	slli	a5,a5,0x10
 8009964:	00e87833          	and	a6,a6,a4
 8009968:	00a585b3          	add	a1,a1,a0
 800996c:	010787b3          	add	a5,a5,a6
 8009970:	02b4e863          	bltu	s1,a1,80099a0 <__umoddi3+0x568>
 8009974:	02b48463          	beq	s1,a1,800999c <__umoddi3+0x564>
 8009978:	40f407b3          	sub	a5,s0,a5
 800997c:	00f43433          	sltu	s0,s0,a5
 8009980:	40b485b3          	sub	a1,s1,a1
 8009984:	408585b3          	sub	a1,a1,s0
 8009988:	01559533          	sll	a0,a1,s5
 800998c:	0147d7b3          	srl	a5,a5,s4
 8009990:	00f56533          	or	a0,a0,a5
 8009994:	0145d5b3          	srl	a1,a1,s4
 8009998:	bf1ff06f          	j	8009588 <__umoddi3+0x150>
 800999c:	fcf47ee3          	bleu	a5,s0,8009978 <__umoddi3+0x540>
 80099a0:	41278933          	sub	s2,a5,s2
 80099a4:	0127b7b3          	sltu	a5,a5,s2
 80099a8:	018787b3          	add	a5,a5,s8
 80099ac:	40f585b3          	sub	a1,a1,a5
 80099b0:	00090793          	mv	a5,s2
 80099b4:	fc5ff06f          	j	8009978 <__umoddi3+0x540>
 80099b8:	010b5793          	srli	a5,s6,0x10
 80099bc:	01000913          	li	s2,16
 80099c0:	c2dff06f          	j	80095ec <__umoddi3+0x1b4>
 80099c4:	0106d713          	srli	a4,a3,0x10
 80099c8:	01000813          	li	a6,16
 80099cc:	cf1ff06f          	j	80096bc <__umoddi3+0x284>
 80099d0:	01065793          	srli	a5,a2,0x10
 80099d4:	01000913          	li	s2,16
 80099d8:	ad1ff06f          	j	80094a8 <__umoddi3+0x70>
 80099dc:	00068713          	mv	a4,a3
 80099e0:	00000813          	li	a6,0
 80099e4:	cd9ff06f          	j	80096bc <__umoddi3+0x284>
 80099e8:	00078b13          	mv	s6,a5
 80099ec:	ef1ff06f          	j	80098dc <__umoddi3+0x4a4>
 80099f0:	00078993          	mv	s3,a5
 80099f4:	e8dff06f          	j	8009880 <__umoddi3+0x448>
 80099f8:	016787b3          	add	a5,a5,s6
 80099fc:	b31ff06f          	j	800952c <__umoddi3+0xf4>

08009a00 <__mulsi3>:
 8009a00:	00050613          	mv	a2,a0
 8009a04:	00000513          	li	a0,0
 8009a08:	0015f693          	andi	a3,a1,1
 8009a0c:	00068463          	beqz	a3,8009a14 <__mulsi3+0x14>
 8009a10:	00c50533          	add	a0,a0,a2
 8009a14:	0015d593          	srli	a1,a1,0x1
 8009a18:	00161613          	slli	a2,a2,0x1
 8009a1c:	fe0596e3          	bnez	a1,8009a08 <__mulsi3+0x8>
 8009a20:	00008067          	ret

08009a24 <__divsi3>:
 8009a24:	06054063          	bltz	a0,8009a84 <__umodsi3+0x10>
 8009a28:	0605c663          	bltz	a1,8009a94 <__umodsi3+0x20>

08009a2c <__udivsi3>:
 8009a2c:	00058613          	mv	a2,a1
 8009a30:	00050593          	mv	a1,a0
 8009a34:	fff00513          	li	a0,-1
 8009a38:	02060c63          	beqz	a2,8009a70 <__udivsi3+0x44>
 8009a3c:	00100693          	li	a3,1
 8009a40:	00b67a63          	bleu	a1,a2,8009a54 <__udivsi3+0x28>
 8009a44:	00c05863          	blez	a2,8009a54 <__udivsi3+0x28>
 8009a48:	00161613          	slli	a2,a2,0x1
 8009a4c:	00169693          	slli	a3,a3,0x1
 8009a50:	feb66ae3          	bltu	a2,a1,8009a44 <__udivsi3+0x18>
 8009a54:	00000513          	li	a0,0
 8009a58:	00c5e663          	bltu	a1,a2,8009a64 <__udivsi3+0x38>
 8009a5c:	40c585b3          	sub	a1,a1,a2
 8009a60:	00d56533          	or	a0,a0,a3
 8009a64:	0016d693          	srli	a3,a3,0x1
 8009a68:	00165613          	srli	a2,a2,0x1
 8009a6c:	fe0696e3          	bnez	a3,8009a58 <__udivsi3+0x2c>
 8009a70:	00008067          	ret

08009a74 <__umodsi3>:
 8009a74:	00008293          	mv	t0,ra
 8009a78:	fb5ff0ef          	jal	ra,8009a2c <__udivsi3>
 8009a7c:	00058513          	mv	a0,a1
 8009a80:	00028067          	jr	t0
 8009a84:	40a00533          	neg	a0,a0
 8009a88:	0005d863          	bgez	a1,8009a98 <__umodsi3+0x24>
 8009a8c:	40b005b3          	neg	a1,a1
 8009a90:	f9dff06f          	j	8009a2c <__udivsi3>
 8009a94:	40b005b3          	neg	a1,a1
 8009a98:	00008293          	mv	t0,ra
 8009a9c:	f91ff0ef          	jal	ra,8009a2c <__udivsi3>
 8009aa0:	40a00533          	neg	a0,a0
 8009aa4:	00028067          	jr	t0

08009aa8 <__modsi3>:
 8009aa8:	00008293          	mv	t0,ra
 8009aac:	0005ca63          	bltz	a1,8009ac0 <__modsi3+0x18>
 8009ab0:	00054c63          	bltz	a0,8009ac8 <__modsi3+0x20>
 8009ab4:	f79ff0ef          	jal	ra,8009a2c <__udivsi3>
 8009ab8:	00058513          	mv	a0,a1
 8009abc:	00028067          	jr	t0
 8009ac0:	40b005b3          	neg	a1,a1
 8009ac4:	fe0558e3          	bgez	a0,8009ab4 <__modsi3+0xc>
 8009ac8:	40a00533          	neg	a0,a0
 8009acc:	f61ff0ef          	jal	ra,8009a2c <__udivsi3>
 8009ad0:	40b00533          	neg	a0,a1
 8009ad4:	00028067          	jr	t0

08009ad8 <conv_stat>:
 8009ad8:	ff010113          	addi	sp,sp,-16
 8009adc:	0145a383          	lw	t2,20(a1)
 8009ae0:	0185a283          	lw	t0,24(a1)
 8009ae4:	01c5af83          	lw	t6,28(a1)
 8009ae8:	0205af03          	lw	t5,32(a1)
 8009aec:	0305ae83          	lw	t4,48(a1)
 8009af0:	0405ae03          	lw	t3,64(a1)
 8009af4:	0385a303          	lw	t1,56(a1)
 8009af8:	0485a803          	lw	a6,72(a1)
 8009afc:	04c5a883          	lw	a7,76(a1)
 8009b00:	0585a603          	lw	a2,88(a1)
 8009b04:	00812623          	sw	s0,12(sp)
 8009b08:	00912423          	sw	s1,8(sp)
 8009b0c:	0105a403          	lw	s0,16(a1)
 8009b10:	0085a483          	lw	s1,8(a1)
 8009b14:	01212223          	sw	s2,4(sp)
 8009b18:	0005a903          	lw	s2,0(a1)
 8009b1c:	05c5a683          	lw	a3,92(a1)
 8009b20:	0685a703          	lw	a4,104(a1)
 8009b24:	06c5a783          	lw	a5,108(a1)
 8009b28:	01251023          	sh	s2,0(a0)
 8009b2c:	00951123          	sh	s1,2(a0)
 8009b30:	00852223          	sw	s0,4(a0)
 8009b34:	00751423          	sh	t2,8(a0)
 8009b38:	00551523          	sh	t0,10(a0)
 8009b3c:	01f51623          	sh	t6,12(a0)
 8009b40:	01e51723          	sh	t5,14(a0)
 8009b44:	01d52823          	sw	t4,16(a0)
 8009b48:	05c52423          	sw	t3,72(a0)
 8009b4c:	04652223          	sw	t1,68(a0)
 8009b50:	01052c23          	sw	a6,24(a0)
 8009b54:	01152e23          	sw	a7,28(a0)
 8009b58:	02c52423          	sw	a2,40(a0)
 8009b5c:	02d52623          	sw	a3,44(a0)
 8009b60:	00c12403          	lw	s0,12(sp)
 8009b64:	02e52c23          	sw	a4,56(a0)
 8009b68:	02f52e23          	sw	a5,60(a0)
 8009b6c:	00812483          	lw	s1,8(sp)
 8009b70:	00412903          	lw	s2,4(sp)
 8009b74:	01010113          	addi	sp,sp,16
 8009b78:	00008067          	ret

08009b7c <__syscall_error>:
 8009b7c:	ff010113          	addi	sp,sp,-16
 8009b80:	00812423          	sw	s0,8(sp)
 8009b84:	00112623          	sw	ra,12(sp)
 8009b88:	00050413          	mv	s0,a0
 8009b8c:	c84fa0ef          	jal	ra,8004010 <__errno>
 8009b90:	408007b3          	neg	a5,s0
 8009b94:	00c12083          	lw	ra,12(sp)
 8009b98:	00812403          	lw	s0,8(sp)
 8009b9c:	00f52023          	sw	a5,0(a0)
 8009ba0:	fff00513          	li	a0,-1
 8009ba4:	01010113          	addi	sp,sp,16
 8009ba8:	00008067          	ret

08009bac <_open>:
 8009bac:	ff010113          	addi	sp,sp,-16
 8009bb0:	00112623          	sw	ra,12(sp)
 8009bb4:	00812423          	sw	s0,8(sp)
 8009bb8:	00000693          	li	a3,0
 8009bbc:	40000893          	li	a7,1024
 8009bc0:	00000073          	ecall
 8009bc4:	00050413          	mv	s0,a0
 8009bc8:	00054c63          	bltz	a0,8009be0 <_open+0x34>
 8009bcc:	00040513          	mv	a0,s0
 8009bd0:	00c12083          	lw	ra,12(sp)
 8009bd4:	00812403          	lw	s0,8(sp)
 8009bd8:	01010113          	addi	sp,sp,16
 8009bdc:	00008067          	ret
 8009be0:	40800433          	neg	s0,s0
 8009be4:	c2cfa0ef          	jal	ra,8004010 <__errno>
 8009be8:	00852023          	sw	s0,0(a0)
 8009bec:	fff00413          	li	s0,-1
 8009bf0:	fddff06f          	j	8009bcc <_open+0x20>

08009bf4 <_openat>:
 8009bf4:	ff010113          	addi	sp,sp,-16
 8009bf8:	00112623          	sw	ra,12(sp)
 8009bfc:	00812423          	sw	s0,8(sp)
 8009c00:	03800893          	li	a7,56
 8009c04:	00000073          	ecall
 8009c08:	00050413          	mv	s0,a0
 8009c0c:	00054c63          	bltz	a0,8009c24 <_openat+0x30>
 8009c10:	00040513          	mv	a0,s0
 8009c14:	00c12083          	lw	ra,12(sp)
 8009c18:	00812403          	lw	s0,8(sp)
 8009c1c:	01010113          	addi	sp,sp,16
 8009c20:	00008067          	ret
 8009c24:	40800433          	neg	s0,s0
 8009c28:	be8fa0ef          	jal	ra,8004010 <__errno>
 8009c2c:	00852023          	sw	s0,0(a0)
 8009c30:	fff00413          	li	s0,-1
 8009c34:	fddff06f          	j	8009c10 <_openat+0x1c>

08009c38 <_lseek>:
 8009c38:	ff010113          	addi	sp,sp,-16
 8009c3c:	00112623          	sw	ra,12(sp)
 8009c40:	00812423          	sw	s0,8(sp)
 8009c44:	00000693          	li	a3,0
 8009c48:	03e00893          	li	a7,62
 8009c4c:	00000073          	ecall
 8009c50:	00050413          	mv	s0,a0
 8009c54:	00054c63          	bltz	a0,8009c6c <_lseek+0x34>
 8009c58:	00040513          	mv	a0,s0
 8009c5c:	00c12083          	lw	ra,12(sp)
 8009c60:	00812403          	lw	s0,8(sp)
 8009c64:	01010113          	addi	sp,sp,16
 8009c68:	00008067          	ret
 8009c6c:	40800433          	neg	s0,s0
 8009c70:	ba0fa0ef          	jal	ra,8004010 <__errno>
 8009c74:	00852023          	sw	s0,0(a0)
 8009c78:	fff00413          	li	s0,-1
 8009c7c:	fddff06f          	j	8009c58 <_lseek+0x20>

08009c80 <_read>:
 8009c80:	ff010113          	addi	sp,sp,-16
 8009c84:	00112623          	sw	ra,12(sp)
 8009c88:	00812423          	sw	s0,8(sp)
 8009c8c:	00000693          	li	a3,0
 8009c90:	03f00893          	li	a7,63
 8009c94:	00000073          	ecall
 8009c98:	00050413          	mv	s0,a0
 8009c9c:	00054c63          	bltz	a0,8009cb4 <_read+0x34>
 8009ca0:	00040513          	mv	a0,s0
 8009ca4:	00c12083          	lw	ra,12(sp)
 8009ca8:	00812403          	lw	s0,8(sp)
 8009cac:	01010113          	addi	sp,sp,16
 8009cb0:	00008067          	ret
 8009cb4:	40800433          	neg	s0,s0
 8009cb8:	b58fa0ef          	jal	ra,8004010 <__errno>
 8009cbc:	00852023          	sw	s0,0(a0)
 8009cc0:	fff00413          	li	s0,-1
 8009cc4:	fddff06f          	j	8009ca0 <_read+0x20>

08009cc8 <_write>:
 8009cc8:	ff010113          	addi	sp,sp,-16
 8009ccc:	00112623          	sw	ra,12(sp)
 8009cd0:	00812423          	sw	s0,8(sp)
 8009cd4:	00000693          	li	a3,0
 8009cd8:	04000893          	li	a7,64
 8009cdc:	00000073          	ecall
 8009ce0:	00050413          	mv	s0,a0
 8009ce4:	00054c63          	bltz	a0,8009cfc <_write+0x34>
 8009ce8:	00040513          	mv	a0,s0
 8009cec:	00c12083          	lw	ra,12(sp)
 8009cf0:	00812403          	lw	s0,8(sp)
 8009cf4:	01010113          	addi	sp,sp,16
 8009cf8:	00008067          	ret
 8009cfc:	40800433          	neg	s0,s0
 8009d00:	b10fa0ef          	jal	ra,8004010 <__errno>
 8009d04:	00852023          	sw	s0,0(a0)
 8009d08:	fff00413          	li	s0,-1
 8009d0c:	fddff06f          	j	8009ce8 <_write+0x20>

08009d10 <_fstat>:
 8009d10:	f7010113          	addi	sp,sp,-144
 8009d14:	08912223          	sw	s1,132(sp)
 8009d18:	08112623          	sw	ra,140(sp)
 8009d1c:	00058493          	mv	s1,a1
 8009d20:	08812423          	sw	s0,136(sp)
 8009d24:	00000613          	li	a2,0
 8009d28:	00010593          	mv	a1,sp
 8009d2c:	00000693          	li	a3,0
 8009d30:	05000893          	li	a7,80
 8009d34:	00000073          	ecall
 8009d38:	00050413          	mv	s0,a0
 8009d3c:	02054463          	bltz	a0,8009d64 <_fstat+0x54>
 8009d40:	00048513          	mv	a0,s1
 8009d44:	00010593          	mv	a1,sp
 8009d48:	d91ff0ef          	jal	ra,8009ad8 <conv_stat>
 8009d4c:	00040513          	mv	a0,s0
 8009d50:	08c12083          	lw	ra,140(sp)
 8009d54:	08812403          	lw	s0,136(sp)
 8009d58:	08412483          	lw	s1,132(sp)
 8009d5c:	09010113          	addi	sp,sp,144
 8009d60:	00008067          	ret
 8009d64:	40800433          	neg	s0,s0
 8009d68:	aa8fa0ef          	jal	ra,8004010 <__errno>
 8009d6c:	00852023          	sw	s0,0(a0)
 8009d70:	fff00413          	li	s0,-1
 8009d74:	fcdff06f          	j	8009d40 <_fstat+0x30>

08009d78 <_stat>:
 8009d78:	f7010113          	addi	sp,sp,-144
 8009d7c:	08912223          	sw	s1,132(sp)
 8009d80:	08112623          	sw	ra,140(sp)
 8009d84:	00058493          	mv	s1,a1
 8009d88:	08812423          	sw	s0,136(sp)
 8009d8c:	00000613          	li	a2,0
 8009d90:	00010593          	mv	a1,sp
 8009d94:	00000693          	li	a3,0
 8009d98:	40e00893          	li	a7,1038
 8009d9c:	00000073          	ecall
 8009da0:	00050413          	mv	s0,a0
 8009da4:	02054463          	bltz	a0,8009dcc <_stat+0x54>
 8009da8:	00048513          	mv	a0,s1
 8009dac:	00010593          	mv	a1,sp
 8009db0:	d29ff0ef          	jal	ra,8009ad8 <conv_stat>
 8009db4:	00040513          	mv	a0,s0
 8009db8:	08c12083          	lw	ra,140(sp)
 8009dbc:	08812403          	lw	s0,136(sp)
 8009dc0:	08412483          	lw	s1,132(sp)
 8009dc4:	09010113          	addi	sp,sp,144
 8009dc8:	00008067          	ret
 8009dcc:	40800433          	neg	s0,s0
 8009dd0:	a40fa0ef          	jal	ra,8004010 <__errno>
 8009dd4:	00852023          	sw	s0,0(a0)
 8009dd8:	fff00413          	li	s0,-1
 8009ddc:	fcdff06f          	j	8009da8 <_stat+0x30>

08009de0 <_lstat>:
 8009de0:	f7010113          	addi	sp,sp,-144
 8009de4:	08912223          	sw	s1,132(sp)
 8009de8:	08112623          	sw	ra,140(sp)
 8009dec:	00058493          	mv	s1,a1
 8009df0:	08812423          	sw	s0,136(sp)
 8009df4:	00000613          	li	a2,0
 8009df8:	00010593          	mv	a1,sp
 8009dfc:	00000693          	li	a3,0
 8009e00:	40f00893          	li	a7,1039
 8009e04:	00000073          	ecall
 8009e08:	00050413          	mv	s0,a0
 8009e0c:	02054463          	bltz	a0,8009e34 <_lstat+0x54>
 8009e10:	00048513          	mv	a0,s1
 8009e14:	00010593          	mv	a1,sp
 8009e18:	cc1ff0ef          	jal	ra,8009ad8 <conv_stat>
 8009e1c:	00040513          	mv	a0,s0
 8009e20:	08c12083          	lw	ra,140(sp)
 8009e24:	08812403          	lw	s0,136(sp)
 8009e28:	08412483          	lw	s1,132(sp)
 8009e2c:	09010113          	addi	sp,sp,144
 8009e30:	00008067          	ret
 8009e34:	40800433          	neg	s0,s0
 8009e38:	9d8fa0ef          	jal	ra,8004010 <__errno>
 8009e3c:	00852023          	sw	s0,0(a0)
 8009e40:	fff00413          	li	s0,-1
 8009e44:	fcdff06f          	j	8009e10 <_lstat+0x30>

08009e48 <_fstatat>:
 8009e48:	f7010113          	addi	sp,sp,-144
 8009e4c:	08912223          	sw	s1,132(sp)
 8009e50:	08112623          	sw	ra,140(sp)
 8009e54:	00060493          	mv	s1,a2
 8009e58:	08812423          	sw	s0,136(sp)
 8009e5c:	04f00893          	li	a7,79
 8009e60:	00010613          	mv	a2,sp
 8009e64:	00000073          	ecall
 8009e68:	00050413          	mv	s0,a0
 8009e6c:	02054463          	bltz	a0,8009e94 <_fstatat+0x4c>
 8009e70:	00048513          	mv	a0,s1
 8009e74:	00010593          	mv	a1,sp
 8009e78:	c61ff0ef          	jal	ra,8009ad8 <conv_stat>
 8009e7c:	00040513          	mv	a0,s0
 8009e80:	08c12083          	lw	ra,140(sp)
 8009e84:	08812403          	lw	s0,136(sp)
 8009e88:	08412483          	lw	s1,132(sp)
 8009e8c:	09010113          	addi	sp,sp,144
 8009e90:	00008067          	ret
 8009e94:	40800433          	neg	s0,s0
 8009e98:	978fa0ef          	jal	ra,8004010 <__errno>
 8009e9c:	00852023          	sw	s0,0(a0)
 8009ea0:	fff00413          	li	s0,-1
 8009ea4:	fcdff06f          	j	8009e70 <_fstatat+0x28>

08009ea8 <_access>:
 8009ea8:	ff010113          	addi	sp,sp,-16
 8009eac:	00112623          	sw	ra,12(sp)
 8009eb0:	00812423          	sw	s0,8(sp)
 8009eb4:	00000613          	li	a2,0
 8009eb8:	00000693          	li	a3,0
 8009ebc:	40900893          	li	a7,1033
 8009ec0:	00000073          	ecall
 8009ec4:	00050413          	mv	s0,a0
 8009ec8:	00054c63          	bltz	a0,8009ee0 <_access+0x38>
 8009ecc:	00040513          	mv	a0,s0
 8009ed0:	00c12083          	lw	ra,12(sp)
 8009ed4:	00812403          	lw	s0,8(sp)
 8009ed8:	01010113          	addi	sp,sp,16
 8009edc:	00008067          	ret
 8009ee0:	40800433          	neg	s0,s0
 8009ee4:	92cfa0ef          	jal	ra,8004010 <__errno>
 8009ee8:	00852023          	sw	s0,0(a0)
 8009eec:	fff00413          	li	s0,-1
 8009ef0:	fddff06f          	j	8009ecc <_access+0x24>

08009ef4 <_faccessat>:
 8009ef4:	ff010113          	addi	sp,sp,-16
 8009ef8:	00112623          	sw	ra,12(sp)
 8009efc:	00812423          	sw	s0,8(sp)
 8009f00:	03000893          	li	a7,48
 8009f04:	00000073          	ecall
 8009f08:	00050413          	mv	s0,a0
 8009f0c:	00054c63          	bltz	a0,8009f24 <_faccessat+0x30>
 8009f10:	00040513          	mv	a0,s0
 8009f14:	00c12083          	lw	ra,12(sp)
 8009f18:	00812403          	lw	s0,8(sp)
 8009f1c:	01010113          	addi	sp,sp,16
 8009f20:	00008067          	ret
 8009f24:	40800433          	neg	s0,s0
 8009f28:	8e8fa0ef          	jal	ra,8004010 <__errno>
 8009f2c:	00852023          	sw	s0,0(a0)
 8009f30:	fff00413          	li	s0,-1
 8009f34:	fddff06f          	j	8009f10 <_faccessat+0x1c>

08009f38 <_close>:
 8009f38:	ff010113          	addi	sp,sp,-16
 8009f3c:	00112623          	sw	ra,12(sp)
 8009f40:	00812423          	sw	s0,8(sp)
 8009f44:	00000593          	li	a1,0
 8009f48:	00000613          	li	a2,0
 8009f4c:	00000693          	li	a3,0
 8009f50:	03900893          	li	a7,57
 8009f54:	00000073          	ecall
 8009f58:	00050413          	mv	s0,a0
 8009f5c:	00054c63          	bltz	a0,8009f74 <_close+0x3c>
 8009f60:	00040513          	mv	a0,s0
 8009f64:	00c12083          	lw	ra,12(sp)
 8009f68:	00812403          	lw	s0,8(sp)
 8009f6c:	01010113          	addi	sp,sp,16
 8009f70:	00008067          	ret
 8009f74:	40800433          	neg	s0,s0
 8009f78:	898fa0ef          	jal	ra,8004010 <__errno>
 8009f7c:	00852023          	sw	s0,0(a0)
 8009f80:	fff00413          	li	s0,-1
 8009f84:	fddff06f          	j	8009f60 <_close+0x28>

08009f88 <_link>:
 8009f88:	ff010113          	addi	sp,sp,-16
 8009f8c:	00112623          	sw	ra,12(sp)
 8009f90:	00812423          	sw	s0,8(sp)
 8009f94:	00000613          	li	a2,0
 8009f98:	00000693          	li	a3,0
 8009f9c:	40100893          	li	a7,1025
 8009fa0:	00000073          	ecall
 8009fa4:	00050413          	mv	s0,a0
 8009fa8:	00054c63          	bltz	a0,8009fc0 <_link+0x38>
 8009fac:	00040513          	mv	a0,s0
 8009fb0:	00c12083          	lw	ra,12(sp)
 8009fb4:	00812403          	lw	s0,8(sp)
 8009fb8:	01010113          	addi	sp,sp,16
 8009fbc:	00008067          	ret
 8009fc0:	40800433          	neg	s0,s0
 8009fc4:	84cfa0ef          	jal	ra,8004010 <__errno>
 8009fc8:	00852023          	sw	s0,0(a0)
 8009fcc:	fff00413          	li	s0,-1
 8009fd0:	fddff06f          	j	8009fac <_link+0x24>

08009fd4 <_unlink>:
 8009fd4:	ff010113          	addi	sp,sp,-16
 8009fd8:	00112623          	sw	ra,12(sp)
 8009fdc:	00812423          	sw	s0,8(sp)
 8009fe0:	00000593          	li	a1,0
 8009fe4:	00000613          	li	a2,0
 8009fe8:	00000693          	li	a3,0
 8009fec:	40200893          	li	a7,1026
 8009ff0:	00000073          	ecall
 8009ff4:	00050413          	mv	s0,a0
 8009ff8:	00054c63          	bltz	a0,800a010 <_unlink+0x3c>
 8009ffc:	00040513          	mv	a0,s0
 800a000:	00c12083          	lw	ra,12(sp)
 800a004:	00812403          	lw	s0,8(sp)
 800a008:	01010113          	addi	sp,sp,16
 800a00c:	00008067          	ret
 800a010:	40800433          	neg	s0,s0
 800a014:	ffdf90ef          	jal	ra,8004010 <__errno>
 800a018:	00852023          	sw	s0,0(a0)
 800a01c:	fff00413          	li	s0,-1
 800a020:	fddff06f          	j	8009ffc <_unlink+0x28>

0800a024 <_execve>:
 800a024:	ff010113          	addi	sp,sp,-16
 800a028:	00112623          	sw	ra,12(sp)
 800a02c:	fe5f90ef          	jal	ra,8004010 <__errno>
 800a030:	00c12083          	lw	ra,12(sp)
 800a034:	00c00793          	li	a5,12
 800a038:	00f52023          	sw	a5,0(a0)
 800a03c:	fff00513          	li	a0,-1
 800a040:	01010113          	addi	sp,sp,16
 800a044:	00008067          	ret

0800a048 <_fork>:
 800a048:	ff010113          	addi	sp,sp,-16
 800a04c:	00112623          	sw	ra,12(sp)
 800a050:	fc1f90ef          	jal	ra,8004010 <__errno>
 800a054:	00c12083          	lw	ra,12(sp)
 800a058:	00b00793          	li	a5,11
 800a05c:	00f52023          	sw	a5,0(a0)
 800a060:	fff00513          	li	a0,-1
 800a064:	01010113          	addi	sp,sp,16
 800a068:	00008067          	ret

0800a06c <_getpid>:
 800a06c:	00100513          	li	a0,1
 800a070:	00008067          	ret

0800a074 <_kill>:
 800a074:	ff010113          	addi	sp,sp,-16
 800a078:	00112623          	sw	ra,12(sp)
 800a07c:	f95f90ef          	jal	ra,8004010 <__errno>
 800a080:	00c12083          	lw	ra,12(sp)
 800a084:	01600793          	li	a5,22
 800a088:	00f52023          	sw	a5,0(a0)
 800a08c:	fff00513          	li	a0,-1
 800a090:	01010113          	addi	sp,sp,16
 800a094:	00008067          	ret

0800a098 <_wait>:
 800a098:	ff010113          	addi	sp,sp,-16
 800a09c:	00112623          	sw	ra,12(sp)
 800a0a0:	f71f90ef          	jal	ra,8004010 <__errno>
 800a0a4:	00c12083          	lw	ra,12(sp)
 800a0a8:	00a00793          	li	a5,10
 800a0ac:	00f52023          	sw	a5,0(a0)
 800a0b0:	fff00513          	li	a0,-1
 800a0b4:	01010113          	addi	sp,sp,16
 800a0b8:	00008067          	ret

0800a0bc <_isatty>:
 800a0bc:	f9010113          	addi	sp,sp,-112
 800a0c0:	00810593          	addi	a1,sp,8
 800a0c4:	06112623          	sw	ra,108(sp)
 800a0c8:	c49ff0ef          	jal	ra,8009d10 <_fstat>
 800a0cc:	fff00793          	li	a5,-1
 800a0d0:	00f50863          	beq	a0,a5,800a0e0 <_isatty+0x24>
 800a0d4:	00c12503          	lw	a0,12(sp)
 800a0d8:	00d55513          	srli	a0,a0,0xd
 800a0dc:	00157513          	andi	a0,a0,1
 800a0e0:	06c12083          	lw	ra,108(sp)
 800a0e4:	07010113          	addi	sp,sp,112
 800a0e8:	00008067          	ret

0800a0ec <_gettimeofday>:
 800a0ec:	ff010113          	addi	sp,sp,-16
 800a0f0:	00112623          	sw	ra,12(sp)
 800a0f4:	00812423          	sw	s0,8(sp)
 800a0f8:	00000593          	li	a1,0
 800a0fc:	00000613          	li	a2,0
 800a100:	00000693          	li	a3,0
 800a104:	0a900893          	li	a7,169
 800a108:	00000073          	ecall
 800a10c:	00050413          	mv	s0,a0
 800a110:	00054c63          	bltz	a0,800a128 <_gettimeofday+0x3c>
 800a114:	00040513          	mv	a0,s0
 800a118:	00c12083          	lw	ra,12(sp)
 800a11c:	00812403          	lw	s0,8(sp)
 800a120:	01010113          	addi	sp,sp,16
 800a124:	00008067          	ret
 800a128:	40800433          	neg	s0,s0
 800a12c:	ee5f90ef          	jal	ra,8004010 <__errno>
 800a130:	00852023          	sw	s0,0(a0)
 800a134:	fff00413          	li	s0,-1
 800a138:	fddff06f          	j	800a114 <_gettimeofday+0x28>

0800a13c <_times>:
 800a13c:	fe010113          	addi	sp,sp,-32
 800a140:	00912a23          	sw	s1,20(sp)
 800a144:	1a818493          	addi	s1,gp,424 # 800d9a8 <t0.2745>
 800a148:	0004a783          	lw	a5,0(s1)
 800a14c:	0044a683          	lw	a3,4(s1)
 800a150:	00812c23          	sw	s0,24(sp)
 800a154:	00112e23          	sw	ra,28(sp)
 800a158:	00d7e7b3          	or	a5,a5,a3
 800a15c:	00050413          	mv	s0,a0
 800a160:	06078863          	beqz	a5,800a1d0 <_times+0x94>
 800a164:	00010513          	mv	a0,sp
 800a168:	00000593          	li	a1,0
 800a16c:	f81ff0ef          	jal	ra,800a0ec <_gettimeofday>
 800a170:	0004a703          	lw	a4,0(s1)
 800a174:	00012783          	lw	a5,0(sp)
 800a178:	0084a603          	lw	a2,8(s1)
 800a17c:	00042623          	sw	zero,12(s0)
 800a180:	40e78733          	sub	a4,a5,a4
 800a184:	00571793          	slli	a5,a4,0x5
 800a188:	40e786b3          	sub	a3,a5,a4
 800a18c:	00669793          	slli	a5,a3,0x6
 800a190:	40d787b3          	sub	a5,a5,a3
 800a194:	00379793          	slli	a5,a5,0x3
 800a198:	00e787b3          	add	a5,a5,a4
 800a19c:	00812703          	lw	a4,8(sp)
 800a1a0:	00679793          	slli	a5,a5,0x6
 800a1a4:	00042423          	sw	zero,8(s0)
 800a1a8:	40c70733          	sub	a4,a4,a2
 800a1ac:	00e787b3          	add	a5,a5,a4
 800a1b0:	00f42023          	sw	a5,0(s0)
 800a1b4:	00042223          	sw	zero,4(s0)
 800a1b8:	01c12083          	lw	ra,28(sp)
 800a1bc:	01812403          	lw	s0,24(sp)
 800a1c0:	01412483          	lw	s1,20(sp)
 800a1c4:	fff00513          	li	a0,-1
 800a1c8:	02010113          	addi	sp,sp,32
 800a1cc:	00008067          	ret
 800a1d0:	00000593          	li	a1,0
 800a1d4:	1a818513          	addi	a0,gp,424 # 800d9a8 <t0.2745>
 800a1d8:	f15ff0ef          	jal	ra,800a0ec <_gettimeofday>
 800a1dc:	f89ff06f          	j	800a164 <_times+0x28>

0800a1e0 <_ftime>:
 800a1e0:	00000793          	li	a5,0
 800a1e4:	00000813          	li	a6,0
 800a1e8:	00051423          	sh	zero,8(a0)
 800a1ec:	00f52023          	sw	a5,0(a0)
 800a1f0:	01052223          	sw	a6,4(a0)
 800a1f4:	00000513          	li	a0,0
 800a1f8:	00008067          	ret

0800a1fc <_utime>:
 800a1fc:	fff00513          	li	a0,-1
 800a200:	00008067          	ret

0800a204 <_chown>:
 800a204:	fff00513          	li	a0,-1
 800a208:	00008067          	ret

0800a20c <_chmod>:
 800a20c:	fff00513          	li	a0,-1
 800a210:	00008067          	ret

0800a214 <_chdir>:
 800a214:	fff00513          	li	a0,-1
 800a218:	00008067          	ret

0800a21c <_getcwd>:
 800a21c:	00000513          	li	a0,0
 800a220:	00008067          	ret

0800a224 <_sysconf>:
 800a224:	00200793          	li	a5,2
 800a228:	00f51863          	bne	a0,a5,800a238 <_sysconf+0x14>
 800a22c:	000f4537          	lui	a0,0xf4
 800a230:	24050513          	addi	a0,a0,576 # f4240 <_start-0x7f0fdc0>
 800a234:	00008067          	ret
 800a238:	fff00513          	li	a0,-1
 800a23c:	00008067          	ret

0800a240 <_sbrk>:
 800a240:	fe010113          	addi	sp,sp,-32
 800a244:	01212823          	sw	s2,16(sp)
 800a248:	17c1a783          	lw	a5,380(gp) # 800d97c <heap_end.2778>
 800a24c:	00912a23          	sw	s1,20(sp)
 800a250:	00112e23          	sw	ra,28(sp)
 800a254:	00812c23          	sw	s0,24(sp)
 800a258:	00050493          	mv	s1,a0
 800a25c:	02079463          	bnez	a5,800a284 <_sbrk+0x44>
 800a260:	00000513          	li	a0,0
 800a264:	00000593          	li	a1,0
 800a268:	00000613          	li	a2,0
 800a26c:	00000693          	li	a3,0
 800a270:	0d600893          	li	a7,214
 800a274:	00000073          	ecall
 800a278:	00050793          	mv	a5,a0
 800a27c:	06054863          	bltz	a0,800a2ec <_sbrk+0xac>
 800a280:	16a1ae23          	sw	a0,380(gp) # 800d97c <heap_end.2778>
 800a284:	00f48533          	add	a0,s1,a5
 800a288:	00000593          	li	a1,0
 800a28c:	00000613          	li	a2,0
 800a290:	00000693          	li	a3,0
 800a294:	0d600893          	li	a7,214
 800a298:	00000073          	ecall
 800a29c:	00050413          	mv	s0,a0
 800a2a0:	06054463          	bltz	a0,800a308 <_sbrk+0xc8>
 800a2a4:	17c1a783          	lw	a5,380(gp) # 800d97c <heap_end.2778>
 800a2a8:	fff00513          	li	a0,-1
 800a2ac:	00f484b3          	add	s1,s1,a5
 800a2b0:	00848e63          	beq	s1,s0,800a2cc <_sbrk+0x8c>
 800a2b4:	01c12083          	lw	ra,28(sp)
 800a2b8:	01812403          	lw	s0,24(sp)
 800a2bc:	01412483          	lw	s1,20(sp)
 800a2c0:	01012903          	lw	s2,16(sp)
 800a2c4:	02010113          	addi	sp,sp,32
 800a2c8:	00008067          	ret
 800a2cc:	1681ae23          	sw	s0,380(gp) # 800d97c <heap_end.2778>
 800a2d0:	01c12083          	lw	ra,28(sp)
 800a2d4:	01812403          	lw	s0,24(sp)
 800a2d8:	01412483          	lw	s1,20(sp)
 800a2dc:	01012903          	lw	s2,16(sp)
 800a2e0:	00078513          	mv	a0,a5
 800a2e4:	02010113          	addi	sp,sp,32
 800a2e8:	00008067          	ret
 800a2ec:	00a12623          	sw	a0,12(sp)
 800a2f0:	d21f90ef          	jal	ra,8004010 <__errno>
 800a2f4:	00c12783          	lw	a5,12(sp)
 800a2f8:	40f007b3          	neg	a5,a5
 800a2fc:	00f52023          	sw	a5,0(a0)
 800a300:	fff00513          	li	a0,-1
 800a304:	fb1ff06f          	j	800a2b4 <_sbrk+0x74>
 800a308:	40800433          	neg	s0,s0
 800a30c:	d05f90ef          	jal	ra,8004010 <__errno>
 800a310:	00852023          	sw	s0,0(a0)
 800a314:	fff00413          	li	s0,-1
 800a318:	f8dff06f          	j	800a2a4 <_sbrk+0x64>

0800a31c <_exit>:
 800a31c:	00000593          	li	a1,0
 800a320:	00000613          	li	a2,0
 800a324:	00000693          	li	a3,0
 800a328:	05d00893          	li	a7,93
 800a32c:	00000073          	ecall
 800a330:	00054463          	bltz	a0,800a338 <_exit+0x1c>
 800a334:	0000006f          	j	800a334 <_exit+0x18>
 800a338:	ff010113          	addi	sp,sp,-16
 800a33c:	00812423          	sw	s0,8(sp)
 800a340:	00050413          	mv	s0,a0
 800a344:	00112623          	sw	ra,12(sp)
 800a348:	40800433          	neg	s0,s0
 800a34c:	cc5f90ef          	jal	ra,8004010 <__errno>
 800a350:	00852023          	sw	s0,0(a0)
 800a354:	0000006f          	j	800a354 <_exit+0x38>

0800a358 <cosf>:
 800a358:	e0050753          	fmv.x.s	a4,fa0
 800a35c:	800007b7          	lui	a5,0x80000
 800a360:	fe010113          	addi	sp,sp,-32
 800a364:	fff7c793          	not	a5,a5
 800a368:	3f4916b7          	lui	a3,0x3f491
 800a36c:	00112e23          	sw	ra,28(sp)
 800a370:	00e7f7b3          	and	a5,a5,a4
 800a374:	fd868693          	addi	a3,a3,-40 # 3f490fd8 <__BSS_END__+0x3748361c>
 800a378:	04f6d863          	ble	a5,a3,800a3c8 <cosf+0x70>
 800a37c:	7f8006b7          	lui	a3,0x7f800
 800a380:	00d7ca63          	blt	a5,a3,800a394 <cosf+0x3c>
 800a384:	08a57553          	fsub.s	fa0,fa0,fa0
 800a388:	01c12083          	lw	ra,28(sp)
 800a38c:	02010113          	addi	sp,sp,32
 800a390:	00008067          	ret
 800a394:	00810513          	addi	a0,sp,8
 800a398:	774000ef          	jal	ra,800ab0c <__ieee754_rem_pio2f>
 800a39c:	00357513          	andi	a0,a0,3
 800a3a0:	00100793          	li	a5,1
 800a3a4:	02f50c63          	beq	a0,a5,800a3dc <cosf+0x84>
 800a3a8:	00200793          	li	a5,2
 800a3ac:	00c12587          	flw	fa1,12(sp)
 800a3b0:	00812507          	flw	fa0,8(sp)
 800a3b4:	04f50463          	beq	a0,a5,800a3fc <cosf+0xa4>
 800a3b8:	02050e63          	beqz	a0,800a3f4 <cosf+0x9c>
 800a3bc:	00100513          	li	a0,1
 800a3c0:	598010ef          	jal	ra,800b958 <__kernel_sinf>
 800a3c4:	fc5ff06f          	j	800a388 <cosf+0x30>
 800a3c8:	f00005d3          	fmv.s.x	fa1,zero
 800a3cc:	365000ef          	jal	ra,800af30 <__kernel_cosf>
 800a3d0:	01c12083          	lw	ra,28(sp)
 800a3d4:	02010113          	addi	sp,sp,32
 800a3d8:	00008067          	ret
 800a3dc:	00c12587          	flw	fa1,12(sp)
 800a3e0:	00812507          	flw	fa0,8(sp)
 800a3e4:	00100513          	li	a0,1
 800a3e8:	570010ef          	jal	ra,800b958 <__kernel_sinf>
 800a3ec:	20a51553          	fneg.s	fa0,fa0
 800a3f0:	f99ff06f          	j	800a388 <cosf+0x30>
 800a3f4:	33d000ef          	jal	ra,800af30 <__kernel_cosf>
 800a3f8:	f91ff06f          	j	800a388 <cosf+0x30>
 800a3fc:	335000ef          	jal	ra,800af30 <__kernel_cosf>
 800a400:	20a51553          	fneg.s	fa0,fa0
 800a404:	f85ff06f          	j	800a388 <cosf+0x30>

0800a408 <sinf>:
 800a408:	e0050753          	fmv.x.s	a4,fa0
 800a40c:	800007b7          	lui	a5,0x80000
 800a410:	fe010113          	addi	sp,sp,-32
 800a414:	fff7c793          	not	a5,a5
 800a418:	3f4916b7          	lui	a3,0x3f491
 800a41c:	00112e23          	sw	ra,28(sp)
 800a420:	00e7f7b3          	and	a5,a5,a4
 800a424:	fd868693          	addi	a3,a3,-40 # 3f490fd8 <__BSS_END__+0x3748361c>
 800a428:	04f6d863          	ble	a5,a3,800a478 <sinf+0x70>
 800a42c:	7f8006b7          	lui	a3,0x7f800
 800a430:	00d7ca63          	blt	a5,a3,800a444 <sinf+0x3c>
 800a434:	08a57553          	fsub.s	fa0,fa0,fa0
 800a438:	01c12083          	lw	ra,28(sp)
 800a43c:	02010113          	addi	sp,sp,32
 800a440:	00008067          	ret
 800a444:	00810513          	addi	a0,sp,8
 800a448:	6c4000ef          	jal	ra,800ab0c <__ieee754_rem_pio2f>
 800a44c:	00357513          	andi	a0,a0,3
 800a450:	00100793          	li	a5,1
 800a454:	02f50e63          	beq	a0,a5,800a490 <sinf+0x88>
 800a458:	00200793          	li	a5,2
 800a45c:	00c12587          	flw	fa1,12(sp)
 800a460:	00812507          	flw	fa0,8(sp)
 800a464:	04f50463          	beq	a0,a5,800a4ac <sinf+0xa4>
 800a468:	02050c63          	beqz	a0,800a4a0 <sinf+0x98>
 800a46c:	2c5000ef          	jal	ra,800af30 <__kernel_cosf>
 800a470:	20a51553          	fneg.s	fa0,fa0
 800a474:	fc5ff06f          	j	800a438 <sinf+0x30>
 800a478:	f00005d3          	fmv.s.x	fa1,zero
 800a47c:	00000513          	li	a0,0
 800a480:	4d8010ef          	jal	ra,800b958 <__kernel_sinf>
 800a484:	01c12083          	lw	ra,28(sp)
 800a488:	02010113          	addi	sp,sp,32
 800a48c:	00008067          	ret
 800a490:	00c12587          	flw	fa1,12(sp)
 800a494:	00812507          	flw	fa0,8(sp)
 800a498:	299000ef          	jal	ra,800af30 <__kernel_cosf>
 800a49c:	f9dff06f          	j	800a438 <sinf+0x30>
 800a4a0:	00100513          	li	a0,1
 800a4a4:	4b4010ef          	jal	ra,800b958 <__kernel_sinf>
 800a4a8:	f91ff06f          	j	800a438 <sinf+0x30>
 800a4ac:	00100513          	li	a0,1
 800a4b0:	4a8010ef          	jal	ra,800b958 <__kernel_sinf>
 800a4b4:	20a51553          	fneg.s	fa0,fa0
 800a4b8:	f81ff06f          	j	800a438 <sinf+0x30>

0800a4bc <asinf>:
 800a4bc:	fb010113          	addi	sp,sp,-80
 800a4c0:	04812423          	sw	s0,72(sp)
 800a4c4:	02813c27          	fsd	fs0,56(sp)
 800a4c8:	02913827          	fsd	fs1,48(sp)
 800a4cc:	04112623          	sw	ra,76(sp)
 800a4d0:	20a50453          	fmv.s	fs0,fa0
 800a4d4:	1c4000ef          	jal	ra,800a698 <__ieee754_asinf>
 800a4d8:	1601a703          	lw	a4,352(gp) # 800d960 <__fdlib_version>
 800a4dc:	fff00793          	li	a5,-1
 800a4e0:	20a504d3          	fmv.s	fs1,fa0
 800a4e4:	02f70263          	beq	a4,a5,800a508 <asinf+0x4c>
 800a4e8:	a08427d3          	feq.s	a5,fs0,fs0
 800a4ec:	00078e63          	beqz	a5,800a508 <asinf+0x4c>
 800a4f0:	20840553          	fmv.s	fa0,fs0
 800a4f4:	770010ef          	jal	ra,800bc64 <fabsf>
 800a4f8:	0800e7b7          	lui	a5,0x800e
 800a4fc:	8387a787          	flw	fa5,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800a500:	a0a797d3          	flt.s	a5,fa5,fa0
 800a504:	02079063          	bnez	a5,800a524 <asinf+0x68>
 800a508:	04c12083          	lw	ra,76(sp)
 800a50c:	04812403          	lw	s0,72(sp)
 800a510:	20948553          	fmv.s	fa0,fs1
 800a514:	03813407          	fld	fs0,56(sp)
 800a518:	03013487          	fld	fs1,48(sp)
 800a51c:	05010113          	addi	sp,sp,80
 800a520:	00008067          	ret
 800a524:	42040453          	fcvt.d.s	fs0,fs0
 800a528:	00100793          	li	a5,1
 800a52c:	00f12423          	sw	a5,8(sp)
 800a530:	0800c537          	lui	a0,0x800c
 800a534:	0800c7b7          	lui	a5,0x800c
 800a538:	42078793          	addi	a5,a5,1056 # 800c420 <__clz_tab+0x100>
 800a53c:	42850513          	addi	a0,a0,1064 # 800c428 <__clz_tab+0x108>
 800a540:	00f12623          	sw	a5,12(sp)
 800a544:	02012423          	sw	zero,40(sp)
 800a548:	00813c27          	fsd	fs0,24(sp)
 800a54c:	00813827          	fsd	fs0,16(sp)
 800a550:	14d010ef          	jal	ra,800be9c <nan>
 800a554:	1601a703          	lw	a4,352(gp) # 800d960 <__fdlib_version>
 800a558:	02a13027          	fsd	fa0,32(sp)
 800a55c:	00200793          	li	a5,2
 800a560:	02f70e63          	beq	a4,a5,800a59c <asinf+0xe0>
 800a564:	00810513          	addi	a0,sp,8
 800a568:	12d010ef          	jal	ra,800be94 <matherr>
 800a56c:	02050863          	beqz	a0,800a59c <asinf+0xe0>
 800a570:	02812783          	lw	a5,40(sp)
 800a574:	02079c63          	bnez	a5,800a5ac <asinf+0xf0>
 800a578:	02013487          	fld	fs1,32(sp)
 800a57c:	04c12083          	lw	ra,76(sp)
 800a580:	04812403          	lw	s0,72(sp)
 800a584:	4014f4d3          	fcvt.s.d	fs1,fs1
 800a588:	03813407          	fld	fs0,56(sp)
 800a58c:	20948553          	fmv.s	fa0,fs1
 800a590:	03013487          	fld	fs1,48(sp)
 800a594:	05010113          	addi	sp,sp,80
 800a598:	00008067          	ret
 800a59c:	a75f90ef          	jal	ra,8004010 <__errno>
 800a5a0:	02100793          	li	a5,33
 800a5a4:	00f52023          	sw	a5,0(a0)
 800a5a8:	fc9ff06f          	j	800a570 <asinf+0xb4>
 800a5ac:	a65f90ef          	jal	ra,8004010 <__errno>
 800a5b0:	02812783          	lw	a5,40(sp)
 800a5b4:	00f52023          	sw	a5,0(a0)
 800a5b8:	fc1ff06f          	j	800a578 <asinf+0xbc>

0800a5bc <atan2f>:
 800a5bc:	3640006f          	j	800a920 <__ieee754_atan2f>

0800a5c0 <sqrtf>:
 800a5c0:	fb010113          	addi	sp,sp,-80
 800a5c4:	02813c27          	fsd	fs0,56(sp)
 800a5c8:	04112623          	sw	ra,76(sp)
 800a5cc:	20a50453          	fmv.s	fs0,fa0
 800a5d0:	04d000ef          	jal	ra,800ae1c <__ieee754_sqrtf>
 800a5d4:	1601a703          	lw	a4,352(gp) # 800d960 <__fdlib_version>
 800a5d8:	fff00793          	li	a5,-1
 800a5dc:	00f70c63          	beq	a4,a5,800a5f4 <sqrtf+0x34>
 800a5e0:	a08427d3          	feq.s	a5,fs0,fs0
 800a5e4:	00078863          	beqz	a5,800a5f4 <sqrtf+0x34>
 800a5e8:	f00007d3          	fmv.s.x	fa5,zero
 800a5ec:	a0f417d3          	flt.s	a5,fs0,fa5
 800a5f0:	00079a63          	bnez	a5,800a604 <sqrtf+0x44>
 800a5f4:	04c12083          	lw	ra,76(sp)
 800a5f8:	03813407          	fld	fs0,56(sp)
 800a5fc:	05010113          	addi	sp,sp,80
 800a600:	00008067          	ret
 800a604:	42040453          	fcvt.d.s	fs0,fs0
 800a608:	00100793          	li	a5,1
 800a60c:	00f12423          	sw	a5,8(sp)
 800a610:	0800c7b7          	lui	a5,0x800c
 800a614:	42c78793          	addi	a5,a5,1068 # 800c42c <__clz_tab+0x10c>
 800a618:	00f12623          	sw	a5,12(sp)
 800a61c:	02012423          	sw	zero,40(sp)
 800a620:	00813c27          	fsd	fs0,24(sp)
 800a624:	00813827          	fsd	fs0,16(sp)
 800a628:	04070263          	beqz	a4,800a66c <sqrtf+0xac>
 800a62c:	d20007d3          	fcvt.d.w	fa5,zero
 800a630:	00200793          	li	a5,2
 800a634:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
 800a638:	02f13027          	fsd	fa5,32(sp)
 800a63c:	02f71c63          	bne	a4,a5,800a674 <sqrtf+0xb4>
 800a640:	9d1f90ef          	jal	ra,8004010 <__errno>
 800a644:	02100793          	li	a5,33
 800a648:	00f52023          	sw	a5,0(a0)
 800a64c:	02812783          	lw	a5,40(sp)
 800a650:	02079c63          	bnez	a5,800a688 <sqrtf+0xc8>
 800a654:	02013507          	fld	fa0,32(sp)
 800a658:	04c12083          	lw	ra,76(sp)
 800a65c:	03813407          	fld	fs0,56(sp)
 800a660:	40157553          	fcvt.s.d	fa0,fa0
 800a664:	05010113          	addi	sp,sp,80
 800a668:	00008067          	ret
 800a66c:	02012023          	sw	zero,32(sp)
 800a670:	02012223          	sw	zero,36(sp)
 800a674:	00810513          	addi	a0,sp,8
 800a678:	01d010ef          	jal	ra,800be94 <matherr>
 800a67c:	fc0502e3          	beqz	a0,800a640 <sqrtf+0x80>
 800a680:	02812783          	lw	a5,40(sp)
 800a684:	fc0788e3          	beqz	a5,800a654 <sqrtf+0x94>
 800a688:	989f90ef          	jal	ra,8004010 <__errno>
 800a68c:	02812783          	lw	a5,40(sp)
 800a690:	00f52023          	sw	a5,0(a0)
 800a694:	fc1ff06f          	j	800a654 <sqrtf+0x94>

0800a698 <__ieee754_asinf>:
 800a698:	fd010113          	addi	sp,sp,-48
 800a69c:	e00507d3          	fmv.x.s	a5,fa0
 800a6a0:	02812423          	sw	s0,40(sp)
 800a6a4:	80000437          	lui	s0,0x80000
 800a6a8:	fff44413          	not	s0,s0
 800a6ac:	02112623          	sw	ra,44(sp)
 800a6b0:	02912223          	sw	s1,36(sp)
 800a6b4:	03212023          	sw	s2,32(sp)
 800a6b8:	00813c27          	fsd	fs0,24(sp)
 800a6bc:	00913827          	fsd	fs1,16(sp)
 800a6c0:	01213427          	fsd	fs2,8(sp)
 800a6c4:	00f47433          	and	s0,s0,a5
 800a6c8:	3f800737          	lui	a4,0x3f800
 800a6cc:	14e40463          	beq	s0,a4,800a814 <__ieee754_asinf+0x17c>
 800a6d0:	12874c63          	blt	a4,s0,800a808 <__ieee754_asinf+0x170>
 800a6d4:	3f000737          	lui	a4,0x3f000
 800a6d8:	00078493          	mv	s1,a5
 800a6dc:	0800e937          	lui	s2,0x800e
 800a6e0:	02e45463          	ble	a4,s0,800a708 <__ieee754_asinf+0x70>
 800a6e4:	32000737          	lui	a4,0x32000
 800a6e8:	1ae45263          	ble	a4,s0,800a88c <__ieee754_asinf+0x1f4>
 800a6ec:	0800e737          	lui	a4,0x800e
 800a6f0:	84472787          	flw	fa5,-1980(a4) # 800d844 <__SDATA_BEGIN__+0x14>
 800a6f4:	0800e937          	lui	s2,0x800e
 800a6f8:	83892707          	flw	fa4,-1992(s2) # 800d838 <__SDATA_BEGIN__+0x8>
 800a6fc:	00f577d3          	fadd.s	fa5,fa0,fa5
 800a700:	a0f71753          	flt.s	a4,fa4,fa5
 800a704:	0e071063          	bnez	a4,800a7e4 <__ieee754_asinf+0x14c>
 800a708:	f0078553          	fmv.s.x	fa0,a5
 800a70c:	558010ef          	jal	ra,800bc64 <fabsf>
 800a710:	83892787          	flw	fa5,-1992(s2)
 800a714:	0800e7b7          	lui	a5,0x800e
 800a718:	8707a407          	flw	fs0,-1936(a5) # 800d870 <__SDATA_BEGIN__+0x40>
 800a71c:	08a7f553          	fsub.s	fa0,fa5,fa0
 800a720:	0800e7b7          	lui	a5,0x800e
 800a724:	8487a487          	flw	fs1,-1976(a5) # 800d848 <__SDATA_BEGIN__+0x18>
 800a728:	0800e7b7          	lui	a5,0x800e
 800a72c:	84c7a707          	flw	fa4,-1972(a5) # 800d84c <__SDATA_BEGIN__+0x1c>
 800a730:	10857453          	fmul.s	fs0,fa0,fs0
 800a734:	0800e7b7          	lui	a5,0x800e
 800a738:	709474c3          	fmadd.s	fs1,fs0,fs1,fa4
 800a73c:	8507a707          	flw	fa4,-1968(a5) # 800d850 <__SDATA_BEGIN__+0x20>
 800a740:	0800e7b7          	lui	a5,0x800e
 800a744:	8607a907          	flw	fs2,-1952(a5) # 800d860 <__SDATA_BEGIN__+0x30>
 800a748:	0800e7b7          	lui	a5,0x800e
 800a74c:	7084f4c3          	fmadd.s	fs1,fs1,fs0,fa4
 800a750:	8647a707          	flw	fa4,-1948(a5) # 800d864 <__SDATA_BEGIN__+0x34>
 800a754:	0800e7b7          	lui	a5,0x800e
 800a758:	20840553          	fmv.s	fa0,fs0
 800a75c:	71247943          	fmadd.s	fs2,fs0,fs2,fa4
 800a760:	8547a707          	flw	fa4,-1964(a5) # 800d854 <__SDATA_BEGIN__+0x24>
 800a764:	0800e7b7          	lui	a5,0x800e
 800a768:	7084f4c3          	fmadd.s	fs1,fs1,fs0,fa4
 800a76c:	8687a707          	flw	fa4,-1944(a5) # 800d868 <__SDATA_BEGIN__+0x38>
 800a770:	0800e7b7          	lui	a5,0x800e
 800a774:	70897943          	fmadd.s	fs2,fs2,fs0,fa4
 800a778:	8587a707          	flw	fa4,-1960(a5) # 800d858 <__SDATA_BEGIN__+0x28>
 800a77c:	0800e7b7          	lui	a5,0x800e
 800a780:	7084f4c3          	fmadd.s	fs1,fs1,fs0,fa4
 800a784:	85c7a707          	flw	fa4,-1956(a5) # 800d85c <__SDATA_BEGIN__+0x2c>
 800a788:	0800e7b7          	lui	a5,0x800e
 800a78c:	7084f4c3          	fmadd.s	fs1,fs1,fs0,fa4
 800a790:	86c7a707          	flw	fa4,-1940(a5) # 800d86c <__SDATA_BEGIN__+0x3c>
 800a794:	70897943          	fmadd.s	fs2,fs2,fs0,fa4
 800a798:	1084f4d3          	fmul.s	fs1,fs1,fs0
 800a79c:	78897943          	fmadd.s	fs2,fs2,fs0,fa5
 800a7a0:	67c000ef          	jal	ra,800ae1c <__ieee754_sqrtf>
 800a7a4:	3f79a737          	lui	a4,0x3f79a
 800a7a8:	99970713          	addi	a4,a4,-1639 # 3f799999 <__BSS_END__+0x3778bfdd>
 800a7ac:	e00507d3          	fmv.x.s	a5,fa0
 800a7b0:	08875463          	ble	s0,a4,800a838 <__ieee754_asinf+0x1a0>
 800a7b4:	1924f4d3          	fdiv.s	fs1,fs1,fs2
 800a7b8:	0800e7b7          	lui	a5,0x800e
 800a7bc:	8747a787          	flw	fa5,-1932(a5) # 800d874 <__SDATA_BEGIN__+0x44>
 800a7c0:	0800e7b7          	lui	a5,0x800e
 800a7c4:	509574c3          	fmadd.s	fs1,fa0,fs1,fa0
 800a7c8:	8787a507          	flw	fa0,-1928(a5) # 800d878 <__SDATA_BEGIN__+0x48>
 800a7cc:	0800e7b7          	lui	a5,0x800e
 800a7d0:	50f4f4c3          	fmadd.s	fs1,fs1,fa5,fa0
 800a7d4:	8407a507          	flw	fa0,-1984(a5) # 800d840 <__SDATA_BEGIN__+0x10>
 800a7d8:	08957553          	fsub.s	fa0,fa0,fs1
 800a7dc:	00904463          	bgtz	s1,800a7e4 <__ieee754_asinf+0x14c>
 800a7e0:	20a51553          	fneg.s	fa0,fa0
 800a7e4:	02c12083          	lw	ra,44(sp)
 800a7e8:	02812403          	lw	s0,40(sp)
 800a7ec:	02412483          	lw	s1,36(sp)
 800a7f0:	02012903          	lw	s2,32(sp)
 800a7f4:	01813407          	fld	fs0,24(sp)
 800a7f8:	01013487          	fld	fs1,16(sp)
 800a7fc:	00813907          	fld	fs2,8(sp)
 800a800:	03010113          	addi	sp,sp,48
 800a804:	00008067          	ret
 800a808:	08a57553          	fsub.s	fa0,fa0,fa0
 800a80c:	18a57553          	fdiv.s	fa0,fa0,fa0
 800a810:	fd5ff06f          	j	800a7e4 <__ieee754_asinf+0x14c>
 800a814:	0800e737          	lui	a4,0x800e
 800a818:	83c72507          	flw	fa0,-1988(a4) # 800d83c <__SDATA_BEGIN__+0xc>
 800a81c:	f00787d3          	fmv.s.x	fa5,a5
 800a820:	0800e737          	lui	a4,0x800e
 800a824:	f0078753          	fmv.s.x	fa4,a5
 800a828:	10a7f553          	fmul.s	fa0,fa5,fa0
 800a82c:	84072787          	flw	fa5,-1984(a4) # 800d840 <__SDATA_BEGIN__+0x10>
 800a830:	50f77543          	fmadd.s	fa0,fa4,fa5,fa0
 800a834:	fb1ff06f          	j	800a7e4 <__ieee754_asinf+0x14c>
 800a838:	fffff737          	lui	a4,0xfffff
 800a83c:	00f77733          	and	a4,a4,a5
 800a840:	f00707d3          	fmv.s.x	fa5,a4
 800a844:	f0070753          	fmv.s.x	fa4,a4
 800a848:	1924f4d3          	fdiv.s	fs1,fs1,fs2
 800a84c:	40f7f44b          	fnmsub.s	fs0,fa5,fa5,fs0
 800a850:	00e57653          	fadd.s	fa2,fa0,fa4
 800a854:	0800e7b7          	lui	a5,0x800e
 800a858:	00a577d3          	fadd.s	fa5,fa0,fa0
 800a85c:	0800e6b7          	lui	a3,0x800e
 800a860:	87c7a507          	flw	fa0,-1924(a5) # 800d87c <__SDATA_BEGIN__+0x4c>
 800a864:	0800e7b7          	lui	a5,0x800e
 800a868:	8746a687          	flw	fa3,-1932(a3) # 800d874 <__SDATA_BEGIN__+0x44>
 800a86c:	50d7774b          	fnmsub.s	fa4,fa4,fa3,fa0
 800a870:	18c47453          	fdiv.s	fs0,fs0,fa2
 800a874:	83c7a607          	flw	fa2,-1988(a5) # 800d83c <__SDATA_BEGIN__+0xc>
 800a878:	60d4744b          	fnmsub.s	fs0,fs0,fa3,fa2
 800a87c:	4097f4c7          	fmsub.s	fs1,fa5,fs1,fs0
 800a880:	08e4f4d3          	fsub.s	fs1,fs1,fa4
 800a884:	08957553          	fsub.s	fa0,fa0,fs1
 800a888:	f55ff06f          	j	800a7dc <__ieee754_asinf+0x144>
 800a88c:	10a57753          	fmul.s	fa4,fa0,fa0
 800a890:	0800e737          	lui	a4,0x800e
 800a894:	84872787          	flw	fa5,-1976(a4) # 800d848 <__SDATA_BEGIN__+0x18>
 800a898:	0800e737          	lui	a4,0x800e
 800a89c:	84c72687          	flw	fa3,-1972(a4) # 800d84c <__SDATA_BEGIN__+0x1c>
 800a8a0:	0800e737          	lui	a4,0x800e
 800a8a4:	68f777c3          	fmadd.s	fa5,fa4,fa5,fa3
 800a8a8:	85072687          	flw	fa3,-1968(a4) # 800d850 <__SDATA_BEGIN__+0x20>
 800a8ac:	0800e737          	lui	a4,0x800e
 800a8b0:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800a8b4:	85472687          	flw	fa3,-1964(a4) # 800d854 <__SDATA_BEGIN__+0x24>
 800a8b8:	0800e737          	lui	a4,0x800e
 800a8bc:	86072507          	flw	fa0,-1952(a4) # 800d860 <__SDATA_BEGIN__+0x30>
 800a8c0:	0800e737          	lui	a4,0x800e
 800a8c4:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800a8c8:	86472687          	flw	fa3,-1948(a4) # 800d864 <__SDATA_BEGIN__+0x34>
 800a8cc:	0800e737          	lui	a4,0x800e
 800a8d0:	68a77543          	fmadd.s	fa0,fa4,fa0,fa3
 800a8d4:	85872687          	flw	fa3,-1960(a4) # 800d858 <__SDATA_BEGIN__+0x28>
 800a8d8:	0800e737          	lui	a4,0x800e
 800a8dc:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800a8e0:	86872687          	flw	fa3,-1944(a4) # 800d868 <__SDATA_BEGIN__+0x38>
 800a8e4:	0800e737          	lui	a4,0x800e
 800a8e8:	68e57543          	fmadd.s	fa0,fa0,fa4,fa3
 800a8ec:	85c72687          	flw	fa3,-1956(a4) # 800d85c <__SDATA_BEGIN__+0x2c>
 800a8f0:	0800e737          	lui	a4,0x800e
 800a8f4:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800a8f8:	86c72687          	flw	fa3,-1940(a4) # 800d86c <__SDATA_BEGIN__+0x3c>
 800a8fc:	0800e737          	lui	a4,0x800e
 800a900:	68e57543          	fmadd.s	fa0,fa0,fa4,fa3
 800a904:	83872687          	flw	fa3,-1992(a4) # 800d838 <__SDATA_BEGIN__+0x8>
 800a908:	10e7f7d3          	fmul.s	fa5,fa5,fa4
 800a90c:	68e57543          	fmadd.s	fa0,fa0,fa4,fa3
 800a910:	18a7f553          	fdiv.s	fa0,fa5,fa0
 800a914:	f00787d3          	fmv.s.x	fa5,a5
 800a918:	78a7f543          	fmadd.s	fa0,fa5,fa0,fa5
 800a91c:	ec9ff06f          	j	800a7e4 <__ieee754_asinf+0x14c>

0800a920 <__ieee754_atan2f>:
 800a920:	e0058753          	fmv.x.s	a4,fa1
 800a924:	800007b7          	lui	a5,0x80000
 800a928:	fff7c793          	not	a5,a5
 800a92c:	00e7f5b3          	and	a1,a5,a4
 800a930:	7f800637          	lui	a2,0x7f800
 800a934:	e00506d3          	fmv.x.s	a3,fa0
 800a938:	06b64463          	blt	a2,a1,800a9a0 <__ieee754_atan2f+0x80>
 800a93c:	00d7f7b3          	and	a5,a5,a3
 800a940:	00068893          	mv	a7,a3
 800a944:	04f64e63          	blt	a2,a5,800a9a0 <__ieee754_atan2f+0x80>
 800a948:	3f800837          	lui	a6,0x3f800
 800a94c:	13070663          	beq	a4,a6,800aa78 <__ieee754_atan2f+0x158>
 800a950:	ff010113          	addi	sp,sp,-16
 800a954:	00812423          	sw	s0,8(sp)
 800a958:	41e75413          	srai	s0,a4,0x1e
 800a95c:	00247413          	andi	s0,s0,2
 800a960:	01f6d813          	srli	a6,a3,0x1f
 800a964:	00112623          	sw	ra,12(sp)
 800a968:	01046433          	or	s0,s0,a6
 800a96c:	04079463          	bnez	a5,800a9b4 <__ieee754_atan2f+0x94>
 800a970:	00200793          	li	a5,2
 800a974:	0cf40663          	beq	s0,a5,800aa40 <__ieee754_atan2f+0x120>
 800a978:	00300793          	li	a5,3
 800a97c:	e0050653          	fmv.x.s	a2,fa0
 800a980:	00f41663          	bne	s0,a5,800a98c <__ieee754_atan2f+0x6c>
 800a984:	0800e7b7          	lui	a5,0x800e
 800a988:	8847a603          	lw	a2,-1916(a5) # 800d884 <__SDATA_BEGIN__+0x54>
 800a98c:	00c12083          	lw	ra,12(sp)
 800a990:	00812403          	lw	s0,8(sp)
 800a994:	f0060553          	fmv.s.x	fa0,a2
 800a998:	01010113          	addi	sp,sp,16
 800a99c:	00008067          	ret
 800a9a0:	f00707d3          	fmv.s.x	fa5,a4
 800a9a4:	f0068753          	fmv.s.x	fa4,a3
 800a9a8:	00e7f7d3          	fadd.s	fa5,fa5,fa4
 800a9ac:	20f78553          	fmv.s	fa0,fa5
 800a9b0:	00008067          	ret
 800a9b4:	06058e63          	beqz	a1,800aa30 <__ieee754_atan2f+0x110>
 800a9b8:	08c58a63          	beq	a1,a2,800aa4c <__ieee754_atan2f+0x12c>
 800a9bc:	06c78a63          	beq	a5,a2,800aa30 <__ieee754_atan2f+0x110>
 800a9c0:	40b787b3          	sub	a5,a5,a1
 800a9c4:	4177d793          	srai	a5,a5,0x17
 800a9c8:	03c00613          	li	a2,60
 800a9cc:	0af64863          	blt	a2,a5,800aa7c <__ieee754_atan2f+0x15c>
 800a9d0:	00075863          	bgez	a4,800a9e0 <__ieee754_atan2f+0xc0>
 800a9d4:	fc400593          	li	a1,-60
 800a9d8:	00000613          	li	a2,0
 800a9dc:	00b7ce63          	blt	a5,a1,800a9f8 <__ieee754_atan2f+0xd8>
 800a9e0:	f0068553          	fmv.s.x	fa0,a3
 800a9e4:	f00707d3          	fmv.s.x	fa5,a4
 800a9e8:	18f57553          	fdiv.s	fa0,fa0,fa5
 800a9ec:	278010ef          	jal	ra,800bc64 <fabsf>
 800a9f0:	018010ef          	jal	ra,800ba08 <atanf>
 800a9f4:	e0050653          	fmv.x.s	a2,fa0
 800a9f8:	00100793          	li	a5,1
 800a9fc:	0ef40063          	beq	s0,a5,800aadc <__ieee754_atan2f+0x1bc>
 800aa00:	00200793          	li	a5,2
 800aa04:	0af40a63          	beq	s0,a5,800aab8 <__ieee754_atan2f+0x198>
 800aa08:	f80402e3          	beqz	s0,800a98c <__ieee754_atan2f+0x6c>
 800aa0c:	0800e7b7          	lui	a5,0x800e
 800aa10:	f0060753          	fmv.s.x	fa4,a2
 800aa14:	89c7a787          	flw	fa5,-1892(a5) # 800d89c <__SDATA_BEGIN__+0x6c>
 800aa18:	0800e7b7          	lui	a5,0x800e
 800aa1c:	00f777d3          	fadd.s	fa5,fa4,fa5
 800aa20:	8807a707          	flw	fa4,-1920(a5) # 800d880 <__SDATA_BEGIN__+0x50>
 800aa24:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800aa28:	e0078653          	fmv.x.s	a2,fa5
 800aa2c:	f61ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aa30:	0608ce63          	bltz	a7,800aaac <__ieee754_atan2f+0x18c>
 800aa34:	0800e7b7          	lui	a5,0x800e
 800aa38:	8407a603          	lw	a2,-1984(a5) # 800d840 <__SDATA_BEGIN__+0x10>
 800aa3c:	f51ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aa40:	0800e7b7          	lui	a5,0x800e
 800aa44:	8807a603          	lw	a2,-1920(a5) # 800d880 <__SDATA_BEGIN__+0x50>
 800aa48:	f45ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aa4c:	02b78e63          	beq	a5,a1,800aa88 <__ieee754_atan2f+0x168>
 800aa50:	00200793          	li	a5,2
 800aa54:	fef406e3          	beq	s0,a5,800aa40 <__ieee754_atan2f+0x120>
 800aa58:	00300793          	li	a5,3
 800aa5c:	f2f404e3          	beq	s0,a5,800a984 <__ieee754_atan2f+0x64>
 800aa60:	00100793          	li	a5,1
 800aa64:	00000613          	li	a2,0
 800aa68:	f2f412e3          	bne	s0,a5,800a98c <__ieee754_atan2f+0x6c>
 800aa6c:	0800e7b7          	lui	a5,0x800e
 800aa70:	8887a603          	lw	a2,-1912(a5) # 800d888 <__SDATA_BEGIN__+0x58>
 800aa74:	f19ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aa78:	7910006f          	j	800ba08 <atanf>
 800aa7c:	0800e7b7          	lui	a5,0x800e
 800aa80:	8407a603          	lw	a2,-1984(a5) # 800d840 <__SDATA_BEGIN__+0x10>
 800aa84:	f75ff06f          	j	800a9f8 <__ieee754_atan2f+0xd8>
 800aa88:	00200793          	li	a5,2
 800aa8c:	06f40a63          	beq	s0,a5,800ab00 <__ieee754_atan2f+0x1e0>
 800aa90:	00300793          	li	a5,3
 800aa94:	06f40063          	beq	s0,a5,800aaf4 <__ieee754_atan2f+0x1d4>
 800aa98:	00100793          	li	a5,1
 800aa9c:	04f40663          	beq	s0,a5,800aae8 <__ieee754_atan2f+0x1c8>
 800aaa0:	0800e7b7          	lui	a5,0x800e
 800aaa4:	87c7a603          	lw	a2,-1924(a5) # 800d87c <__SDATA_BEGIN__+0x4c>
 800aaa8:	ee5ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aaac:	0800e7b7          	lui	a5,0x800e
 800aab0:	88c7a603          	lw	a2,-1908(a5) # 800d88c <__SDATA_BEGIN__+0x5c>
 800aab4:	ed9ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aab8:	0800e7b7          	lui	a5,0x800e
 800aabc:	f0060753          	fmv.s.x	fa4,a2
 800aac0:	89c7a787          	flw	fa5,-1892(a5) # 800d89c <__SDATA_BEGIN__+0x6c>
 800aac4:	0800e7b7          	lui	a5,0x800e
 800aac8:	00f777d3          	fadd.s	fa5,fa4,fa5
 800aacc:	8807a707          	flw	fa4,-1920(a5) # 800d880 <__SDATA_BEGIN__+0x50>
 800aad0:	08f777d3          	fsub.s	fa5,fa4,fa5
 800aad4:	e0078653          	fmv.x.s	a2,fa5
 800aad8:	eb5ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aadc:	800007b7          	lui	a5,0x80000
 800aae0:	00c7c633          	xor	a2,a5,a2
 800aae4:	ea9ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aae8:	0800e7b7          	lui	a5,0x800e
 800aaec:	8987a603          	lw	a2,-1896(a5) # 800d898 <__SDATA_BEGIN__+0x68>
 800aaf0:	e9dff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800aaf4:	0800e7b7          	lui	a5,0x800e
 800aaf8:	8947a603          	lw	a2,-1900(a5) # 800d894 <__SDATA_BEGIN__+0x64>
 800aafc:	e91ff06f          	j	800a98c <__ieee754_atan2f+0x6c>
 800ab00:	0800e7b7          	lui	a5,0x800e
 800ab04:	8907a603          	lw	a2,-1904(a5) # 800d890 <__SDATA_BEGIN__+0x60>
 800ab08:	e85ff06f          	j	800a98c <__ieee754_atan2f+0x6c>

0800ab0c <__ieee754_rem_pio2f>:
 800ab0c:	fe010113          	addi	sp,sp,-32
 800ab10:	e00507d3          	fmv.x.s	a5,fa0
 800ab14:	00812c23          	sw	s0,24(sp)
 800ab18:	80000437          	lui	s0,0x80000
 800ab1c:	fff44413          	not	s0,s0
 800ab20:	3f491737          	lui	a4,0x3f491
 800ab24:	00912a23          	sw	s1,20(sp)
 800ab28:	00112e23          	sw	ra,28(sp)
 800ab2c:	01212823          	sw	s2,16(sp)
 800ab30:	00f47433          	and	s0,s0,a5
 800ab34:	fd870713          	addi	a4,a4,-40 # 3f490fd8 <__BSS_END__+0x3748361c>
 800ab38:	00050493          	mv	s1,a0
 800ab3c:	12875063          	ble	s0,a4,800ac5c <__ieee754_rem_pio2f+0x150>
 800ab40:	4016d737          	lui	a4,0x4016d
 800ab44:	be370713          	addi	a4,a4,-1053 # 4016cbe3 <__BSS_END__+0x3815f227>
 800ab48:	00078913          	mv	s2,a5
 800ab4c:	04874e63          	blt	a4,s0,800aba8 <__ieee754_rem_pio2f+0x9c>
 800ab50:	3fc91737          	lui	a4,0x3fc91
 800ab54:	0800e6b7          	lui	a3,0x800e
 800ab58:	ff047413          	andi	s0,s0,-16
 800ab5c:	fd070713          	addi	a4,a4,-48 # 3fc90fd0 <__BSS_END__+0x37c83614>
 800ab60:	8a06a787          	flw	fa5,-1888(a3) # 800d8a0 <__SDATA_BEGIN__+0x70>
 800ab64:	26f05a63          	blez	a5,800add8 <__ieee754_rem_pio2f+0x2cc>
 800ab68:	08f577d3          	fsub.s	fa5,fa0,fa5
 800ab6c:	12e40463          	beq	s0,a4,800ac94 <__ieee754_rem_pio2f+0x188>
 800ab70:	0800e7b7          	lui	a5,0x800e
 800ab74:	8a47a707          	flw	fa4,-1884(a5) # 800d8a4 <__SDATA_BEGIN__+0x74>
 800ab78:	08e7f6d3          	fsub.s	fa3,fa5,fa4
 800ab7c:	00100513          	li	a0,1
 800ab80:	08d7f7d3          	fsub.s	fa5,fa5,fa3
 800ab84:	00d4a027          	fsw	fa3,0(s1)
 800ab88:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800ab8c:	00f4a227          	fsw	fa5,4(s1)
 800ab90:	01c12083          	lw	ra,28(sp)
 800ab94:	01812403          	lw	s0,24(sp)
 800ab98:	01412483          	lw	s1,20(sp)
 800ab9c:	01012903          	lw	s2,16(sp)
 800aba0:	02010113          	addi	sp,sp,32
 800aba4:	00008067          	ret
 800aba8:	434917b7          	lui	a5,0x43491
 800abac:	f8078793          	addi	a5,a5,-128 # 43490f80 <__BSS_END__+0x3b4835c4>
 800abb0:	0e87de63          	ble	s0,a5,800acac <__ieee754_rem_pio2f+0x1a0>
 800abb4:	7f8007b7          	lui	a5,0x7f800
 800abb8:	0cf45463          	ble	a5,s0,800ac80 <__ieee754_rem_pio2f+0x174>
 800abbc:	41745613          	srai	a2,s0,0x17
 800abc0:	f7a60613          	addi	a2,a2,-134 # 7f7fff7a <__BSS_END__+0x777f25be>
 800abc4:	01761793          	slli	a5,a2,0x17
 800abc8:	40f40433          	sub	s0,s0,a5
 800abcc:	f00407d3          	fmv.s.x	fa5,s0
 800abd0:	0800e737          	lui	a4,0x800e
 800abd4:	8bc72687          	flw	fa3,-1860(a4) # 800d8bc <__SDATA_BEGIN__+0x8c>
 800abd8:	c00797d3          	fcvt.w.s	a5,fa5,rtz
 800abdc:	f0000653          	fmv.s.x	fa2,zero
 800abe0:	00300693          	li	a3,3
 800abe4:	d007f753          	fcvt.s.w	fa4,a5
 800abe8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800abec:	00e12227          	fsw	fa4,4(sp)
 800abf0:	10d7f7d3          	fmul.s	fa5,fa5,fa3
 800abf4:	c00797d3          	fcvt.w.s	a5,fa5,rtz
 800abf8:	d007f753          	fcvt.s.w	fa4,a5
 800abfc:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800ac00:	00e12427          	fsw	fa4,8(sp)
 800ac04:	10d7f7d3          	fmul.s	fa5,fa5,fa3
 800ac08:	a0c7a7d3          	feq.s	a5,fa5,fa2
 800ac0c:	00f12627          	fsw	fa5,12(sp)
 800ac10:	00078863          	beqz	a5,800ac20 <__ieee754_rem_pio2f+0x114>
 800ac14:	a0c726d3          	feq.s	a3,fa4,fa2
 800ac18:	0016b693          	seqz	a3,a3
 800ac1c:	00168693          	addi	a3,a3,1
 800ac20:	0800c7b7          	lui	a5,0x800c
 800ac24:	4b478793          	addi	a5,a5,1204 # 800c4b4 <two_over_pi>
 800ac28:	00200713          	li	a4,2
 800ac2c:	00048593          	mv	a1,s1
 800ac30:	00410513          	addi	a0,sp,4
 800ac34:	44c000ef          	jal	ra,800b080 <__kernel_rem_pio2f>
 800ac38:	f4095ce3          	bgez	s2,800ab90 <__ieee754_rem_pio2f+0x84>
 800ac3c:	0004a707          	flw	fa4,0(s1)
 800ac40:	0044a787          	flw	fa5,4(s1)
 800ac44:	40a00533          	neg	a0,a0
 800ac48:	20e71753          	fneg.s	fa4,fa4
 800ac4c:	20f797d3          	fneg.s	fa5,fa5
 800ac50:	00e4a027          	fsw	fa4,0(s1)
 800ac54:	00f4a227          	fsw	fa5,4(s1)
 800ac58:	f39ff06f          	j	800ab90 <__ieee754_rem_pio2f+0x84>
 800ac5c:	01c12083          	lw	ra,28(sp)
 800ac60:	01812403          	lw	s0,24(sp)
 800ac64:	00a4a027          	fsw	fa0,0(s1)
 800ac68:	00052223          	sw	zero,4(a0)
 800ac6c:	01412483          	lw	s1,20(sp)
 800ac70:	01012903          	lw	s2,16(sp)
 800ac74:	00000513          	li	a0,0
 800ac78:	02010113          	addi	sp,sp,32
 800ac7c:	00008067          	ret
 800ac80:	08a577d3          	fsub.s	fa5,fa0,fa0
 800ac84:	00000513          	li	a0,0
 800ac88:	00f4a227          	fsw	fa5,4(s1)
 800ac8c:	00f4a027          	fsw	fa5,0(s1)
 800ac90:	f01ff06f          	j	800ab90 <__ieee754_rem_pio2f+0x84>
 800ac94:	0800e7b7          	lui	a5,0x800e
 800ac98:	8ac7a707          	flw	fa4,-1876(a5) # 800d8ac <__SDATA_BEGIN__+0x7c>
 800ac9c:	0800e7b7          	lui	a5,0x800e
 800aca0:	8a87a687          	flw	fa3,-1880(a5) # 800d8a8 <__SDATA_BEGIN__+0x78>
 800aca4:	08d7f7d3          	fsub.s	fa5,fa5,fa3
 800aca8:	ed1ff06f          	j	800ab78 <__ieee754_rem_pio2f+0x6c>
 800acac:	7b9000ef          	jal	ra,800bc64 <fabsf>
 800acb0:	0800e7b7          	lui	a5,0x800e
 800acb4:	8b07a787          	flw	fa5,-1872(a5) # 800d8b0 <__SDATA_BEGIN__+0x80>
 800acb8:	0800e7b7          	lui	a5,0x800e
 800acbc:	8707a707          	flw	fa4,-1936(a5) # 800d870 <__SDATA_BEGIN__+0x40>
 800acc0:	0800e737          	lui	a4,0x800e
 800acc4:	01f00793          	li	a5,31
 800acc8:	70f577c3          	fmadd.s	fa5,fa0,fa5,fa4
 800accc:	c0079553          	fcvt.w.s	a0,fa5,rtz
 800acd0:	8a072787          	flw	fa5,-1888(a4) # 800d8a0 <__SDATA_BEGIN__+0x70>
 800acd4:	0800e737          	lui	a4,0x800e
 800acd8:	d0057753          	fcvt.s.w	fa4,a0
 800acdc:	50f7754b          	fnmsub.s	fa0,fa4,fa5,fa0
 800ace0:	8a472787          	flw	fa5,-1884(a4) # 800d8a4 <__SDATA_BEGIN__+0x74>
 800ace4:	10f777d3          	fmul.s	fa5,fa4,fa5
 800ace8:	04a7ce63          	blt	a5,a0,800ad44 <__ieee754_rem_pio2f+0x238>
 800acec:	fff50793          	addi	a5,a0,-1
 800acf0:	00279713          	slli	a4,a5,0x2
 800acf4:	0800c7b7          	lui	a5,0x800c
 800acf8:	43478793          	addi	a5,a5,1076 # 800c434 <npio2_hw>
 800acfc:	08f576d3          	fsub.s	fa3,fa0,fa5
 800ad00:	00e787b3          	add	a5,a5,a4
 800ad04:	0007a683          	lw	a3,0(a5)
 800ad08:	f0047713          	andi	a4,s0,-256
 800ad0c:	e00687d3          	fmv.x.s	a5,fa3
 800ad10:	02d70e63          	beq	a4,a3,800ad4c <__ieee754_rem_pio2f+0x240>
 800ad14:	00f4a023          	sw	a5,0(s1)
 800ad18:	f0078753          	fmv.s.x	fa4,a5
 800ad1c:	08e57553          	fsub.s	fa0,fa0,fa4
 800ad20:	08f57553          	fsub.s	fa0,fa0,fa5
 800ad24:	00a4a227          	fsw	fa0,4(s1)
 800ad28:	e60954e3          	bgez	s2,800ab90 <__ieee754_rem_pio2f+0x84>
 800ad2c:	20e717d3          	fneg.s	fa5,fa4
 800ad30:	20a51553          	fneg.s	fa0,fa0
 800ad34:	40a00533          	neg	a0,a0
 800ad38:	00f4a027          	fsw	fa5,0(s1)
 800ad3c:	00a4a227          	fsw	fa0,4(s1)
 800ad40:	e51ff06f          	j	800ab90 <__ieee754_rem_pio2f+0x84>
 800ad44:	08f576d3          	fsub.s	fa3,fa0,fa5
 800ad48:	e00687d3          	fmv.x.s	a5,fa3
 800ad4c:	0177d713          	srli	a4,a5,0x17
 800ad50:	41745413          	srai	s0,s0,0x17
 800ad54:	0ff77713          	andi	a4,a4,255
 800ad58:	40e40733          	sub	a4,s0,a4
 800ad5c:	00800693          	li	a3,8
 800ad60:	fae6dae3          	ble	a4,a3,800ad14 <__ieee754_rem_pio2f+0x208>
 800ad64:	0800e7b7          	lui	a5,0x800e
 800ad68:	8a87a787          	flw	fa5,-1880(a5) # 800d8a8 <__SDATA_BEGIN__+0x78>
 800ad6c:	0800e7b7          	lui	a5,0x800e
 800ad70:	01900693          	li	a3,25
 800ad74:	50f776cb          	fnmsub.s	fa3,fa4,fa5,fa0
 800ad78:	08d57553          	fsub.s	fa0,fa0,fa3
 800ad7c:	50f7754b          	fnmsub.s	fa0,fa4,fa5,fa0
 800ad80:	8ac7a787          	flw	fa5,-1876(a5) # 800d8ac <__SDATA_BEGIN__+0x7c>
 800ad84:	50f777c7          	fmsub.s	fa5,fa4,fa5,fa0
 800ad88:	08f6f653          	fsub.s	fa2,fa3,fa5
 800ad8c:	e00607d3          	fmv.x.s	a5,fa2
 800ad90:	0177d713          	srli	a4,a5,0x17
 800ad94:	0ff77713          	andi	a4,a4,255
 800ad98:	40e40433          	sub	s0,s0,a4
 800ad9c:	0086c863          	blt	a3,s0,800adac <__ieee754_rem_pio2f+0x2a0>
 800ada0:	00c4a027          	fsw	fa2,0(s1)
 800ada4:	20d68553          	fmv.s	fa0,fa3
 800ada8:	f71ff06f          	j	800ad18 <__ieee754_rem_pio2f+0x20c>
 800adac:	0800e7b7          	lui	a5,0x800e
 800adb0:	8b47a787          	flw	fa5,-1868(a5) # 800d8b4 <__SDATA_BEGIN__+0x84>
 800adb4:	0800e7b7          	lui	a5,0x800e
 800adb8:	68f7754b          	fnmsub.s	fa0,fa4,fa5,fa3
 800adbc:	08a6f6d3          	fsub.s	fa3,fa3,fa0
 800adc0:	68f776cb          	fnmsub.s	fa3,fa4,fa5,fa3
 800adc4:	8b87a787          	flw	fa5,-1864(a5) # 800d8b8 <__SDATA_BEGIN__+0x88>
 800adc8:	68f777c7          	fmsub.s	fa5,fa4,fa5,fa3
 800adcc:	08f57753          	fsub.s	fa4,fa0,fa5
 800add0:	e00707d3          	fmv.x.s	a5,fa4
 800add4:	f41ff06f          	j	800ad14 <__ieee754_rem_pio2f+0x208>
 800add8:	00f577d3          	fadd.s	fa5,fa0,fa5
 800addc:	02e40463          	beq	s0,a4,800ae04 <__ieee754_rem_pio2f+0x2f8>
 800ade0:	0800e7b7          	lui	a5,0x800e
 800ade4:	8a47a707          	flw	fa4,-1884(a5) # 800d8a4 <__SDATA_BEGIN__+0x74>
 800ade8:	00e7f6d3          	fadd.s	fa3,fa5,fa4
 800adec:	fff00513          	li	a0,-1
 800adf0:	08d7f7d3          	fsub.s	fa5,fa5,fa3
 800adf4:	00d4a027          	fsw	fa3,0(s1)
 800adf8:	00e7f7d3          	fadd.s	fa5,fa5,fa4
 800adfc:	00f4a227          	fsw	fa5,4(s1)
 800ae00:	d91ff06f          	j	800ab90 <__ieee754_rem_pio2f+0x84>
 800ae04:	0800e7b7          	lui	a5,0x800e
 800ae08:	8ac7a707          	flw	fa4,-1876(a5) # 800d8ac <__SDATA_BEGIN__+0x7c>
 800ae0c:	0800e7b7          	lui	a5,0x800e
 800ae10:	8a87a687          	flw	fa3,-1880(a5) # 800d8a8 <__SDATA_BEGIN__+0x78>
 800ae14:	00d7f7d3          	fadd.s	fa5,fa5,fa3
 800ae18:	fd1ff06f          	j	800ade8 <__ieee754_rem_pio2f+0x2dc>

0800ae1c <__ieee754_sqrtf>:
 800ae1c:	e00506d3          	fmv.x.s	a3,fa0
 800ae20:	800007b7          	lui	a5,0x80000
 800ae24:	fff7c793          	not	a5,a5
 800ae28:	00d7f7b3          	and	a5,a5,a3
 800ae2c:	7f800737          	lui	a4,0x7f800
 800ae30:	0ce7f463          	bleu	a4,a5,800aef8 <__ieee754_sqrtf+0xdc>
 800ae34:	e0050553          	fmv.x.s	a0,fa0
 800ae38:	0a078c63          	beqz	a5,800aef0 <__ieee754_sqrtf+0xd4>
 800ae3c:	00068793          	mv	a5,a3
 800ae40:	0c06c863          	bltz	a3,800af10 <__ieee754_sqrtf+0xf4>
 800ae44:	00d77633          	and	a2,a4,a3
 800ae48:	4176d713          	srai	a4,a3,0x17
 800ae4c:	02061663          	bnez	a2,800ae78 <__ieee754_sqrtf+0x5c>
 800ae50:	00869613          	slli	a2,a3,0x8
 800ae54:	0c064863          	bltz	a2,800af24 <__ieee754_sqrtf+0x108>
 800ae58:	00000693          	li	a3,0
 800ae5c:	0080006f          	j	800ae64 <__ieee754_sqrtf+0x48>
 800ae60:	00060693          	mv	a3,a2
 800ae64:	00179793          	slli	a5,a5,0x1
 800ae68:	00879593          	slli	a1,a5,0x8
 800ae6c:	00168613          	addi	a2,a3,1
 800ae70:	fe05d8e3          	bgez	a1,800ae60 <__ieee754_sqrtf+0x44>
 800ae74:	40d70733          	sub	a4,a4,a3
 800ae78:	008006b7          	lui	a3,0x800
 800ae7c:	fff68613          	addi	a2,a3,-1 # 7fffff <_start-0x7804001>
 800ae80:	00c7f7b3          	and	a5,a5,a2
 800ae84:	f8170713          	addi	a4,a4,-127 # 7f7fff81 <__BSS_END__+0x777f25c5>
 800ae88:	00d7e6b3          	or	a3,a5,a3
 800ae8c:	00177613          	andi	a2,a4,1
 800ae90:	00169793          	slli	a5,a3,0x1
 800ae94:	06061a63          	bnez	a2,800af08 <__ieee754_sqrtf+0xec>
 800ae98:	40175813          	srai	a6,a4,0x1
 800ae9c:	01900693          	li	a3,25
 800aea0:	00000513          	li	a0,0
 800aea4:	00000593          	li	a1,0
 800aea8:	01000737          	lui	a4,0x1000
 800aeac:	00e58633          	add	a2,a1,a4
 800aeb0:	fff68693          	addi	a3,a3,-1
 800aeb4:	00c7c863          	blt	a5,a2,800aec4 <__ieee754_sqrtf+0xa8>
 800aeb8:	00e605b3          	add	a1,a2,a4
 800aebc:	40c787b3          	sub	a5,a5,a2
 800aec0:	00e50533          	add	a0,a0,a4
 800aec4:	00179793          	slli	a5,a5,0x1
 800aec8:	00175713          	srli	a4,a4,0x1
 800aecc:	fe0690e3          	bnez	a3,800aeac <__ieee754_sqrtf+0x90>
 800aed0:	00078663          	beqz	a5,800aedc <__ieee754_sqrtf+0xc0>
 800aed4:	00150513          	addi	a0,a0,1
 800aed8:	ffe57513          	andi	a0,a0,-2
 800aedc:	40155513          	srai	a0,a0,0x1
 800aee0:	3f0007b7          	lui	a5,0x3f000
 800aee4:	00f50533          	add	a0,a0,a5
 800aee8:	01781713          	slli	a4,a6,0x17
 800aeec:	00a70533          	add	a0,a4,a0
 800aef0:	f0050553          	fmv.s.x	fa0,a0
 800aef4:	00008067          	ret
 800aef8:	50a577c3          	fmadd.s	fa5,fa0,fa0,fa0
 800aefc:	e0078553          	fmv.x.s	a0,fa5
 800af00:	f0050553          	fmv.s.x	fa0,a0
 800af04:	00008067          	ret
 800af08:	00269793          	slli	a5,a3,0x2
 800af0c:	f8dff06f          	j	800ae98 <__ieee754_sqrtf+0x7c>
 800af10:	08a577d3          	fsub.s	fa5,fa0,fa0
 800af14:	18f7f7d3          	fdiv.s	fa5,fa5,fa5
 800af18:	e0078553          	fmv.x.s	a0,fa5
 800af1c:	f0050553          	fmv.s.x	fa0,a0
 800af20:	00008067          	ret
 800af24:	fff00693          	li	a3,-1
 800af28:	40d70733          	sub	a4,a4,a3
 800af2c:	f4dff06f          	j	800ae78 <__ieee754_sqrtf+0x5c>

0800af30 <__kernel_cosf>:
 800af30:	e0050753          	fmv.x.s	a4,fa0
 800af34:	800007b7          	lui	a5,0x80000
 800af38:	fff7c793          	not	a5,a5
 800af3c:	00e7f7b3          	and	a5,a5,a4
 800af40:	320006b7          	lui	a3,0x32000
 800af44:	08d7d063          	ble	a3,a5,800afc4 <__kernel_cosf+0x94>
 800af48:	c00517d3          	fcvt.w.s	a5,fa0,rtz
 800af4c:	12078463          	beqz	a5,800b074 <__kernel_cosf+0x144>
 800af50:	10a57753          	fmul.s	fa4,fa0,fa0
 800af54:	0800e7b7          	lui	a5,0x800e
 800af58:	8c87a507          	flw	fa0,-1848(a5) # 800d8c8 <__SDATA_BEGIN__+0x98>
 800af5c:	0800e7b7          	lui	a5,0x800e
 800af60:	8cc7a787          	flw	fa5,-1844(a5) # 800d8cc <__SDATA_BEGIN__+0x9c>
 800af64:	0800e7b7          	lui	a5,0x800e
 800af68:	78a77543          	fmadd.s	fa0,fa4,fa0,fa5
 800af6c:	8d07a787          	flw	fa5,-1840(a5) # 800d8d0 <__SDATA_BEGIN__+0xa0>
 800af70:	0800e7b7          	lui	a5,0x800e
 800af74:	78a77543          	fmadd.s	fa0,fa4,fa0,fa5
 800af78:	8d47a787          	flw	fa5,-1836(a5) # 800d8d4 <__SDATA_BEGIN__+0xa4>
 800af7c:	0800e7b7          	lui	a5,0x800e
 800af80:	78a77543          	fmadd.s	fa0,fa4,fa0,fa5
 800af84:	8d87a787          	flw	fa5,-1832(a5) # 800d8d8 <__SDATA_BEGIN__+0xa8>
 800af88:	0800e7b7          	lui	a5,0x800e
 800af8c:	78a77543          	fmadd.s	fa0,fa4,fa0,fa5
 800af90:	8dc7a787          	flw	fa5,-1828(a5) # 800d8dc <__SDATA_BEGIN__+0xac>
 800af94:	78a777c3          	fmadd.s	fa5,fa4,fa0,fa5
 800af98:	10e7f7d3          	fmul.s	fa5,fa5,fa4
 800af9c:	f00706d3          	fmv.s.x	fa3,a4
 800afa0:	0800e7b7          	lui	a5,0x800e
 800afa4:	8707a507          	flw	fa0,-1936(a5) # 800d870 <__SDATA_BEGIN__+0x40>
 800afa8:	10b6f5d3          	fmul.s	fa1,fa3,fa1
 800afac:	0800e7b7          	lui	a5,0x800e
 800afb0:	58f777c7          	fmsub.s	fa5,fa4,fa5,fa1
 800afb4:	78a777c7          	fmsub.s	fa5,fa4,fa0,fa5
 800afb8:	8387a507          	flw	fa0,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800afbc:	08f57553          	fsub.s	fa0,fa0,fa5
 800afc0:	00008067          	ret
 800afc4:	10a57753          	fmul.s	fa4,fa0,fa0
 800afc8:	0800e6b7          	lui	a3,0x800e
 800afcc:	8c86a787          	flw	fa5,-1848(a3) # 800d8c8 <__SDATA_BEGIN__+0x98>
 800afd0:	0800e6b7          	lui	a3,0x800e
 800afd4:	8cc6a687          	flw	fa3,-1844(a3) # 800d8cc <__SDATA_BEGIN__+0x9c>
 800afd8:	0800e6b7          	lui	a3,0x800e
 800afdc:	0800e637          	lui	a2,0x800e
 800afe0:	68f777c3          	fmadd.s	fa5,fa4,fa5,fa3
 800afe4:	8d06a687          	flw	fa3,-1840(a3) # 800d8d0 <__SDATA_BEGIN__+0xa0>
 800afe8:	3e99a6b7          	lui	a3,0x3e99a
 800afec:	99968693          	addi	a3,a3,-1639 # 3e999999 <__BSS_END__+0x3698bfdd>
 800aff0:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800aff4:	8d462687          	flw	fa3,-1836(a2) # 800d8d4 <__SDATA_BEGIN__+0xa4>
 800aff8:	0800e637          	lui	a2,0x800e
 800affc:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b000:	8d862687          	flw	fa3,-1832(a2) # 800d8d8 <__SDATA_BEGIN__+0xa8>
 800b004:	0800e637          	lui	a2,0x800e
 800b008:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b00c:	8dc62687          	flw	fa3,-1828(a2) # 800d8dc <__SDATA_BEGIN__+0xac>
 800b010:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b014:	10e7f7d3          	fmul.s	fa5,fa5,fa4
 800b018:	f8f6d2e3          	ble	a5,a3,800af9c <__kernel_cosf+0x6c>
 800b01c:	3f4806b7          	lui	a3,0x3f480
 800b020:	04f6c063          	blt	a3,a5,800b060 <__kernel_cosf+0x130>
 800b024:	ff0006b7          	lui	a3,0xff000
 800b028:	00d787b3          	add	a5,a5,a3
 800b02c:	0800e6b7          	lui	a3,0x800e
 800b030:	f0078653          	fmv.s.x	fa2,a5
 800b034:	8386a507          	flw	fa0,-1992(a3) # 800d838 <__SDATA_BEGIN__+0x8>
 800b038:	08c57553          	fsub.s	fa0,fa0,fa2
 800b03c:	f00706d3          	fmv.s.x	fa3,a4
 800b040:	0800e7b7          	lui	a5,0x800e
 800b044:	10b6f5d3          	fmul.s	fa1,fa3,fa1
 800b048:	8707a687          	flw	fa3,-1936(a5) # 800d870 <__SDATA_BEGIN__+0x40>
 800b04c:	58f777c7          	fmsub.s	fa5,fa4,fa5,fa1
 800b050:	60d77747          	fmsub.s	fa4,fa4,fa3,fa2
 800b054:	08f777d3          	fsub.s	fa5,fa4,fa5
 800b058:	08f57553          	fsub.s	fa0,fa0,fa5
 800b05c:	00008067          	ret
 800b060:	0800e7b7          	lui	a5,0x800e
 800b064:	8c07a507          	flw	fa0,-1856(a5) # 800d8c0 <__SDATA_BEGIN__+0x90>
 800b068:	0800e7b7          	lui	a5,0x800e
 800b06c:	8c47a607          	flw	fa2,-1852(a5) # 800d8c4 <__SDATA_BEGIN__+0x94>
 800b070:	fcdff06f          	j	800b03c <__kernel_cosf+0x10c>
 800b074:	0800e7b7          	lui	a5,0x800e
 800b078:	8387a507          	flw	fa0,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800b07c:	00008067          	ret

0800b080 <__kernel_rem_pio2f>:
 800b080:	e2010113          	addi	sp,sp,-480
 800b084:	1d212823          	sw	s2,464(sp)
 800b088:	0800c937          	lui	s2,0x800c
 800b08c:	7cc90813          	addi	a6,s2,1996 # 800c7cc <init_jk>
 800b090:	00e12a23          	sw	a4,20(sp)
 800b094:	00271713          	slli	a4,a4,0x2
 800b098:	1c812c23          	sw	s0,472(sp)
 800b09c:	1ba12823          	sw	s10,432(sp)
 800b0a0:	00e80733          	add	a4,a6,a4
 800b0a4:	1c112e23          	sw	ra,476(sp)
 800b0a8:	1c912a23          	sw	s1,468(sp)
 800b0ac:	1d312623          	sw	s3,460(sp)
 800b0b0:	1d412423          	sw	s4,456(sp)
 800b0b4:	1d512223          	sw	s5,452(sp)
 800b0b8:	1d612023          	sw	s6,448(sp)
 800b0bc:	1b712e23          	sw	s7,444(sp)
 800b0c0:	1b812c23          	sw	s8,440(sp)
 800b0c4:	1b912a23          	sw	s9,436(sp)
 800b0c8:	1bb12623          	sw	s11,428(sp)
 800b0cc:	18813c27          	fsd	fs0,408(sp)
 800b0d0:	18913827          	fsd	fs1,400(sp)
 800b0d4:	19213427          	fsd	fs2,392(sp)
 800b0d8:	19313027          	fsd	fs3,384(sp)
 800b0dc:	17413c27          	fsd	fs4,376(sp)
 800b0e0:	17513827          	fsd	fs5,368(sp)
 800b0e4:	17613427          	fsd	fs6,360(sp)
 800b0e8:	17713027          	fsd	fs7,352(sp)
 800b0ec:	01012623          	sw	a6,12(sp)
 800b0f0:	00c12e23          	sw	a2,28(sp)
 800b0f4:	ffc00893          	li	a7,-4
 800b0f8:	00b12823          	sw	a1,16(sp)
 800b0fc:	00f12023          	sw	a5,0(sp)
 800b100:	00050913          	mv	s2,a0
 800b104:	00072d03          	lw	s10,0(a4) # 1000000 <_start-0x7004000>
 800b108:	fff68413          	addi	s0,a3,-1
 800b10c:	7b164e63          	blt	a2,a7,800b8c8 <__kernel_rem_pio2f+0x848>
 800b110:	ffd60793          	addi	a5,a2,-3
 800b114:	41f7d493          	srai	s1,a5,0x1f
 800b118:	0074f493          	andi	s1,s1,7
 800b11c:	00f484b3          	add	s1,s1,a5
 800b120:	4034d793          	srai	a5,s1,0x3
 800b124:	00178b13          	addi	s6,a5,1
 800b128:	00f12223          	sw	a5,4(sp)
 800b12c:	003b1793          	slli	a5,s6,0x3
 800b130:	00f12c23          	sw	a5,24(sp)
 800b134:	00412783          	lw	a5,4(sp)
 800b138:	01c12603          	lw	a2,28(sp)
 800b13c:	01812583          	lw	a1,24(sp)
 800b140:	008d0733          	add	a4,s10,s0
 800b144:	408787b3          	sub	a5,a5,s0
 800b148:	00170893          	addi	a7,a4,1
 800b14c:	40b60ab3          	sub	s5,a2,a1
 800b150:	07010513          	addi	a0,sp,112
 800b154:	00f888b3          	add	a7,a7,a5
 800b158:	02074863          	bltz	a4,800b188 <__kernel_rem_pio2f+0x108>
 800b15c:	00012603          	lw	a2,0(sp)
 800b160:	00279713          	slli	a4,a5,0x2
 800b164:	f00007d3          	fmv.s.x	fa5,zero
 800b168:	00e60733          	add	a4,a2,a4
 800b16c:	0007c663          	bltz	a5,800b178 <__kernel_rem_pio2f+0xf8>
 800b170:	00072703          	lw	a4,0(a4)
 800b174:	d00777d3          	fcvt.s.w	fa5,a4
 800b178:	00450513          	addi	a0,a0,4
 800b17c:	00178793          	addi	a5,a5,1
 800b180:	fef52e27          	fsw	fa5,-4(a0)
 800b184:	fd179ce3          	bne	a5,a7,800b15c <__kernel_rem_pio2f+0xdc>
 800b188:	002d1313          	slli	t1,s10,0x2
 800b18c:	060d4063          	bltz	s10,800b1ec <__kernel_rem_pio2f+0x16c>
 800b190:	00241e13          	slli	t3,s0,0x2
 800b194:	07010793          	addi	a5,sp,112
 800b198:	004e0513          	addi	a0,t3,4
 800b19c:	002d1313          	slli	t1,s10,0x2
 800b1a0:	01c78e33          	add	t3,a5,t3
 800b1a4:	11410793          	addi	a5,sp,276
 800b1a8:	11010893          	addi	a7,sp,272
 800b1ac:	00678eb3          	add	t4,a5,t1
 800b1b0:	01250533          	add	a0,a0,s2
 800b1b4:	000e0713          	mv	a4,t3
 800b1b8:	00090793          	mv	a5,s2
 800b1bc:	f00007d3          	fmv.s.x	fa5,zero
 800b1c0:	00044e63          	bltz	s0,800b1dc <__kernel_rem_pio2f+0x15c>
 800b1c4:	0007a687          	flw	fa3,0(a5)
 800b1c8:	00072707          	flw	fa4,0(a4)
 800b1cc:	00478793          	addi	a5,a5,4
 800b1d0:	ffc70713          	addi	a4,a4,-4
 800b1d4:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
 800b1d8:	fea796e3          	bne	a5,a0,800b1c4 <__kernel_rem_pio2f+0x144>
 800b1dc:	00f8a027          	fsw	fa5,0(a7)
 800b1e0:	00488893          	addi	a7,a7,4
 800b1e4:	004e0e13          	addi	t3,t3,4
 800b1e8:	fdd896e3          	bne	a7,t4,800b1b4 <__kernel_rem_pio2f+0x134>
 800b1ec:	0800e7b7          	lui	a5,0x800e
 800b1f0:	8387a907          	flw	fs2,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800b1f4:	0800e7b7          	lui	a5,0x800e
 800b1f8:	8e47ab87          	flw	fs7,-1820(a5) # 800d8e4 <__SDATA_BEGIN__+0xb4>
 800b1fc:	0800e7b7          	lui	a5,0x800e
 800b200:	8bc7ab07          	flw	fs6,-1860(a5) # 800d8bc <__SDATA_BEGIN__+0x8c>
 800b204:	0800e7b7          	lui	a5,0x800e
 800b208:	8e87a487          	flw	fs1,-1816(a5) # 800d8e8 <__SDATA_BEGIN__+0xb8>
 800b20c:	0800e7b7          	lui	a5,0x800e
 800b210:	8ec7a407          	flw	fs0,-1812(a5) # 800d8ec <__SDATA_BEGIN__+0xbc>
 800b214:	0800e7b7          	lui	a5,0x800e
 800b218:	8707a987          	flw	fs3,-1936(a5) # 800d870 <__SDATA_BEGIN__+0x40>
 800b21c:	02010b93          	addi	s7,sp,32
 800b220:	01c10793          	addi	a5,sp,28
 800b224:	ff830993          	addi	s3,t1,-8
 800b228:	21290a53          	fmv.s	fs4,fs2
 800b22c:	00269c93          	slli	s9,a3,0x2
 800b230:	006784b3          	add	s1,a5,t1
 800b234:	013b87b3          	add	a5,s7,s3
 800b238:	00f12423          	sw	a5,8(sp)
 800b23c:	01990cb3          	add	s9,s2,s9
 800b240:	000d0a13          	mv	s4,s10
 800b244:	11010d93          	addi	s11,sp,272
 800b248:	002a1993          	slli	s3,s4,0x2
 800b24c:	16010793          	addi	a5,sp,352
 800b250:	013787b3          	add	a5,a5,s3
 800b254:	fb07a507          	flw	fa0,-80(a5)
 800b258:	05405263          	blez	s4,800b29c <__kernel_rem_pio2f+0x21c>
 800b25c:	ffc98713          	addi	a4,s3,-4
 800b260:	00ed8733          	add	a4,s11,a4
 800b264:	000b8513          	mv	a0,s7
 800b268:	0080006f          	j	800b270 <__kernel_rem_pio2f+0x1f0>
 800b26c:	000e0713          	mv	a4,t3
 800b270:	117577d3          	fmul.s	fa5,fa0,fs7
 800b274:	00072687          	flw	fa3,0(a4)
 800b278:	00450513          	addi	a0,a0,4
 800b27c:	ffc70e13          	addi	t3,a4,-4
 800b280:	c00797d3          	fcvt.w.s	a5,fa5,rtz
 800b284:	d007f7d3          	fcvt.s.w	fa5,a5
 800b288:	5167f74b          	fnmsub.s	fa4,fa5,fs6,fa0
 800b28c:	00d7f553          	fadd.s	fa0,fa5,fa3
 800b290:	c00717d3          	fcvt.w.s	a5,fa4,rtz
 800b294:	fef52e23          	sw	a5,-4(a0)
 800b298:	fced9ae3          	bne	s11,a4,800b26c <__kernel_rem_pio2f+0x1ec>
 800b29c:	000a8513          	mv	a0,s5
 800b2a0:	2a5000ef          	jal	ra,800bd44 <scalbnf>
 800b2a4:	20a50ad3          	fmv.s	fs5,fa0
 800b2a8:	10957553          	fmul.s	fa0,fa0,fs1
 800b2ac:	1d1000ef          	jal	ra,800bc7c <floorf>
 800b2b0:	a885754b          	fnmsub.s	fa0,fa0,fs0,fs5
 800b2b4:	c0051c53          	fcvt.w.s	s8,fa0,rtz
 800b2b8:	d00c7ad3          	fcvt.s.w	fs5,s8
 800b2bc:	09557ad3          	fsub.s	fs5,fa0,fs5
 800b2c0:	15505063          	blez	s5,800b400 <__kernel_rem_pio2f+0x380>
 800b2c4:	fffa0713          	addi	a4,s4,-1
 800b2c8:	16010793          	addi	a5,sp,352
 800b2cc:	00271713          	slli	a4,a4,0x2
 800b2d0:	00e78733          	add	a4,a5,a4
 800b2d4:	ec072e83          	lw	t4,-320(a4)
 800b2d8:	00800793          	li	a5,8
 800b2dc:	415787b3          	sub	a5,a5,s5
 800b2e0:	40fed533          	sra	a0,t4,a5
 800b2e4:	00f51e33          	sll	t3,a0,a5
 800b2e8:	00700793          	li	a5,7
 800b2ec:	41ce8e33          	sub	t3,t4,t3
 800b2f0:	415787b3          	sub	a5,a5,s5
 800b2f4:	edc72023          	sw	t3,-320(a4)
 800b2f8:	40fe5b33          	sra	s6,t3,a5
 800b2fc:	00ac0c33          	add	s8,s8,a0
 800b300:	13604063          	bgtz	s6,800b420 <__kernel_rem_pio2f+0x3a0>
 800b304:	f00007d3          	fmv.s.x	fa5,zero
 800b308:	a0faa7d3          	feq.s	a5,fs5,fa5
 800b30c:	1a078463          	beqz	a5,800b4b4 <__kernel_rem_pio2f+0x434>
 800b310:	fffa0e93          	addi	t4,s4,-1
 800b314:	03aec463          	blt	t4,s10,800b33c <__kernel_rem_pio2f+0x2bc>
 800b318:	002a1793          	slli	a5,s4,0x2
 800b31c:	ffc78793          	addi	a5,a5,-4
 800b320:	00fb87b3          	add	a5,s7,a5
 800b324:	00000713          	li	a4,0
 800b328:	0007a503          	lw	a0,0(a5)
 800b32c:	ffc78793          	addi	a5,a5,-4
 800b330:	00a76733          	or	a4,a4,a0
 800b334:	fe979ae3          	bne	a5,s1,800b328 <__kernel_rem_pio2f+0x2a8>
 800b338:	3e071c63          	bnez	a4,800b730 <__kernel_rem_pio2f+0x6b0>
 800b33c:	fffd0793          	addi	a5,s10,-1
 800b340:	00279793          	slli	a5,a5,0x2
 800b344:	16010713          	addi	a4,sp,352
 800b348:	00f707b3          	add	a5,a4,a5
 800b34c:	ec07a783          	lw	a5,-320(a5)
 800b350:	3c079863          	bnez	a5,800b720 <__kernel_rem_pio2f+0x6a0>
 800b354:	00812783          	lw	a5,8(sp)
 800b358:	00100713          	li	a4,1
 800b35c:	ffc78793          	addi	a5,a5,-4
 800b360:	0047a503          	lw	a0,4(a5)
 800b364:	00170713          	addi	a4,a4,1
 800b368:	fe050ae3          	beqz	a0,800b35c <__kernel_rem_pio2f+0x2dc>
 800b36c:	001a0793          	addi	a5,s4,1
 800b370:	00078f13          	mv	t5,a5
 800b374:	00ea0333          	add	t1,s4,a4
 800b378:	00412703          	lw	a4,4(sp)
 800b37c:	00f40533          	add	a0,s0,a5
 800b380:	00251513          	slli	a0,a0,0x2
 800b384:	00f70eb3          	add	t4,a4,a5
 800b388:	16010713          	addi	a4,sp,352
 800b38c:	00a70533          	add	a0,a4,a0
 800b390:	00012703          	lw	a4,0(sp)
 800b394:	002e9e93          	slli	t4,t4,0x2
 800b398:	00279793          	slli	a5,a5,0x2
 800b39c:	01d70eb3          	add	t4,a4,t4
 800b3a0:	00fd8e33          	add	t3,s11,a5
 800b3a4:	f0c50513          	addi	a0,a0,-244
 800b3a8:	000ea783          	lw	a5,0(t4)
 800b3ac:	f0000753          	fmv.s.x	fa4,zero
 800b3b0:	d007f7d3          	fcvt.s.w	fa5,a5
 800b3b4:	00f52227          	fsw	fa5,4(a0)
 800b3b8:	02044463          	bltz	s0,800b3e0 <__kernel_rem_pio2f+0x360>
 800b3bc:	00050713          	mv	a4,a0
 800b3c0:	00090793          	mv	a5,s2
 800b3c4:	00c0006f          	j	800b3d0 <__kernel_rem_pio2f+0x350>
 800b3c8:	00072787          	flw	fa5,0(a4)
 800b3cc:	ffc70713          	addi	a4,a4,-4
 800b3d0:	0007a687          	flw	fa3,0(a5)
 800b3d4:	00478793          	addi	a5,a5,4
 800b3d8:	70f6f743          	fmadd.s	fa4,fa3,fa5,fa4
 800b3dc:	ff9796e3          	bne	a5,s9,800b3c8 <__kernel_rem_pio2f+0x348>
 800b3e0:	00ee2027          	fsw	fa4,0(t3)
 800b3e4:	001f0f13          	addi	t5,t5,1
 800b3e8:	004e8e93          	addi	t4,t4,4
 800b3ec:	004e0e13          	addi	t3,t3,4
 800b3f0:	00450513          	addi	a0,a0,4
 800b3f4:	fbe35ae3          	ble	t5,t1,800b3a8 <__kernel_rem_pio2f+0x328>
 800b3f8:	00030a13          	mv	s4,t1
 800b3fc:	e4dff06f          	j	800b248 <__kernel_rem_pio2f+0x1c8>
 800b400:	300a9063          	bnez	s5,800b700 <__kernel_rem_pio2f+0x680>
 800b404:	fffa0793          	addi	a5,s4,-1
 800b408:	00279793          	slli	a5,a5,0x2
 800b40c:	16010713          	addi	a4,sp,352
 800b410:	00f707b3          	add	a5,a4,a5
 800b414:	ec07ae03          	lw	t3,-320(a5)
 800b418:	408e5b13          	srai	s6,t3,0x8
 800b41c:	ef6054e3          	blez	s6,800b304 <__kernel_rem_pio2f+0x284>
 800b420:	001c0c13          	addi	s8,s8,1
 800b424:	4b405a63          	blez	s4,800b8d8 <__kernel_rem_pio2f+0x858>
 800b428:	02012e83          	lw	t4,32(sp)
 800b42c:	00100793          	li	a5,1
 800b430:	260e9c63          	bnez	t4,800b6a8 <__kernel_rem_pio2f+0x628>
 800b434:	02fa0263          	beq	s4,a5,800b458 <__kernel_rem_pio2f+0x3d8>
 800b438:	02410513          	addi	a0,sp,36
 800b43c:	00100713          	li	a4,1
 800b440:	00052e83          	lw	t4,0(a0)
 800b444:	00170793          	addi	a5,a4,1
 800b448:	00450513          	addi	a0,a0,4
 800b44c:	260e9063          	bnez	t4,800b6ac <__kernel_rem_pio2f+0x62c>
 800b450:	00078713          	mv	a4,a5
 800b454:	fefa16e3          	bne	s4,a5,800b440 <__kernel_rem_pio2f+0x3c0>
 800b458:	03505863          	blez	s5,800b488 <__kernel_rem_pio2f+0x408>
 800b45c:	00100793          	li	a5,1
 800b460:	44fa8463          	beq	s5,a5,800b8a8 <__kernel_rem_pio2f+0x828>
 800b464:	00200793          	li	a5,2
 800b468:	02fa9063          	bne	s5,a5,800b488 <__kernel_rem_pio2f+0x408>
 800b46c:	fffa0793          	addi	a5,s4,-1
 800b470:	16010713          	addi	a4,sp,352
 800b474:	00279793          	slli	a5,a5,0x2
 800b478:	00f707b3          	add	a5,a4,a5
 800b47c:	ec07a703          	lw	a4,-320(a5)
 800b480:	03f77713          	andi	a4,a4,63
 800b484:	ece7a023          	sw	a4,-320(a5)
 800b488:	00200793          	li	a5,2
 800b48c:	e6fb1ce3          	bne	s6,a5,800b304 <__kernel_rem_pio2f+0x284>
 800b490:	09597ad3          	fsub.s	fs5,fs2,fs5
 800b494:	e60e88e3          	beqz	t4,800b304 <__kernel_rem_pio2f+0x284>
 800b498:	21290553          	fmv.s	fa0,fs2
 800b49c:	000a8513          	mv	a0,s5
 800b4a0:	0a5000ef          	jal	ra,800bd44 <scalbnf>
 800b4a4:	08aafad3          	fsub.s	fs5,fs5,fa0
 800b4a8:	f00007d3          	fmv.s.x	fa5,zero
 800b4ac:	a0faa7d3          	feq.s	a5,fs5,fa5
 800b4b0:	e60790e3          	bnez	a5,800b310 <__kernel_rem_pio2f+0x290>
 800b4b4:	01812783          	lw	a5,24(sp)
 800b4b8:	01c12703          	lw	a4,28(sp)
 800b4bc:	215a8553          	fmv.s	fa0,fs5
 800b4c0:	40e78533          	sub	a0,a5,a4
 800b4c4:	081000ef          	jal	ra,800bd44 <scalbnf>
 800b4c8:	0800e7b7          	lui	a5,0x800e
 800b4cc:	8bc7a707          	flw	fa4,-1860(a5) # 800d8bc <__SDATA_BEGIN__+0x8c>
 800b4d0:	a0a707d3          	fle.s	a5,fa4,fa0
 800b4d4:	40078663          	beqz	a5,800b8e0 <__kernel_rem_pio2f+0x860>
 800b4d8:	0800e7b7          	lui	a5,0x800e
 800b4dc:	8e47a787          	flw	fa5,-1820(a5) # 800d8e4 <__SDATA_BEGIN__+0xb4>
 800b4e0:	16010793          	addi	a5,sp,352
 800b4e4:	01378f33          	add	t5,a5,s3
 800b4e8:	10f577d3          	fmul.s	fa5,fa0,fa5
 800b4ec:	001a0e93          	addi	t4,s4,1
 800b4f0:	16010713          	addi	a4,sp,352
 800b4f4:	002e9693          	slli	a3,t4,0x2
 800b4f8:	00d706b3          	add	a3,a4,a3
 800b4fc:	c00797d3          	fcvt.w.s	a5,fa5,rtz
 800b500:	008a8a93          	addi	s5,s5,8
 800b504:	d007f7d3          	fcvt.s.w	fa5,a5
 800b508:	50e7f74b          	fnmsub.s	fa4,fa5,fa4,fa0
 800b50c:	c00797d3          	fcvt.w.s	a5,fa5,rtz
 800b510:	c0071753          	fcvt.w.s	a4,fa4,rtz
 800b514:	ecef2023          	sw	a4,-320(t5)
 800b518:	ecf6a023          	sw	a5,-320(a3)
 800b51c:	0800e7b7          	lui	a5,0x800e
 800b520:	8387a507          	flw	fa0,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800b524:	000a8513          	mv	a0,s5
 800b528:	01d12023          	sw	t4,0(sp)
 800b52c:	019000ef          	jal	ra,800bd44 <scalbnf>
 800b530:	00012e83          	lw	t4,0(sp)
 800b534:	3e0ece63          	bltz	t4,800b930 <__kernel_rem_pio2f+0x8b0>
 800b538:	002e9813          	slli	a6,t4,0x2
 800b53c:	11010313          	addi	t1,sp,272
 800b540:	010305b3          	add	a1,t1,a6
 800b544:	0800e7b7          	lui	a5,0x800e
 800b548:	010b8733          	add	a4,s7,a6
 800b54c:	00058693          	mv	a3,a1
 800b550:	8e47a707          	flw	fa4,-1820(a5) # 800d8e4 <__SDATA_BEGIN__+0xb4>
 800b554:	0080006f          	j	800b55c <__kernel_rem_pio2f+0x4dc>
 800b558:	00060713          	mv	a4,a2
 800b55c:	00072783          	lw	a5,0(a4)
 800b560:	ffc68693          	addi	a3,a3,-4
 800b564:	ffc70613          	addi	a2,a4,-4
 800b568:	d007f7d3          	fcvt.s.w	fa5,a5
 800b56c:	10a7f7d3          	fmul.s	fa5,fa5,fa0
 800b570:	10e57553          	fmul.s	fa0,fa0,fa4
 800b574:	00f6a227          	fsw	fa5,4(a3)
 800b578:	feeb90e3          	bne	s7,a4,800b558 <__kernel_rem_pio2f+0x4d8>
 800b57c:	0c010893          	addi	a7,sp,192
 800b580:	0800e7b7          	lui	a5,0x800e
 800b584:	00088513          	mv	a0,a7
 800b588:	00000613          	li	a2,0
 800b58c:	8e07a607          	flw	fa2,-1824(a5) # 800d8e0 <__SDATA_BEGIN__+0xb0>
 800b590:	040d4e63          	bltz	s10,800b5ec <__kernel_rem_pio2f+0x56c>
 800b594:	00c12783          	lw	a5,12(sp)
 800b598:	00058713          	mv	a4,a1
 800b59c:	20c60753          	fmv.s	fa4,fa2
 800b5a0:	01078693          	addi	a3,a5,16
 800b5a4:	f00007d3          	fmv.s.x	fa5,zero
 800b5a8:	00000793          	li	a5,0
 800b5ac:	0100006f          	j	800b5bc <__kernel_rem_pio2f+0x53c>
 800b5b0:	02f64063          	blt	a2,a5,800b5d0 <__kernel_rem_pio2f+0x550>
 800b5b4:	0006a707          	flw	fa4,0(a3)
 800b5b8:	00468693          	addi	a3,a3,4
 800b5bc:	00072687          	flw	fa3,0(a4)
 800b5c0:	00178793          	addi	a5,a5,1
 800b5c4:	00470713          	addi	a4,a4,4
 800b5c8:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
 800b5cc:	fefd52e3          	ble	a5,s10,800b5b0 <__kernel_rem_pio2f+0x530>
 800b5d0:	00f52027          	fsw	fa5,0(a0)
 800b5d4:	00160613          	addi	a2,a2,1
 800b5d8:	00450513          	addi	a0,a0,4
 800b5dc:	ffc58793          	addi	a5,a1,-4
 800b5e0:	02b30263          	beq	t1,a1,800b604 <__kernel_rem_pio2f+0x584>
 800b5e4:	00078593          	mv	a1,a5
 800b5e8:	fa0d56e3          	bgez	s10,800b594 <__kernel_rem_pio2f+0x514>
 800b5ec:	f00007d3          	fmv.s.x	fa5,zero
 800b5f0:	00160613          	addi	a2,a2,1
 800b5f4:	00450513          	addi	a0,a0,4
 800b5f8:	fef52e27          	fsw	fa5,-4(a0)
 800b5fc:	ffc58793          	addi	a5,a1,-4
 800b600:	feb312e3          	bne	t1,a1,800b5e4 <__kernel_rem_pio2f+0x564>
 800b604:	01412703          	lw	a4,20(sp)
 800b608:	00200793          	li	a5,2
 800b60c:	1ae7ce63          	blt	a5,a4,800b7c8 <__kernel_rem_pio2f+0x748>
 800b610:	01088833          	add	a6,a7,a6
 800b614:	f00007d3          	fmv.s.x	fa5,zero
 800b618:	14e04c63          	bgtz	a4,800b770 <__kernel_rem_pio2f+0x6f0>
 800b61c:	00070663          	beqz	a4,800b628 <__kernel_rem_pio2f+0x5a8>
 800b620:	0280006f          	j	800b648 <__kernel_rem_pio2f+0x5c8>
 800b624:	00078813          	mv	a6,a5
 800b628:	00082707          	flw	fa4,0(a6) # 3f800000 <__BSS_END__+0x377f2644>
 800b62c:	ffc80793          	addi	a5,a6,-4
 800b630:	00e7f7d3          	fadd.s	fa5,fa5,fa4
 800b634:	ff0898e3          	bne	a7,a6,800b624 <__kernel_rem_pio2f+0x5a4>
 800b638:	000b0463          	beqz	s6,800b640 <__kernel_rem_pio2f+0x5c0>
 800b63c:	20f797d3          	fneg.s	fa5,fa5
 800b640:	01012783          	lw	a5,16(sp)
 800b644:	00f7a027          	fsw	fa5,0(a5)
 800b648:	1dc12083          	lw	ra,476(sp)
 800b64c:	1d812403          	lw	s0,472(sp)
 800b650:	007c7513          	andi	a0,s8,7
 800b654:	1d412483          	lw	s1,468(sp)
 800b658:	1d012903          	lw	s2,464(sp)
 800b65c:	1cc12983          	lw	s3,460(sp)
 800b660:	1c812a03          	lw	s4,456(sp)
 800b664:	1c412a83          	lw	s5,452(sp)
 800b668:	1c012b03          	lw	s6,448(sp)
 800b66c:	1bc12b83          	lw	s7,444(sp)
 800b670:	1b812c03          	lw	s8,440(sp)
 800b674:	1b412c83          	lw	s9,436(sp)
 800b678:	1b012d03          	lw	s10,432(sp)
 800b67c:	1ac12d83          	lw	s11,428(sp)
 800b680:	19813407          	fld	fs0,408(sp)
 800b684:	19013487          	fld	fs1,400(sp)
 800b688:	18813907          	fld	fs2,392(sp)
 800b68c:	18013987          	fld	fs3,384(sp)
 800b690:	17813a07          	fld	fs4,376(sp)
 800b694:	17013a87          	fld	fs5,368(sp)
 800b698:	16813b07          	fld	fs6,360(sp)
 800b69c:	16013b87          	fld	fs7,352(sp)
 800b6a0:	1e010113          	addi	sp,sp,480
 800b6a4:	00008067          	ret
 800b6a8:	00000713          	li	a4,0
 800b6ac:	00271713          	slli	a4,a4,0x2
 800b6b0:	16010693          	addi	a3,sp,352
 800b6b4:	00e68533          	add	a0,a3,a4
 800b6b8:	10000713          	li	a4,256
 800b6bc:	41d70733          	sub	a4,a4,t4
 800b6c0:	ece52023          	sw	a4,-320(a0)
 800b6c4:	0347da63          	ble	s4,a5,800b6f8 <__kernel_rem_pio2f+0x678>
 800b6c8:	00279793          	slli	a5,a5,0x2
 800b6cc:	00f68733          	add	a4,a3,a5
 800b6d0:	ec072703          	lw	a4,-320(a4)
 800b6d4:	00fb87b3          	add	a5,s7,a5
 800b6d8:	013b8eb3          	add	t4,s7,s3
 800b6dc:	0ff00513          	li	a0,255
 800b6e0:	0080006f          	j	800b6e8 <__kernel_rem_pio2f+0x668>
 800b6e4:	0007a703          	lw	a4,0(a5)
 800b6e8:	40e50733          	sub	a4,a0,a4
 800b6ec:	00e7a023          	sw	a4,0(a5)
 800b6f0:	00478793          	addi	a5,a5,4
 800b6f4:	ffd798e3          	bne	a5,t4,800b6e4 <__kernel_rem_pio2f+0x664>
 800b6f8:	00100e93          	li	t4,1
 800b6fc:	d5dff06f          	j	800b458 <__kernel_rem_pio2f+0x3d8>
 800b700:	a15987d3          	fle.s	a5,fs3,fs5
 800b704:	00000b13          	li	s6,0
 800b708:	be078ee3          	beqz	a5,800b304 <__kernel_rem_pio2f+0x284>
 800b70c:	001c0c13          	addi	s8,s8,1
 800b710:	00200b13          	li	s6,2
 800b714:	d1404ae3          	bgtz	s4,800b428 <__kernel_rem_pio2f+0x3a8>
 800b718:	095a7ad3          	fsub.s	fs5,fs4,fs5
 800b71c:	be9ff06f          	j	800b304 <__kernel_rem_pio2f+0x284>
 800b720:	001a0793          	addi	a5,s4,1
 800b724:	00078f13          	mv	t5,a5
 800b728:	00078313          	mv	t1,a5
 800b72c:	c4dff06f          	j	800b378 <__kernel_rem_pio2f+0x2f8>
 800b730:	002e9793          	slli	a5,t4,0x2
 800b734:	16010713          	addi	a4,sp,352
 800b738:	00f707b3          	add	a5,a4,a5
 800b73c:	ec07a783          	lw	a5,-320(a5)
 800b740:	ff8a8a93          	addi	s5,s5,-8
 800b744:	dc079ce3          	bnez	a5,800b51c <__kernel_rem_pio2f+0x49c>
 800b748:	002a1793          	slli	a5,s4,0x2
 800b74c:	ff878793          	addi	a5,a5,-8
 800b750:	00fb87b3          	add	a5,s7,a5
 800b754:	ffc78793          	addi	a5,a5,-4
 800b758:	0047a703          	lw	a4,4(a5)
 800b75c:	fffe8e93          	addi	t4,t4,-1
 800b760:	ff8a8a93          	addi	s5,s5,-8
 800b764:	fe0708e3          	beqz	a4,800b754 <__kernel_rem_pio2f+0x6d4>
 800b768:	db5ff06f          	j	800b51c <__kernel_rem_pio2f+0x49c>
 800b76c:	00078813          	mv	a6,a5
 800b770:	00082707          	flw	fa4,0(a6)
 800b774:	ffc80793          	addi	a5,a6,-4
 800b778:	00e7f7d3          	fadd.s	fa5,fa5,fa4
 800b77c:	ff0898e3          	bne	a7,a6,800b76c <__kernel_rem_pio2f+0x6ec>
 800b780:	0c012707          	flw	fa4,192(sp)
 800b784:	08f77753          	fsub.s	fa4,fa4,fa5
 800b788:	160b1863          	bnez	s6,800b8f8 <__kernel_rem_pio2f+0x878>
 800b78c:	01012783          	lw	a5,16(sp)
 800b790:	00f7a027          	fsw	fa5,0(a5)
 800b794:	03d05463          	blez	t4,800b7bc <__kernel_rem_pio2f+0x73c>
 800b798:	0c410713          	addi	a4,sp,196
 800b79c:	00100793          	li	a5,1
 800b7a0:	00072787          	flw	fa5,0(a4)
 800b7a4:	00178793          	addi	a5,a5,1
 800b7a8:	00470713          	addi	a4,a4,4
 800b7ac:	00f77753          	fadd.s	fa4,fa4,fa5
 800b7b0:	fefed8e3          	ble	a5,t4,800b7a0 <__kernel_rem_pio2f+0x720>
 800b7b4:	000b0463          	beqz	s6,800b7bc <__kernel_rem_pio2f+0x73c>
 800b7b8:	20e71753          	fneg.s	fa4,fa4
 800b7bc:	01012783          	lw	a5,16(sp)
 800b7c0:	00e7a227          	fsw	fa4,4(a5)
 800b7c4:	e85ff06f          	j	800b648 <__kernel_rem_pio2f+0x5c8>
 800b7c8:	01412703          	lw	a4,20(sp)
 800b7cc:	00300793          	li	a5,3
 800b7d0:	e6f71ce3          	bne	a4,a5,800b648 <__kernel_rem_pio2f+0x5c8>
 800b7d4:	17d05e63          	blez	t4,800b950 <__kernel_rem_pio2f+0x8d0>
 800b7d8:	002e9713          	slli	a4,t4,0x2
 800b7dc:	16010693          	addi	a3,sp,352
 800b7e0:	00e686b3          	add	a3,a3,a4
 800b7e4:	0c010893          	addi	a7,sp,192
 800b7e8:	ffc70793          	addi	a5,a4,-4
 800b7ec:	f606a687          	flw	fa3,-160(a3)
 800b7f0:	00f887b3          	add	a5,a7,a5
 800b7f4:	0080006f          	j	800b7fc <__kernel_rem_pio2f+0x77c>
 800b7f8:	00068793          	mv	a5,a3
 800b7fc:	0007a787          	flw	fa5,0(a5)
 800b800:	ffc78693          	addi	a3,a5,-4
 800b804:	00d7f753          	fadd.s	fa4,fa5,fa3
 800b808:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800b80c:	00e7a027          	fsw	fa4,0(a5)
 800b810:	00d7f7d3          	fadd.s	fa5,fa5,fa3
 800b814:	20e706d3          	fmv.s	fa3,fa4
 800b818:	00f7a227          	fsw	fa5,4(a5)
 800b81c:	fcf89ee3          	bne	a7,a5,800b7f8 <__kernel_rem_pio2f+0x778>
 800b820:	00100793          	li	a5,1
 800b824:	13d7d663          	ble	t4,a5,800b950 <__kernel_rem_pio2f+0x8d0>
 800b828:	002e9793          	slli	a5,t4,0x2
 800b82c:	16010693          	addi	a3,sp,352
 800b830:	00e68733          	add	a4,a3,a4
 800b834:	ffc78793          	addi	a5,a5,-4
 800b838:	f6072687          	flw	fa3,-160(a4)
 800b83c:	00f88733          	add	a4,a7,a5
 800b840:	0080006f          	j	800b848 <__kernel_rem_pio2f+0x7c8>
 800b844:	00068713          	mv	a4,a3
 800b848:	00072787          	flw	fa5,0(a4)
 800b84c:	ffc70693          	addi	a3,a4,-4
 800b850:	00d7f753          	fadd.s	fa4,fa5,fa3
 800b854:	08e7f7d3          	fsub.s	fa5,fa5,fa4
 800b858:	00e72027          	fsw	fa4,0(a4)
 800b85c:	00d7f7d3          	fadd.s	fa5,fa5,fa3
 800b860:	20e706d3          	fmv.s	fa3,fa4
 800b864:	00f72227          	fsw	fa5,4(a4)
 800b868:	fcd89ee3          	bne	a7,a3,800b844 <__kernel_rem_pio2f+0x7c4>
 800b86c:	f00007d3          	fmv.s.x	fa5,zero
 800b870:	00478793          	addi	a5,a5,4
 800b874:	00f888b3          	add	a7,a7,a5
 800b878:	0008a707          	flw	fa4,0(a7)
 800b87c:	ffc88893          	addi	a7,a7,-4
 800b880:	00e7f7d3          	fadd.s	fa5,fa5,fa4
 800b884:	ff171ae3          	bne	a4,a7,800b878 <__kernel_rem_pio2f+0x7f8>
 800b888:	0c012687          	flw	fa3,192(sp)
 800b88c:	0c412707          	flw	fa4,196(sp)
 800b890:	080b1063          	bnez	s6,800b910 <__kernel_rem_pio2f+0x890>
 800b894:	01012783          	lw	a5,16(sp)
 800b898:	00d7a027          	fsw	fa3,0(a5)
 800b89c:	00e7a227          	fsw	fa4,4(a5)
 800b8a0:	00f7a427          	fsw	fa5,8(a5)
 800b8a4:	da5ff06f          	j	800b648 <__kernel_rem_pio2f+0x5c8>
 800b8a8:	fffa0793          	addi	a5,s4,-1
 800b8ac:	16010713          	addi	a4,sp,352
 800b8b0:	00279793          	slli	a5,a5,0x2
 800b8b4:	00f707b3          	add	a5,a4,a5
 800b8b8:	ec07a703          	lw	a4,-320(a5)
 800b8bc:	07f77713          	andi	a4,a4,127
 800b8c0:	ece7a023          	sw	a4,-320(a5)
 800b8c4:	bc5ff06f          	j	800b488 <__kernel_rem_pio2f+0x408>
 800b8c8:	00800793          	li	a5,8
 800b8cc:	00f12c23          	sw	a5,24(sp)
 800b8d0:	00012223          	sw	zero,4(sp)
 800b8d4:	861ff06f          	j	800b134 <__kernel_rem_pio2f+0xb4>
 800b8d8:	00000e93          	li	t4,0
 800b8dc:	b7dff06f          	j	800b458 <__kernel_rem_pio2f+0x3d8>
 800b8e0:	c00517d3          	fcvt.w.s	a5,fa0,rtz
 800b8e4:	16010713          	addi	a4,sp,352
 800b8e8:	01370f33          	add	t5,a4,s3
 800b8ec:	000a0e93          	mv	t4,s4
 800b8f0:	ecff2023          	sw	a5,-320(t5)
 800b8f4:	c29ff06f          	j	800b51c <__kernel_rem_pio2f+0x49c>
 800b8f8:	20f797d3          	fneg.s	fa5,fa5
 800b8fc:	01012783          	lw	a5,16(sp)
 800b900:	00f7a027          	fsw	fa5,0(a5)
 800b904:	e9d04ae3          	bgtz	t4,800b798 <__kernel_rem_pio2f+0x718>
 800b908:	20e71753          	fneg.s	fa4,fa4
 800b90c:	eb1ff06f          	j	800b7bc <__kernel_rem_pio2f+0x73c>
 800b910:	01012783          	lw	a5,16(sp)
 800b914:	20d696d3          	fneg.s	fa3,fa3
 800b918:	20e71753          	fneg.s	fa4,fa4
 800b91c:	20f797d3          	fneg.s	fa5,fa5
 800b920:	00d7a027          	fsw	fa3,0(a5)
 800b924:	00e7a227          	fsw	fa4,4(a5)
 800b928:	00f7a427          	fsw	fa5,8(a5)
 800b92c:	d1dff06f          	j	800b648 <__kernel_rem_pio2f+0x5c8>
 800b930:	01412703          	lw	a4,20(sp)
 800b934:	00200793          	li	a5,2
 800b938:	e8e7c8e3          	blt	a5,a4,800b7c8 <__kernel_rem_pio2f+0x748>
 800b93c:	f00007d3          	fmv.s.x	fa5,zero
 800b940:	e4e040e3          	bgtz	a4,800b780 <__kernel_rem_pio2f+0x700>
 800b944:	d00712e3          	bnez	a4,800b648 <__kernel_rem_pio2f+0x5c8>
 800b948:	ce0b0ce3          	beqz	s6,800b640 <__kernel_rem_pio2f+0x5c0>
 800b94c:	cf1ff06f          	j	800b63c <__kernel_rem_pio2f+0x5bc>
 800b950:	f00007d3          	fmv.s.x	fa5,zero
 800b954:	f35ff06f          	j	800b888 <__kernel_rem_pio2f+0x808>

0800b958 <__kernel_sinf>:
 800b958:	e00507d3          	fmv.x.s	a5,fa0
 800b95c:	80000737          	lui	a4,0x80000
 800b960:	fff74713          	not	a4,a4
 800b964:	00f77733          	and	a4,a4,a5
 800b968:	320006b7          	lui	a3,0x32000
 800b96c:	00d75663          	ble	a3,a4,800b978 <__kernel_sinf+0x20>
 800b970:	c0051753          	fcvt.w.s	a4,fa0,rtz
 800b974:	08070863          	beqz	a4,800ba04 <__kernel_sinf+0xac>
 800b978:	f00787d3          	fmv.s.x	fa5,a5
 800b97c:	0800e737          	lui	a4,0x800e
 800b980:	10f7f753          	fmul.s	fa4,fa5,fa5
 800b984:	8f072787          	flw	fa5,-1808(a4) # 800d8f0 <__SDATA_BEGIN__+0xc0>
 800b988:	0800e737          	lui	a4,0x800e
 800b98c:	8f472687          	flw	fa3,-1804(a4) # 800d8f4 <__SDATA_BEGIN__+0xc4>
 800b990:	0800e737          	lui	a4,0x800e
 800b994:	68f777c3          	fmadd.s	fa5,fa4,fa5,fa3
 800b998:	8f872687          	flw	fa3,-1800(a4) # 800d8f8 <__SDATA_BEGIN__+0xc8>
 800b99c:	0800e737          	lui	a4,0x800e
 800b9a0:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b9a4:	f00786d3          	fmv.s.x	fa3,a5
 800b9a8:	10e6f553          	fmul.s	fa0,fa3,fa4
 800b9ac:	8fc72687          	flw	fa3,-1796(a4) # 800d8fc <__SDATA_BEGIN__+0xcc>
 800b9b0:	0800e737          	lui	a4,0x800e
 800b9b4:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b9b8:	90072687          	flw	fa3,-1792(a4) # 800d900 <__SDATA_BEGIN__+0xd0>
 800b9bc:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
 800b9c0:	00051e63          	bnez	a0,800b9dc <__kernel_sinf+0x84>
 800b9c4:	0800e737          	lui	a4,0x800e
 800b9c8:	90472587          	flw	fa1,-1788(a4) # 800d904 <__SDATA_BEGIN__+0xd4>
 800b9cc:	58f777c3          	fmadd.s	fa5,fa4,fa5,fa1
 800b9d0:	f0078753          	fmv.s.x	fa4,a5
 800b9d4:	70a7f543          	fmadd.s	fa0,fa5,fa0,fa4
 800b9d8:	00008067          	ret
 800b9dc:	10f577d3          	fmul.s	fa5,fa0,fa5
 800b9e0:	0800e737          	lui	a4,0x800e
 800b9e4:	87072687          	flw	fa3,-1936(a4) # 800d870 <__SDATA_BEGIN__+0x40>
 800b9e8:	0800e737          	lui	a4,0x800e
 800b9ec:	78d5f7c7          	fmsub.s	fa5,fa1,fa3,fa5
 800b9f0:	58e7f7c7          	fmsub.s	fa5,fa5,fa4,fa1
 800b9f4:	85c72707          	flw	fa4,-1956(a4) # 800d85c <__SDATA_BEGIN__+0x2c>
 800b9f8:	78e57543          	fmadd.s	fa0,fa0,fa4,fa5
 800b9fc:	f00787d3          	fmv.s.x	fa5,a5
 800ba00:	08a7f553          	fsub.s	fa0,fa5,fa0
 800ba04:	00008067          	ret

0800ba08 <atanf>:
 800ba08:	ff010113          	addi	sp,sp,-16
 800ba0c:	e00507d3          	fmv.x.s	a5,fa0
 800ba10:	00812423          	sw	s0,8(sp)
 800ba14:	80000437          	lui	s0,0x80000
 800ba18:	fff44413          	not	s0,s0
 800ba1c:	00912223          	sw	s1,4(sp)
 800ba20:	00112623          	sw	ra,12(sp)
 800ba24:	00f47433          	and	s0,s0,a5
 800ba28:	50800737          	lui	a4,0x50800
 800ba2c:	00078493          	mv	s1,a5
 800ba30:	02e44663          	blt	s0,a4,800ba5c <atanf+0x54>
 800ba34:	7f800737          	lui	a4,0x7f800
 800ba38:	10874e63          	blt	a4,s0,800bb54 <atanf+0x14c>
 800ba3c:	14f05863          	blez	a5,800bb8c <atanf+0x184>
 800ba40:	0800e7b7          	lui	a5,0x800e
 800ba44:	8407a507          	flw	fa0,-1984(a5) # 800d840 <__SDATA_BEGIN__+0x10>
 800ba48:	00c12083          	lw	ra,12(sp)
 800ba4c:	00812403          	lw	s0,8(sp)
 800ba50:	00412483          	lw	s1,4(sp)
 800ba54:	01010113          	addi	sp,sp,16
 800ba58:	00008067          	ret
 800ba5c:	3ee00737          	lui	a4,0x3ee00
 800ba60:	16e45063          	ble	a4,s0,800bbc0 <atanf+0x1b8>
 800ba64:	31000737          	lui	a4,0x31000
 800ba68:	10e44263          	blt	s0,a4,800bb6c <atanf+0x164>
 800ba6c:	fff00713          	li	a4,-1
 800ba70:	f00787d3          	fmv.s.x	fa5,a5
 800ba74:	0800e6b7          	lui	a3,0x800e
 800ba78:	9106a507          	flw	fa0,-1776(a3) # 800d910 <__SDATA_BEGIN__+0xe0>
 800ba7c:	10f7f6d3          	fmul.s	fa3,fa5,fa5
 800ba80:	0800e6b7          	lui	a3,0x800e
 800ba84:	9146a787          	flw	fa5,-1772(a3) # 800d914 <__SDATA_BEGIN__+0xe4>
 800ba88:	0800e6b7          	lui	a3,0x800e
 800ba8c:	0800e637          	lui	a2,0x800e
 800ba90:	10d6f753          	fmul.s	fa4,fa3,fa3
 800ba94:	78a77543          	fmadd.s	fa0,fa4,fa0,fa5
 800ba98:	9286a787          	flw	fa5,-1752(a3) # 800d928 <__SDATA_BEGIN__+0xf8>
 800ba9c:	0800e6b7          	lui	a3,0x800e
 800baa0:	92c6a607          	flw	fa2,-1748(a3) # 800d92c <__SDATA_BEGIN__+0xfc>
 800baa4:	0800e6b7          	lui	a3,0x800e
 800baa8:	60f777c3          	fmadd.s	fa5,fa4,fa5,fa2
 800baac:	9186a607          	flw	fa2,-1768(a3) # 800d918 <__SDATA_BEGIN__+0xe8>
 800bab0:	0800e6b7          	lui	a3,0x800e
 800bab4:	60e57543          	fmadd.s	fa0,fa0,fa4,fa2
 800bab8:	9306a607          	flw	fa2,-1744(a3) # 800d930 <__SDATA_BEGIN__+0x100>
 800babc:	0800e6b7          	lui	a3,0x800e
 800bac0:	60e7f7c3          	fmadd.s	fa5,fa5,fa4,fa2
 800bac4:	91c6a607          	flw	fa2,-1764(a3) # 800d91c <__SDATA_BEGIN__+0xec>
 800bac8:	0800e6b7          	lui	a3,0x800e
 800bacc:	60e57543          	fmadd.s	fa0,fa0,fa4,fa2
 800bad0:	9346a607          	flw	fa2,-1740(a3) # 800d934 <__SDATA_BEGIN__+0x104>
 800bad4:	0800e6b7          	lui	a3,0x800e
 800bad8:	60e7f7c3          	fmadd.s	fa5,fa5,fa4,fa2
 800badc:	9206a607          	flw	fa2,-1760(a3) # 800d920 <__SDATA_BEGIN__+0xf0>
 800bae0:	0800e6b7          	lui	a3,0x800e
 800bae4:	60e57543          	fmadd.s	fa0,fa0,fa4,fa2
 800bae8:	9386a607          	flw	fa2,-1736(a3) # 800d938 <__SDATA_BEGIN__+0x108>
 800baec:	fff00693          	li	a3,-1
 800baf0:	60e7f7c3          	fmadd.s	fa5,fa5,fa4,fa2
 800baf4:	92462607          	flw	fa2,-1756(a2) # 800d924 <__SDATA_BEGIN__+0xf4>
 800baf8:	60e57543          	fmadd.s	fa0,fa0,fa4,fa2
 800bafc:	10e7f7d3          	fmul.s	fa5,fa5,fa4
 800bb00:	78d57543          	fmadd.s	fa0,fa0,fa3,fa5
 800bb04:	f00787d3          	fmv.s.x	fa5,a5
 800bb08:	10f57553          	fmul.s	fa0,fa0,fa5
 800bb0c:	08d70e63          	beq	a4,a3,800bba8 <atanf+0x1a0>
 800bb10:	00271693          	slli	a3,a4,0x2
 800bb14:	0800d737          	lui	a4,0x800d
 800bb18:	80470713          	addi	a4,a4,-2044 # 800c804 <atanhi>
 800bb1c:	00d70733          	add	a4,a4,a3
 800bb20:	01072707          	flw	fa4,16(a4)
 800bb24:	00072787          	flw	fa5,0(a4)
 800bb28:	08e57553          	fsub.s	fa0,fa0,fa4
 800bb2c:	f0078753          	fmv.s.x	fa4,a5
 800bb30:	08e57553          	fsub.s	fa0,fa0,fa4
 800bb34:	08a7f553          	fsub.s	fa0,fa5,fa0
 800bb38:	f004d8e3          	bgez	s1,800ba48 <atanf+0x40>
 800bb3c:	00c12083          	lw	ra,12(sp)
 800bb40:	00812403          	lw	s0,8(sp)
 800bb44:	00412483          	lw	s1,4(sp)
 800bb48:	20a51553          	fneg.s	fa0,fa0
 800bb4c:	01010113          	addi	sp,sp,16
 800bb50:	00008067          	ret
 800bb54:	00c12083          	lw	ra,12(sp)
 800bb58:	00812403          	lw	s0,8(sp)
 800bb5c:	00412483          	lw	s1,4(sp)
 800bb60:	00a57553          	fadd.s	fa0,fa0,fa0
 800bb64:	01010113          	addi	sp,sp,16
 800bb68:	00008067          	ret
 800bb6c:	0800e737          	lui	a4,0x800e
 800bb70:	84472787          	flw	fa5,-1980(a4) # 800d844 <__SDATA_BEGIN__+0x14>
 800bb74:	0800e737          	lui	a4,0x800e
 800bb78:	83872707          	flw	fa4,-1992(a4) # 800d838 <__SDATA_BEGIN__+0x8>
 800bb7c:	00f577d3          	fadd.s	fa5,fa0,fa5
 800bb80:	a0f71753          	flt.s	a4,fa4,fa5
 800bb84:	ee0704e3          	beqz	a4,800ba6c <atanf+0x64>
 800bb88:	ec1ff06f          	j	800ba48 <atanf+0x40>
 800bb8c:	00c12083          	lw	ra,12(sp)
 800bb90:	00812403          	lw	s0,8(sp)
 800bb94:	0800e7b7          	lui	a5,0x800e
 800bb98:	88c7a507          	flw	fa0,-1908(a5) # 800d88c <__SDATA_BEGIN__+0x5c>
 800bb9c:	00412483          	lw	s1,4(sp)
 800bba0:	01010113          	addi	sp,sp,16
 800bba4:	00008067          	ret
 800bba8:	00c12083          	lw	ra,12(sp)
 800bbac:	00812403          	lw	s0,8(sp)
 800bbb0:	00412483          	lw	s1,4(sp)
 800bbb4:	08a7f553          	fsub.s	fa0,fa5,fa0
 800bbb8:	01010113          	addi	sp,sp,16
 800bbbc:	00008067          	ret
 800bbc0:	0a4000ef          	jal	ra,800bc64 <fabsf>
 800bbc4:	3f9807b7          	lui	a5,0x3f980
 800bbc8:	02f45a63          	ble	a5,s0,800bbfc <atanf+0x1f4>
 800bbcc:	3f3007b7          	lui	a5,0x3f300
 800bbd0:	06f45a63          	ble	a5,s0,800bc44 <atanf+0x23c>
 800bbd4:	0800e7b7          	lui	a5,0x800e
 800bbd8:	8747a787          	flw	fa5,-1932(a5) # 800d874 <__SDATA_BEGIN__+0x44>
 800bbdc:	0800e7b7          	lui	a5,0x800e
 800bbe0:	9087a687          	flw	fa3,-1784(a5) # 800d908 <__SDATA_BEGIN__+0xd8>
 800bbe4:	00f57753          	fadd.s	fa4,fa0,fa5
 800bbe8:	00000713          	li	a4,0
 800bbec:	68f57543          	fmadd.s	fa0,fa0,fa5,fa3
 800bbf0:	18e577d3          	fdiv.s	fa5,fa0,fa4
 800bbf4:	e00787d3          	fmv.x.s	a5,fa5
 800bbf8:	e79ff06f          	j	800ba70 <atanf+0x68>
 800bbfc:	401c07b7          	lui	a5,0x401c0
 800bc00:	02f45663          	ble	a5,s0,800bc2c <atanf+0x224>
 800bc04:	0800e7b7          	lui	a5,0x800e
 800bc08:	90c7a787          	flw	fa5,-1780(a5) # 800d90c <__SDATA_BEGIN__+0xdc>
 800bc0c:	0800e7b7          	lui	a5,0x800e
 800bc10:	8387a687          	flw	fa3,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800bc14:	08f57753          	fsub.s	fa4,fa0,fa5
 800bc18:	00200713          	li	a4,2
 800bc1c:	68f57543          	fmadd.s	fa0,fa0,fa5,fa3
 800bc20:	18a777d3          	fdiv.s	fa5,fa4,fa0
 800bc24:	e00787d3          	fmv.x.s	a5,fa5
 800bc28:	e49ff06f          	j	800ba70 <atanf+0x68>
 800bc2c:	0800e7b7          	lui	a5,0x800e
 800bc30:	9087a787          	flw	fa5,-1784(a5) # 800d908 <__SDATA_BEGIN__+0xd8>
 800bc34:	00300713          	li	a4,3
 800bc38:	18a7f7d3          	fdiv.s	fa5,fa5,fa0
 800bc3c:	e00787d3          	fmv.x.s	a5,fa5
 800bc40:	e31ff06f          	j	800ba70 <atanf+0x68>
 800bc44:	0800e7b7          	lui	a5,0x800e
 800bc48:	8387a787          	flw	fa5,-1992(a5) # 800d838 <__SDATA_BEGIN__+0x8>
 800bc4c:	00100713          	li	a4,1
 800bc50:	08f57753          	fsub.s	fa4,fa0,fa5
 800bc54:	00f57553          	fadd.s	fa0,fa0,fa5
 800bc58:	18a777d3          	fdiv.s	fa5,fa4,fa0
 800bc5c:	e00787d3          	fmv.x.s	a5,fa5
 800bc60:	e11ff06f          	j	800ba70 <atanf+0x68>

0800bc64 <fabsf>:
 800bc64:	e00507d3          	fmv.x.s	a5,fa0
 800bc68:	80000737          	lui	a4,0x80000
 800bc6c:	fff74713          	not	a4,a4
 800bc70:	00e7f7b3          	and	a5,a5,a4
 800bc74:	f0078553          	fmv.s.x	fa0,a5
 800bc78:	00008067          	ret

0800bc7c <floorf>:
 800bc7c:	e00506d3          	fmv.x.s	a3,fa0
 800bc80:	800007b7          	lui	a5,0x80000
 800bc84:	fff7c793          	not	a5,a5
 800bc88:	00d7f7b3          	and	a5,a5,a3
 800bc8c:	0177d713          	srli	a4,a5,0x17
 800bc90:	f8170713          	addi	a4,a4,-127 # 7fffff81 <__BSS_END__+0x77ff25c5>
 800bc94:	01600613          	li	a2,22
 800bc98:	00068593          	mv	a1,a3
 800bc9c:	08e64663          	blt	a2,a4,800bd28 <floorf+0xac>
 800bca0:	04074863          	bltz	a4,800bcf0 <floorf+0x74>
 800bca4:	00800837          	lui	a6,0x800
 800bca8:	fff80793          	addi	a5,a6,-1 # 7fffff <_start-0x7804001>
 800bcac:	40e7d7b3          	sra	a5,a5,a4
 800bcb0:	00d7f533          	and	a0,a5,a3
 800bcb4:	e0050653          	fmv.x.s	a2,fa0
 800bcb8:	02050863          	beqz	a0,800bce8 <floorf+0x6c>
 800bcbc:	0800e537          	lui	a0,0x800e
 800bcc0:	84452787          	flw	fa5,-1980(a0) # 800d844 <__SDATA_BEGIN__+0x14>
 800bcc4:	f0000753          	fmv.s.x	fa4,zero
 800bcc8:	00f577d3          	fadd.s	fa5,fa0,fa5
 800bccc:	a0f71553          	flt.s	a0,fa4,fa5
 800bcd0:	00050c63          	beqz	a0,800bce8 <floorf+0x6c>
 800bcd4:	0006d663          	bgez	a3,800bce0 <floorf+0x64>
 800bcd8:	40e85733          	sra	a4,a6,a4
 800bcdc:	00d705b3          	add	a1,a4,a3
 800bce0:	fff7c613          	not	a2,a5
 800bce4:	00b67633          	and	a2,a2,a1
 800bce8:	f0060553          	fmv.s.x	fa0,a2
 800bcec:	00008067          	ret
 800bcf0:	0800e737          	lui	a4,0x800e
 800bcf4:	84472787          	flw	fa5,-1980(a4) # 800d844 <__SDATA_BEGIN__+0x14>
 800bcf8:	f0000753          	fmv.s.x	fa4,zero
 800bcfc:	e0050653          	fmv.x.s	a2,fa0
 800bd00:	00f577d3          	fadd.s	fa5,fa0,fa5
 800bd04:	a0f71753          	flt.s	a4,fa4,fa5
 800bd08:	fe0700e3          	beqz	a4,800bce8 <floorf+0x6c>
 800bd0c:	e0070653          	fmv.x.s	a2,fa4
 800bd10:	fc06dce3          	bgez	a3,800bce8 <floorf+0x6c>
 800bd14:	e0050653          	fmv.x.s	a2,fa0
 800bd18:	fc0788e3          	beqz	a5,800bce8 <floorf+0x6c>
 800bd1c:	0800e7b7          	lui	a5,0x800e
 800bd20:	9087a603          	lw	a2,-1784(a5) # 800d908 <__SDATA_BEGIN__+0xd8>
 800bd24:	fc5ff06f          	j	800bce8 <floorf+0x6c>
 800bd28:	7f800737          	lui	a4,0x7f800
 800bd2c:	e0050653          	fmv.x.s	a2,fa0
 800bd30:	fae7ece3          	bltu	a5,a4,800bce8 <floorf+0x6c>
 800bd34:	00a577d3          	fadd.s	fa5,fa0,fa0
 800bd38:	e0078653          	fmv.x.s	a2,fa5
 800bd3c:	f0060553          	fmv.s.x	fa0,a2
 800bd40:	00008067          	ret

0800bd44 <scalbnf>:
 800bd44:	e0050753          	fmv.x.s	a4,fa0
 800bd48:	800007b7          	lui	a5,0x80000
 800bd4c:	fff7c793          	not	a5,a5
 800bd50:	00e7f7b3          	and	a5,a5,a4
 800bd54:	04078a63          	beqz	a5,800bda8 <scalbnf+0x64>
 800bd58:	7f800637          	lui	a2,0x7f800
 800bd5c:	02c7fe63          	bleu	a2,a5,800bd98 <scalbnf+0x54>
 800bd60:	00c776b3          	and	a3,a4,a2
 800bd64:	04069663          	bnez	a3,800bdb0 <scalbnf+0x6c>
 800bd68:	0800e6b7          	lui	a3,0x800e
 800bd6c:	93c6a787          	flw	fa5,-1732(a3) # 800d93c <__SDATA_BEGIN__+0x10c>
 800bd70:	ffff47b7          	lui	a5,0xffff4
 800bd74:	cb078793          	addi	a5,a5,-848 # ffff3cb0 <__BSS_END__+0xf7fe62f4>
 800bd78:	10f577d3          	fmul.s	fa5,fa0,fa5
 800bd7c:	e0078753          	fmv.x.s	a4,fa5
 800bd80:	0cf54063          	blt	a0,a5,800be40 <scalbnf+0xfc>
 800bd84:	41775793          	srai	a5,a4,0x17
 800bd88:	0ff7f793          	andi	a5,a5,255
 800bd8c:	00070693          	mv	a3,a4
 800bd90:	fe778793          	addi	a5,a5,-25
 800bd94:	0240006f          	j	800bdb8 <scalbnf+0x74>
 800bd98:	00a577d3          	fadd.s	fa5,fa0,fa0
 800bd9c:	e00787d3          	fmv.x.s	a5,fa5
 800bda0:	f0078553          	fmv.s.x	fa0,a5
 800bda4:	00008067          	ret
 800bda8:	e00507d3          	fmv.x.s	a5,fa0
 800bdac:	ff5ff06f          	j	800bda0 <scalbnf+0x5c>
 800bdb0:	00070693          	mv	a3,a4
 800bdb4:	0177d793          	srli	a5,a5,0x17
 800bdb8:	fe010113          	addi	sp,sp,-32
 800bdbc:	00112e23          	sw	ra,28(sp)
 800bdc0:	00813427          	fsd	fs0,8(sp)
 800bdc4:	00a787b3          	add	a5,a5,a0
 800bdc8:	0fe00613          	li	a2,254
 800bdcc:	00f64e63          	blt	a2,a5,800bde8 <scalbnf+0xa4>
 800bdd0:	04f04463          	bgtz	a5,800be18 <scalbnf+0xd4>
 800bdd4:	fea00613          	li	a2,-22
 800bdd8:	08c7d063          	ble	a2,a5,800be58 <scalbnf+0x114>
 800bddc:	0000c7b7          	lui	a5,0xc
 800bde0:	35078793          	addi	a5,a5,848 # c350 <_start-0x7ff7cb0>
 800bde4:	0aa7d263          	ble	a0,a5,800be88 <scalbnf+0x144>
 800bde8:	0800e7b7          	lui	a5,0x800e
 800bdec:	8447a407          	flw	fs0,-1980(a5) # 800d844 <__SDATA_BEGIN__+0x14>
 800bdf0:	20840553          	fmv.s	fa0,fs0
 800bdf4:	f00705d3          	fmv.s.x	fa1,a4
 800bdf8:	910fc0ef          	jal	ra,8007f08 <copysignf>
 800bdfc:	108577d3          	fmul.s	fa5,fa0,fs0
 800be00:	01c12083          	lw	ra,28(sp)
 800be04:	00813407          	fld	fs0,8(sp)
 800be08:	02010113          	addi	sp,sp,32
 800be0c:	e00787d3          	fmv.x.s	a5,fa5
 800be10:	f0078553          	fmv.s.x	fa0,a5
 800be14:	00008067          	ret
 800be18:	80800737          	lui	a4,0x80800
 800be1c:	fff70713          	addi	a4,a4,-1 # 807fffff <__BSS_END__+0x787f2643>
 800be20:	00e6f733          	and	a4,a3,a4
 800be24:	01779793          	slli	a5,a5,0x17
 800be28:	00f767b3          	or	a5,a4,a5
 800be2c:	01c12083          	lw	ra,28(sp)
 800be30:	00813407          	fld	fs0,8(sp)
 800be34:	f0078553          	fmv.s.x	fa0,a5
 800be38:	02010113          	addi	sp,sp,32
 800be3c:	00008067          	ret
 800be40:	0800e7b7          	lui	a5,0x800e
 800be44:	9407a787          	flw	fa5,-1728(a5) # 800d940 <__SDATA_BEGIN__+0x110>
 800be48:	f0070753          	fmv.s.x	fa4,a4
 800be4c:	10f777d3          	fmul.s	fa5,fa4,fa5
 800be50:	e00787d3          	fmv.x.s	a5,fa5
 800be54:	f4dff06f          	j	800bda0 <scalbnf+0x5c>
 800be58:	80800737          	lui	a4,0x80800
 800be5c:	fff70713          	addi	a4,a4,-1 # 807fffff <__BSS_END__+0x787f2643>
 800be60:	01978793          	addi	a5,a5,25
 800be64:	00e6f6b3          	and	a3,a3,a4
 800be68:	01779793          	slli	a5,a5,0x17
 800be6c:	00d7e7b3          	or	a5,a5,a3
 800be70:	0800e737          	lui	a4,0x800e
 800be74:	f0078753          	fmv.s.x	fa4,a5
 800be78:	94472787          	flw	fa5,-1724(a4) # 800d944 <__SDATA_BEGIN__+0x114>
 800be7c:	10f777d3          	fmul.s	fa5,fa4,fa5
 800be80:	e00787d3          	fmv.x.s	a5,fa5
 800be84:	fa9ff06f          	j	800be2c <scalbnf+0xe8>
 800be88:	0800e7b7          	lui	a5,0x800e
 800be8c:	9407a407          	flw	fs0,-1728(a5) # 800d940 <__SDATA_BEGIN__+0x110>
 800be90:	f61ff06f          	j	800bdf0 <scalbnf+0xac>

0800be94 <matherr>:
 800be94:	00000513          	li	a0,0
 800be98:	00008067          	ret

0800be9c <nan>:
 800be9c:	0800e7b7          	lui	a5,0x800e
 800bea0:	8307b507          	fld	fa0,-2000(a5) # 800d830 <__SDATA_BEGIN__>
 800bea4:	00008067          	ret
